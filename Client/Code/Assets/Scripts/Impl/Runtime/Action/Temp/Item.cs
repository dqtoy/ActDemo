using UnityEngine;
using System.Collections.Generic;

public enum EItemType
{
    Equip = 1,
    Rune = 2,
    Stone = 3,
    Props = 4,
    Skill = 5,
}

// Item
//  the base of all items in system.
//
//  the item is serialized from the server vs JSON.
//
//  different item type contains different attributes.
//  such as the equip even contains dynamic attributes generated by strengthen system.
//
//  so it store all of the attributes in the dictionary Attrib.
//  you can convert it to some XxxxItem for easy use through ToXxxItem() function.
//

public class Item
{
    public int ID { get; set; }
    
    public int Base { get; set; }
    
    public int Num { get; set; }
    
    public Dictionary<string, int> Attrib { get; set; }

    public Item()
    {
        Attrib = new Dictionary<string, int>();
    }

    // this is private field.
    ItemBase mItemBase = null;

    // this is public property.
    public ItemBase ItemBase { 
		get { if( Init() )
				return mItemBase; 
			  else 
				return null;
		}
	}

    // get a custom attrib with a name, default value is 0.
    public int GetAttrib(string name)
    {
        return GetAttrib(name, 0);
    }

    // get a custom attrib with a name, if attrib isn't found, default value returned.
    public int GetAttrib(string name, int defaultValue)
    {
        int ret;
        if (Attrib.TryGetValue(name, out ret))
            return ret;
        return defaultValue;
    }

    // setup a custom attrib.
    public void SetAttrib(string name, int value)
    {
        Attrib[name] = value;
    }

    // this should be called after the JSON serialize finished.
    public bool Init()
    {
        mItemBase = ItemBaseManager.Instance.GetItem(Base);
        if (mItemBase == null)
        {
            Debug.LogError("The item isnot defined in itembase: " + ID);
            return false;
        }

        return true;
    }

    // convert this item to [SkillItem] for easy use.
    public SkillItem ToSkillItem() { return (mItemBase.MainType == (int)EItemType.Skill) ? new SkillItem(this) : null; }
}
