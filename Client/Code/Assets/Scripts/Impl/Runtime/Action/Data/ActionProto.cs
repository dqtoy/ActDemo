// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_proto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ActData {

  #region Enums
  public enum MaterialType {
    /// <summary>
    /// 无
    /// </summary>
    MaterialNone = 0,
    /// <summary>
    /// 金属
    /// </summary>
    MaterialMetal = 1,
    /// <summary>
    /// 链状金属
    /// </summary>
    Chain = 2,
    /// <summary>
    /// 石材
    /// </summary>
    Stone = 3,
    /// <summary>
    /// 骨质
    /// </summary>
    Bone = 4,
    /// <summary>
    /// 木质
    /// </summary>
    Wood = 5,
    /// <summary>
    /// 肉身
    /// </summary>
    Flesh = 6,
    /// <summary>
    /// 流质肉体
    /// </summary>
    Fluid = 7,
    /// <summary>
    /// 气体
    /// </summary>
    Gas = 8,
  }

  public enum EventType {
    EventNone = 0,
    /// <summary>
    /// 播放特效	
    /// </summary>
    PlayEffect = 1,
    /// <summary>
    /// 播放动画	
    /// </summary>
    PlayAnim = 2,
    /// <summary>
    /// 播放音效	
    /// </summary>
    PlaySound = 3,
    /// <summary>
    /// 打开状态
    /// </summary>
    StatusOn = 4,
    /// <summary>
    /// 关闭状态
    /// </summary>
    StatusOff = 5,
    /// <summary>
    /// 打开连接动作
    /// </summary>
    LinkActionOn = 6,
    /// <summary>
    /// 关闭连接动作
    /// </summary>
    LinkActionOff = 7,
    /// <summary>
    /// 设定位移速度
    /// </summary>
    SetVelocity = 8,
    /// <summary>
    /// 设定位移速度X
    /// </summary>
    SetVelocityX = 9,
    /// <summary>
    /// 设定位移速度Y
    /// </summary>
    SetVelocityY = 10,
    /// <summary>
    /// 设定位移速度Z
    /// </summary>
    SetVelocityZ = 11,
    /// <summary>
    /// 设定方向
    /// </summary>
    SetDirection = 12,
    /// <summary>
    /// 执行脚本
    /// </summary>
    ExeScript = 13,
    /// <summary>
    /// 设置重力
    /// </summary>
    SetGravity = 14,
    /// <summary>
    /// 设置高度状态
    /// </summary>
    SetHeightStatus = 15,
    /// <summary>
    /// 设置动作状态
    /// </summary>
    SetActionStatus = 16,
    /// <summary>
    /// 设置片段状态
    /// </summary>
    SetFragmentStatus = 17,
    /// <summary>
    /// 添加单位
    /// </summary>
    AddUnit = 18,
    /// <summary>
    /// 自我毁灭
    /// </summary>
    RemoveMyself = 19,
    /// <summary>
    /// 掉落宝物
    /// </summary>
    DropItem = 20,
    /// <summary>
    /// 设置颜色
    /// </summary>
    SetColor = 21,
    /// <summary>
    /// 拾取
    /// </summary>
    PickUp = 22,
    /// <summary>
    /// 摄像机
    /// </summary>
    CameraEffect = 23,
    /// <summary>
    /// 列举目标
    /// </summary>
    ListTargets = 24,
    /// <summary>
    /// 清除目标
    /// </summary>
    ClearTargets = 25,
    /// <summary>
    /// 面向目标
    /// </summary>
    FaceTargets = 26,
    /// <summary>
    /// 开启刀光
    /// </summary>
    EnableWeaponTrail = 27,
    /// <summary>
    /// 关闭刀光
    /// </summary>
    DisableWeaponTrail = 28,
    /// <summary>
    /// 设置攻击定义的速度
    /// </summary>
    SetHitDefVelocity = 29,
    /// <summary>
    /// 关闭所有的攻击定义
    /// </summary>
    ClearHitDefs = 30,
    /// <summary>
    /// 设置自定义变量
    /// </summary>
    SetVariable = 31,
    /// <summary>
    /// 调整自定义变量
    /// </summary>
    AdjustVarible = 32,
    /// <summary>
    /// 幻影特效
    /// </summary>
    GhostEffect = 33,
    /// <summary>
    /// 攻击选中的目标
    /// </summary>
    AttackTargets = 34,
    /// <summary>
    /// 移动到目标
    /// </summary>
    GoToTargets = 35,
    /// <summary>
    /// 召唤
    /// </summary>
    SummonUnit = 36,
    /// <summary>
    ///控制召唤怪
    /// </summary>
    ControlUnit = 37,
    /// <summary>
    ///动作等级
    /// </summary>
    ActionLevel = 38,
    /// <summary>
    ///受击转向
    /// </summary>
    RotateOnHit = 39,
    /// <summary>
    ///产生碰撞
    /// </summary>
    HasCollision = 40,
    Chat = 41,
    /// <summary>
    ///设置材质
    /// </summary>
    SetMaterial = 42,
    /// <summary>
    ///跟随父亲
    /// </summary>
    FollowParent = 43,
    /// <summary>
    ///Unit按照指定的路点进行移动
    /// </summary>
    UnitMove = 44,
    /// <summary>
    ///衰减速度
    /// </summary>
    DeclayVelocity = 45,
    /// <summary>
    ///预警框
    /// </summary>
    EarlyWarning = 46,
  }

  public enum ListTargetFrameType {
    CuboidListType = 0,
    FanListType = 1,
  }

  public enum ListTargetMode {
    MinDistance = 0,
    MinAngle = 1,
    Random = 2,
  }

  public enum RaceType {
    Enemy = 0,
    TeamMember = 1,
    Self = 2,
    Parent = 3,
    Child = 4,
  }

  public enum HitDefnitionFramType {
    /// <summary>
    ///长方体
    /// </summary>
    CuboidType = 0,
    /// <summary>
    ///圆柱体
    /// </summary>
    CylinderType = 1,
    /// <summary>
    ///圆环体
    /// </summary>
    RingType = 2,
    /// <summary>
    ///受击体
    /// </summary>
    SomatoType = 3,
    /// <summary>
    ///扇形体
    /// </summary>
    FanType = 4,
  }

  public enum HitResultType {
    /// <summary>
    /// 一般受击
    /// </summary>
    StandHit = 0,
    /// <summary>
    /// 击飞
    /// </summary>
    KnockOut = 1,
    /// <summary>
    /// 击退
    /// </summary>
    KnockBack = 2,
    /// <summary>
    /// 击倒
    /// </summary>
    KnockDown = 3,
    /// <summary>
    /// 浮空
    /// </summary>
    DiagUp = 4,
    /// <summary>
    /// 抓住
    /// </summary>
    HitResultHold = 5,
    /// <summary>
    /// 浮空追击
    /// </summary>
    AirHit = 6,
    /// <summary>
    /// 倒地追击
    /// </summary>
    DownHit = 7,
    /// <summary>
    /// 跌倒
    /// </summary>
    FallDown = 8,
  }

  public enum DamageType {
    Normal = 0,
    Special = 1,
    Mix = 2,
  }

  public enum WeaponType {
    /// <summary>
    /// 无
    /// </summary>
    WeaponNone = 0,
    /// <summary>
    /// 金属
    /// </summary>
    WeaponMetal = 1,
    /// <summary>
    /// 链状金属
    /// </summary>
    WeaponChain = 2,
    /// <summary>
    /// 石材
    /// </summary>
    WeaponStone = 3,
    /// <summary>
    /// 骨质
    /// </summary>
    WeaponBone = 4,
    /// <summary>
    /// 木质
    /// </summary>
    WeaponWood = 5,
    /// <summary>
    /// 肉身
    /// </summary>
    WeaponFlesh = 6,
    /// <summary>
    /// 流质肉体
    /// </summary>
    WeaponFluid = 7,
    /// <summary>
    /// 气体
    /// </summary>
    WeaponGas = 8,
    /// <summary>
    /// 剑
    /// </summary>
    WeaponSword = 9,
    /// <summary>
    /// 刀
    /// </summary>
    WeaponBroadsword = 10,
    /// <summary>
    /// 斧头
    /// </summary>
    WeaponAxe = 11,
    /// <summary>
    /// 匕首
    /// </summary>
    WeaponKnife = 12,
    /// <summary>
    /// 枪
    /// </summary>
    WeaponGun = 13,
  }

  #endregion

  #region Messages
  public sealed class Vector3 : pb::IMessage {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class AISlot : pb::IMessage {
    private static readonly pb::MessageParser<AISlot> _parser = new pb::MessageParser<AISlot>(() => new AISlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AISlot> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///-----------------------触发条件------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    /// <summary>
    ///触发几率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 3;
    private int skillID_;
    /// <summary>
    ///-----------------------触发结果------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "refreshTargetList" field.</summary>
    public const int RefreshTargetListFieldNumber = 4;
    private int refreshTargetList_;
    /// <summary>
    ///刷新目标列表,1=刷新目标列表，0=不刷新。默认值为1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTargetList {
      get { return refreshTargetList_; }
      set {
        refreshTargetList_ = value;
      }
    }

    /// <summary>Field number for the "switchActionID" field.</summary>
    public const int SwitchActionIDFieldNumber = 5;
    private string switchActionID_ = "";
    /// <summary>
    ///动作编号,所切换到动作的编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SwitchActionID {
      get { return switchActionID_; }
      set {
        switchActionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionCache" field.</summary>
    public const int ActionCacheFieldNumber = 6;
    private int actionCache_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCache {
      get { return actionCache_; }
      set {
        actionCache_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (SkillID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillID);
      }
      if (RefreshTargetList != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RefreshTargetList);
      }
      if (SwitchActionID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SwitchActionID);
      }
      if (ActionCache != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ActionCache);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (RefreshTargetList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTargetList);
      }
      if (SwitchActionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SwitchActionID);
      }
      if (ActionCache != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionCache);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            SkillID = input.ReadInt32();
            break;
          }
          case 32: {
            RefreshTargetList = input.ReadInt32();
            break;
          }
          case 42: {
            SwitchActionID = input.ReadString();
            break;
          }
          case 48: {
            ActionCache = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AIList : pb::IMessage {
    private static readonly pb::MessageParser<AIList> _parser = new pb::MessageParser<AIList>(() => new AIList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIList> Parser { get { return _parser; } }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 1;
    private int distance_;
    /// <summary>
    ///触发次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "distanceSqr" field.</summary>
    public const int DistanceSqrFieldNumber = 2;
    private int distanceSqr_;
    /// <summary>
    ///distance * distance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistanceSqr {
      get { return distanceSqr_; }
      set {
        distanceSqr_ = value;
      }
    }

    /// <summary>Field number for the "aISlots" field.</summary>
    public const int AISlotsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActData.AISlot> _repeated_aISlots_codec
        = pb::FieldCodec.ForMessage(26, global::ActData.AISlot.Parser);
    private readonly pbc::RepeatedField<global::ActData.AISlot> aISlots_ = new pbc::RepeatedField<global::ActData.AISlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AISlot> AISlots {
      get { return aISlots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Distance != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Distance);
      }
      if (DistanceSqr != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DistanceSqr);
      }
      aISlots_.WriteTo(output, _repeated_aISlots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (DistanceSqr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceSqr);
      }
      size += aISlots_.CalculateSize(_repeated_aISlots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Distance = input.ReadInt32();
            break;
          }
          case 16: {
            DistanceSqr = input.ReadInt32();
            break;
          }
          case 26: {
            aISlots_.AddEntriesFrom(input, _repeated_aISlots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AIStatusSwitch : pb::IMessage {
    private static readonly pb::MessageParser<AIStatusSwitch> _parser = new pb::MessageParser<AIStatusSwitch>(() => new AIStatusSwitch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIStatusSwitch> Parser { get { return _parser; } }

    /// <summary>Field number for the "switchStatusID" field.</summary>
    public const int SwitchStatusIDFieldNumber = 1;
    private int switchStatusID_;
    /// <summary>
    ///--------------------------------状态切换------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwitchStatusID {
      get { return switchStatusID_; }
      set {
        switchStatusID_ = value;
      }
    }

    /// <summary>Field number for the "actionSwitchNow" field.</summary>
    public const int ActionSwitchNowFieldNumber = 2;
    private int actionSwitchNow_;
    /// <summary>
    ///立即替换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionSwitchNow {
      get { return actionSwitchNow_; }
      set {
        actionSwitchNow_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 3;
    private int targetType_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 4;
    private int condition_;
    /// <summary>
    ///切换条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "targetExist" field.</summary>
    public const int TargetExistFieldNumber = 5;
    private bool targetExist_;
    /// <summary>
    ///--------------------------------是否存在-------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TargetExist {
      get { return targetExist_; }
      set {
        targetExist_ = value;
      }
    }

    /// <summary>Field number for the "targetActionID" field.</summary>
    public const int TargetActionIDFieldNumber = 6;
    private string targetActionID_ = "";
    /// <summary>
    ///--------------------------------监测动作-------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetActionID {
      get { return targetActionID_; }
      set {
        targetActionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetActionCount" field.</summary>
    public const int TargetActionCountFieldNumber = 7;
    private int targetActionCount_;
    /// <summary>
    ///执行次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetActionCount {
      get { return targetActionCount_; }
      set {
        targetActionCount_ = value;
      }
    }

    /// <summary>Field number for the "targetVaribleName" field.</summary>
    public const int TargetVaribleNameFieldNumber = 8;
    private int targetVaribleName_;
    /// <summary>
    ///变量名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetVaribleName {
      get { return targetVaribleName_; }
      set {
        targetVaribleName_ = value;
      }
    }

    /// <summary>Field number for the "targetVaribleCompare" field.</summary>
    public const int TargetVaribleCompareFieldNumber = 9;
    private int targetVaribleCompare_;
    /// <summary>
    ///变量比较条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetVaribleCompare {
      get { return targetVaribleCompare_; }
      set {
        targetVaribleCompare_ = value;
      }
    }

    /// <summary>Field number for the "targetVaribleValue" field.</summary>
    public const int TargetVaribleValueFieldNumber = 10;
    private int targetVaribleValue_;
    /// <summary>
    ///变量比较数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetVaribleValue {
      get { return targetVaribleValue_; }
      set {
        targetVaribleValue_ = value;
      }
    }

    /// <summary>Field number for the "targetDistanceMin" field.</summary>
    public const int TargetDistanceMinFieldNumber = 11;
    private int targetDistanceMin_;
    /// <summary>
    ///--------------------------------监控距离---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetDistanceMin {
      get { return targetDistanceMin_; }
      set {
        targetDistanceMin_ = value;
      }
    }

    /// <summary>Field number for the "targetDistanceMax" field.</summary>
    public const int TargetDistanceMaxFieldNumber = 12;
    private int targetDistanceMax_;
    /// <summary>
    ///监控距离最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetDistanceMax {
      get { return targetDistanceMax_; }
      set {
        targetDistanceMax_ = value;
      }
    }

    /// <summary>Field number for the "targetDistance" field.</summary>
    public const int TargetDistanceFieldNumber = 13;
    private int targetDistance_;
    /// <summary>
    ///=targetDistanceMax
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetDistance {
      get { return targetDistance_; }
      set {
        targetDistance_ = value;
      }
    }

    /// <summary>Field number for the "targetSkill" field.</summary>
    public const int TargetSkillFieldNumber = 14;
    private int targetSkill_;
    /// <summary>
    ///--------------------------------呼叫技能---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetSkill {
      get { return targetSkill_; }
      set {
        targetSkill_ = value;
      }
    }

    /// <summary>Field number for the "selfActionID" field.</summary>
    public const int SelfActionIDFieldNumber = 15;
    private string selfActionID_ = "";
    /// <summary>
    ///--------------------------------监测动作---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelfActionID {
      get { return selfActionID_; }
      set {
        selfActionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selfActionCount" field.</summary>
    public const int SelfActionCountFieldNumber = 16;
    private int selfActionCount_;
    /// <summary>
    ///执行次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfActionCount {
      get { return selfActionCount_; }
      set {
        selfActionCount_ = value;
      }
    }

    /// <summary>Field number for the "selfVaribleName" field.</summary>
    public const int SelfVaribleNameFieldNumber = 17;
    private int selfVaribleName_;
    /// <summary>
    ///变量名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfVaribleName {
      get { return selfVaribleName_; }
      set {
        selfVaribleName_ = value;
      }
    }

    /// <summary>Field number for the "selfVaribleCompare" field.</summary>
    public const int SelfVaribleCompareFieldNumber = 18;
    private int selfVaribleCompare_;
    /// <summary>
    ///变量比较条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfVaribleCompare {
      get { return selfVaribleCompare_; }
      set {
        selfVaribleCompare_ = value;
      }
    }

    /// <summary>Field number for the "selfVaribleValue" field.</summary>
    public const int SelfVaribleValueFieldNumber = 19;
    private int selfVaribleValue_;
    /// <summary>
    ///变量比较数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfVaribleValue {
      get { return selfVaribleValue_; }
      set {
        selfVaribleValue_ = value;
      }
    }

    /// <summary>Field number for the "selfTime" field.</summary>
    public const int SelfTimeFieldNumber = 20;
    private int selfTime_;
    /// <summary>
    ///--------------------------------到达时间---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfTime {
      get { return selfTime_; }
      set {
        selfTime_ = value;
      }
    }

    /// <summary>Field number for the "selfSkill" field.</summary>
    public const int SelfSkillFieldNumber = 21;
    private int selfSkill_;
    /// <summary>
    ///--------------------------------呼叫技能---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfSkill {
      get { return selfSkill_; }
      set {
        selfSkill_ = value;
      }
    }

    /// <summary>Field number for the "actionCache" field.</summary>
    public const int ActionCacheFieldNumber = 22;
    private int actionCache_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCache {
      get { return actionCache_; }
      set {
        actionCache_ = value;
      }
    }

    /// <summary>Field number for the "targetActionCache" field.</summary>
    public const int TargetActionCacheFieldNumber = 23;
    private int targetActionCache_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetActionCache {
      get { return targetActionCache_; }
      set {
        targetActionCache_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SwitchStatusID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SwitchStatusID);
      }
      if (ActionSwitchNow != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActionSwitchNow);
      }
      if (TargetType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetType);
      }
      if (Condition != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Condition);
      }
      if (TargetExist != false) {
        output.WriteRawTag(40);
        output.WriteBool(TargetExist);
      }
      if (TargetActionID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TargetActionID);
      }
      if (TargetActionCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TargetActionCount);
      }
      if (TargetVaribleName != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TargetVaribleName);
      }
      if (TargetVaribleCompare != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TargetVaribleCompare);
      }
      if (TargetVaribleValue != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TargetVaribleValue);
      }
      if (TargetDistanceMin != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TargetDistanceMin);
      }
      if (TargetDistanceMax != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TargetDistanceMax);
      }
      if (TargetDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TargetDistance);
      }
      if (TargetSkill != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(TargetSkill);
      }
      if (SelfActionID.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SelfActionID);
      }
      if (SelfActionCount != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(SelfActionCount);
      }
      if (SelfVaribleName != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SelfVaribleName);
      }
      if (SelfVaribleCompare != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SelfVaribleCompare);
      }
      if (SelfVaribleValue != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SelfVaribleValue);
      }
      if (SelfTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SelfTime);
      }
      if (SelfSkill != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SelfSkill);
      }
      if (ActionCache != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ActionCache);
      }
      if (TargetActionCache != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TargetActionCache);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SwitchStatusID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SwitchStatusID);
      }
      if (ActionSwitchNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionSwitchNow);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (Condition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Condition);
      }
      if (TargetExist != false) {
        size += 1 + 1;
      }
      if (TargetActionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetActionID);
      }
      if (TargetActionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetActionCount);
      }
      if (TargetVaribleName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetVaribleName);
      }
      if (TargetVaribleCompare != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetVaribleCompare);
      }
      if (TargetVaribleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetVaribleValue);
      }
      if (TargetDistanceMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetDistanceMin);
      }
      if (TargetDistanceMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetDistanceMax);
      }
      if (TargetDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetDistance);
      }
      if (TargetSkill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetSkill);
      }
      if (SelfActionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelfActionID);
      }
      if (SelfActionCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfActionCount);
      }
      if (SelfVaribleName != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfVaribleName);
      }
      if (SelfVaribleCompare != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfVaribleCompare);
      }
      if (SelfVaribleValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfVaribleValue);
      }
      if (SelfTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfTime);
      }
      if (SelfSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfSkill);
      }
      if (ActionCache != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionCache);
      }
      if (TargetActionCache != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetActionCache);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SwitchStatusID = input.ReadInt32();
            break;
          }
          case 16: {
            ActionSwitchNow = input.ReadInt32();
            break;
          }
          case 24: {
            TargetType = input.ReadInt32();
            break;
          }
          case 32: {
            Condition = input.ReadInt32();
            break;
          }
          case 40: {
            TargetExist = input.ReadBool();
            break;
          }
          case 50: {
            TargetActionID = input.ReadString();
            break;
          }
          case 56: {
            TargetActionCount = input.ReadInt32();
            break;
          }
          case 64: {
            TargetVaribleName = input.ReadInt32();
            break;
          }
          case 72: {
            TargetVaribleCompare = input.ReadInt32();
            break;
          }
          case 80: {
            TargetVaribleValue = input.ReadInt32();
            break;
          }
          case 88: {
            TargetDistanceMin = input.ReadInt32();
            break;
          }
          case 96: {
            TargetDistanceMax = input.ReadInt32();
            break;
          }
          case 104: {
            TargetDistance = input.ReadInt32();
            break;
          }
          case 112: {
            TargetSkill = input.ReadInt32();
            break;
          }
          case 122: {
            SelfActionID = input.ReadString();
            break;
          }
          case 128: {
            SelfActionCount = input.ReadInt32();
            break;
          }
          case 136: {
            SelfVaribleName = input.ReadInt32();
            break;
          }
          case 144: {
            SelfVaribleCompare = input.ReadInt32();
            break;
          }
          case 152: {
            SelfVaribleValue = input.ReadInt32();
            break;
          }
          case 160: {
            SelfTime = input.ReadInt32();
            break;
          }
          case 168: {
            SelfSkill = input.ReadInt32();
            break;
          }
          case 176: {
            ActionCache = input.ReadInt32();
            break;
          }
          case 184: {
            TargetActionCache = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AIActionCD : pb::IMessage {
    private static readonly pb::MessageParser<AIActionCD> _parser = new pb::MessageParser<AIActionCD>(() => new AIActionCD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIActionCD> Parser { get { return _parser; } }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private string action_ = "";
    /// <summary>
    ///动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 2;
    private int cd_;
    /// <summary>
    ///CD值(毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    /// <summary>Field number for the "actionCache" field.</summary>
    public const int ActionCacheFieldNumber = 3;
    private int actionCache_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCache {
      get { return actionCache_; }
      set {
        actionCache_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Action);
      }
      if (Cd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cd);
      }
      if (ActionCache != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionCache);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Cd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cd);
      }
      if (ActionCache != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionCache);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Action = input.ReadString();
            break;
          }
          case 16: {
            Cd = input.ReadInt32();
            break;
          }
          case 24: {
            ActionCache = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AIStatus : pb::IMessage {
    private static readonly pb::MessageParser<AIStatus> _parser = new pb::MessageParser<AIStatus>(() => new AIStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///状态名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 2;
    private int targetType_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "AILists" field.</summary>
    public const int AIListsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActData.AIList> _repeated_aILists_codec
        = pb::FieldCodec.ForMessage(26, global::ActData.AIList.Parser);
    private readonly pbc::RepeatedField<global::ActData.AIList> aILists_ = new pbc::RepeatedField<global::ActData.AIList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AIList> AILists {
      get { return aILists_; }
    }

    /// <summary>Field number for the "AIStatusSwitchList" field.</summary>
    public const int AIStatusSwitchListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ActData.AIStatusSwitch> _repeated_aIStatusSwitchList_codec
        = pb::FieldCodec.ForMessage(34, global::ActData.AIStatusSwitch.Parser);
    private readonly pbc::RepeatedField<global::ActData.AIStatusSwitch> aIStatusSwitchList_ = new pbc::RepeatedField<global::ActData.AIStatusSwitch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AIStatusSwitch> AIStatusSwitchList {
      get { return aIStatusSwitchList_; }
    }

    /// <summary>Field number for the "AIActionCDList" field.</summary>
    public const int AIActionCDListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ActData.AIActionCD> _repeated_aIActionCDList_codec
        = pb::FieldCodec.ForMessage(42, global::ActData.AIActionCD.Parser);
    private readonly pbc::RepeatedField<global::ActData.AIActionCD> aIActionCDList_ = new pbc::RepeatedField<global::ActData.AIActionCD>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AIActionCD> AIActionCDList {
      get { return aIActionCDList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TargetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetType);
      }
      aILists_.WriteTo(output, _repeated_aILists_codec);
      aIStatusSwitchList_.WriteTo(output, _repeated_aIStatusSwitchList_codec);
      aIActionCDList_.WriteTo(output, _repeated_aIActionCDList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      size += aILists_.CalculateSize(_repeated_aILists_codec);
      size += aIStatusSwitchList_.CalculateSize(_repeated_aIStatusSwitchList_codec);
      size += aIActionCDList_.CalculateSize(_repeated_aIActionCDList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TargetType = input.ReadInt32();
            break;
          }
          case 26: {
            aILists_.AddEntriesFrom(input, _repeated_aILists_codec);
            break;
          }
          case 34: {
            aIStatusSwitchList_.AddEntriesFrom(input, _repeated_aIStatusSwitchList_codec);
            break;
          }
          case 42: {
            aIActionCDList_.AddEntriesFrom(input, _repeated_aIActionCDList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AIGroup : pb::IMessage {
    private static readonly pb::MessageParser<AIGroup> _parser = new pb::MessageParser<AIGroup>(() => new AIGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AIGroup> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AIStatusList" field.</summary>
    public const int AIStatusListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActData.AIStatus> _repeated_aIStatusList_codec
        = pb::FieldCodec.ForMessage(18, global::ActData.AIStatus.Parser);
    private readonly pbc::RepeatedField<global::ActData.AIStatus> aIStatusList_ = new pbc::RepeatedField<global::ActData.AIStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AIStatus> AIStatusList {
      get { return aIStatusList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      aIStatusList_.WriteTo(output, _repeated_aIStatusList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += aIStatusList_.CalculateSize(_repeated_aIStatusList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            aIStatusList_.AddEntriesFrom(input, _repeated_aIStatusList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AISetting : pb::IMessage {
    private static readonly pb::MessageParser<AISetting> _parser = new pb::MessageParser<AISetting>(() => new AISetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AISetting> Parser { get { return _parser; } }

    /// <summary>Field number for the "easyGroup" field.</summary>
    public const int EasyGroupFieldNumber = 1;
    private global::ActData.AIGroup easyGroup_;
    /// <summary>
    ///简单
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AIGroup EasyGroup {
      get { return easyGroup_; }
      set {
        easyGroup_ = value;
      }
    }

    /// <summary>Field number for the "normalGroup" field.</summary>
    public const int NormalGroupFieldNumber = 2;
    private global::ActData.AIGroup normalGroup_;
    /// <summary>
    ///普通
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AIGroup NormalGroup {
      get { return normalGroup_; }
      set {
        normalGroup_ = value;
      }
    }

    /// <summary>Field number for the "hardGroup" field.</summary>
    public const int HardGroupFieldNumber = 3;
    private global::ActData.AIGroup hardGroup_;
    /// <summary>
    ///困难
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AIGroup HardGroup {
      get { return hardGroup_; }
      set {
        hardGroup_ = value;
      }
    }

    /// <summary>Field number for the "nightmareGroup" field.</summary>
    public const int NightmareGroupFieldNumber = 4;
    private global::ActData.AIGroup nightmareGroup_;
    /// <summary>
    ///噩梦
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AIGroup NightmareGroup {
      get { return nightmareGroup_; }
      set {
        nightmareGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (easyGroup_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EasyGroup);
      }
      if (normalGroup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NormalGroup);
      }
      if (hardGroup_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HardGroup);
      }
      if (nightmareGroup_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NightmareGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (easyGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EasyGroup);
      }
      if (normalGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalGroup);
      }
      if (hardGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HardGroup);
      }
      if (nightmareGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NightmareGroup);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (easyGroup_ == null) {
              easyGroup_ = new global::ActData.AIGroup();
            }
            input.ReadMessage(easyGroup_);
            break;
          }
          case 18: {
            if (normalGroup_ == null) {
              normalGroup_ = new global::ActData.AIGroup();
            }
            input.ReadMessage(normalGroup_);
            break;
          }
          case 26: {
            if (hardGroup_ == null) {
              hardGroup_ = new global::ActData.AIGroup();
            }
            input.ReadMessage(hardGroup_);
            break;
          }
          case 34: {
            if (nightmareGroup_ == null) {
              nightmareGroup_ = new global::ActData.AIGroup();
            }
            input.ReadMessage(nightmareGroup_);
            break;
          }
        }
      }
    }

  }

  public sealed class ActionGroup : pb::IMessage {
    private static readonly pb::MessageParser<ActionGroup> _parser = new pb::MessageParser<ActionGroup>(() => new ActionGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionGroup> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionList" field.</summary>
    public const int ActionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActData.Action> _repeated_actionList_codec
        = pb::FieldCodec.ForMessage(10, global::ActData.Action.Parser);
    private readonly pbc::RepeatedField<global::ActData.Action> actionList_ = new pbc::RepeatedField<global::ActData.Action>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.Action> ActionList {
      get { return actionList_; }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 2;
    private int race_;
    /// <summary>
    ///角色的ID号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "groupNum" field.</summary>
    public const int GroupNumFieldNumber = 3;
    private int groupNum_;
    /// <summary>
    ///动作组编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupNum {
      get { return groupNum_; }
      set {
        groupNum_ = value;
      }
    }

    /// <summary>Field number for the "materialType" field.</summary>
    public const int MaterialTypeFieldNumber = 4;
    private global::ActData.MaterialType materialType_ = 0;
    /// <summary>
    ///Unit的材质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.MaterialType MaterialType {
      get { return materialType_; }
      set {
        materialType_ = value;
      }
    }

    /// <summary>Field number for the "materialType_Int" field.</summary>
    public const int MaterialTypeIntFieldNumber = 5;
    private int materialTypeInt_;
    /// <summary>
    ///(int)materialType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaterialTypeInt {
      get { return materialTypeInt_; }
      set {
        materialTypeInt_ = value;
      }
    }

    /// <summary>Field number for the "rotateOnHit" field.</summary>
    public const int RotateOnHitFieldNumber = 6;
    private bool rotateOnHit_;
    /// <summary>
    ///(int)受击后转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotateOnHit {
      get { return rotateOnHit_; }
      set {
        rotateOnHit_ = value;
      }
    }

    /// <summary>Field number for the "checkDeath" field.</summary>
    public const int CheckDeathFieldNumber = 7;
    private bool checkDeath_;
    /// <summary>
    ///侦测死亡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckDeath {
      get { return checkDeath_; }
      set {
        checkDeath_ = value;
      }
    }

    /// <summary>Field number for the "reflectUnit" field.</summary>
    public const int ReflectUnitFieldNumber = 8;
    private int reflectUnit_;
    /// <summary>
    ///映射单位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReflectUnit {
      get { return reflectUnit_; }
      set {
        reflectUnit_ = value;
      }
    }

    /// <summary>Field number for the "reflectGroupID" field.</summary>
    public const int ReflectGroupIDFieldNumber = 9;
    private int reflectGroupID_;
    /// <summary>
    ///映射动作组ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReflectGroupID {
      get { return reflectGroupID_; }
      set {
        reflectGroupID_ = value;
      }
    }

    /// <summary>Field number for the "hasCollision" field.</summary>
    public const int HasCollisionFieldNumber = 10;
    private bool hasCollision_;
    /// <summary>
    ///是否生成碰撞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollision {
      get { return hasCollision_; }
      set {
        hasCollision_ = value;
      }
    }

    /// <summary>Field number for the "defaultActionLevel" field.</summary>
    public const int DefaultActionLevelFieldNumber = 11;
    private int defaultActionLevel_;
    /// <summary>
    ///默认动作等级,单位的默认动作等级，用来进行霸体判断，每个动作可以重载动作等级。默认值为10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultActionLevel {
      get { return defaultActionLevel_; }
      set {
        defaultActionLevel_ = value;
      }
    }

    /// <summary>Field number for the "AISetting" field.</summary>
    public const int AISettingFieldNumber = 12;
    private global::ActData.AISetting aISetting_;
    /// <summary>
    ///AI设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AISetting AISetting {
      get { return aISetting_; }
      set {
        aISetting_ = value;
      }
    }

    /// <summary>Field number for the "startupAction" field.</summary>
    public const int StartupActionFieldNumber = 13;
    private string startupAction_ = "";
    /// <summary>
    ///起始动作(城镇),该单位(在城镇里面)创建出来时候的默认动作，默认值为N0000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartupAction {
      get { return startupAction_; }
      set {
        startupAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startupActionInstance" field.</summary>
    public const int StartupActionInstanceFieldNumber = 14;
    private string startupActionInstance_ = "";
    /// <summary>
    ///起始动作(副本),该单位(在副本里面)创建出来时候的默认动作，默认值为N0000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartupActionInstance {
      get { return startupActionInstance_; }
      set {
        startupActionInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canCapture" field.</summary>
    public const int CanCaptureFieldNumber = 15;
    private bool canCapture_;
    /// <summary>
    ///受击结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanCapture {
      get { return canCapture_; }
      set {
        canCapture_ = value;
      }
    }

    /// <summary>Field number for the "attackModify" field.</summary>
    public const int AttackModifyFieldNumber = 16;
    private int attackModify_;
    /// <summary>
    ///重力加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackModify {
      get { return attackModify_; }
      set {
        attackModify_ = value;
      }
    }

    /// <summary>Field number for the "modifyStartTime" field.</summary>
    public const int ModifyStartTimeFieldNumber = 17;
    private int modifyStartTime_;
    /// <summary>
    ///修正开始百分比,修正开始百分比，数值为[0-100-200]，[0-100]期间是处于动画时间段里面的百分比，[100-200]期间是出于POSE时间段里面的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifyStartTime {
      get { return modifyStartTime_; }
      set {
        modifyStartTime_ = value;
      }
    }

    /// <summary>Field number for the "modifyEndTime" field.</summary>
    public const int ModifyEndTimeFieldNumber = 18;
    private int modifyEndTime_;
    /// <summary>
    ///修正结束百分比,修正结束百分比，数值为[0-100-200]，[0-100]期间是处于动画时间段里面的百分比，[100-200]期间是出于POSE时间段里面的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifyEndTime {
      get { return modifyEndTime_; }
      set {
        modifyEndTime_ = value;
      }
    }

    /// <summary>Field number for the "gravtity" field.</summary>
    public const int GravtityFieldNumber = 19;
    private int gravtity_;
    /// <summary>
    ///重力加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gravtity {
      get { return gravtity_; }
      set {
        gravtity_ = value;
      }
    }

    /// <summary>Field number for the "attackedGravtity" field.</summary>
    public const int AttackedGravtityFieldNumber = 20;
    private int attackedGravtity_;
    /// <summary>
    ///被攻击时的重力加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackedGravtity {
      get { return attackedGravtity_; }
      set {
        attackedGravtity_ = value;
      }
    }

    /// <summary>Field number for the "lashModifier" field.</summary>
    public const int LashModifierFieldNumber = 21;
    private global::ActData.Vector3 lashModifier_;
    /// <summary>
    ///冲击减免,当怪物受到攻击时，冲击速度减免量，默认为不减免(1 1 1)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 LashModifier {
      get { return lashModifier_; }
      set {
        lashModifier_ = value;
      }
    }

    /// <summary>Field number for the "holdOffset" field.</summary>
    public const int HoldOffsetFieldNumber = 22;
    private global::ActData.Vector3 holdOffset_;
    /// <summary>
    ///被抓偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 HoldOffset {
      get { return holdOffset_; }
      set {
        holdOffset_ = value;
      }
    }

    /// <summary>Field number for the "boundingLength" field.</summary>
    public const int BoundingLengthFieldNumber = 23;
    private int boundingLength_;
    /// <summary>
    ///包围盒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingLength {
      get { return boundingLength_; }
      set {
        boundingLength_ = value;
      }
    }

    /// <summary>Field number for the "boundingWidth" field.</summary>
    public const int BoundingWidthFieldNumber = 24;
    private int boundingWidth_;
    /// <summary>
    ///包围盒宽度,单位的包围盒宽度，包围盒用来检测受击范围等。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingWidth {
      get { return boundingWidth_; }
      set {
        boundingWidth_ = value;
      }
    }

    /// <summary>Field number for the "boundingHeight" field.</summary>
    public const int BoundingHeightFieldNumber = 25;
    private int boundingHeight_;
    /// <summary>
    ///包围盒高度,单位的包围盒宽度，包围盒用来检测受击范围等。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingHeight {
      get { return boundingHeight_; }
      set {
        boundingHeight_ = value;
      }
    }

    /// <summary>Field number for the "standStandHit" field.</summary>
    public const int StandStandHitFieldNumber = 26;
    private string standStandHit_ = "";
    /// <summary>
    ///做:受击结果:站立
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandStandHit {
      get { return standStandHit_; }
      set {
        standStandHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standKnockOut" field.</summary>
    public const int StandKnockOutFieldNumber = 27;
    private string standKnockOut_ = "";
    /// <summary>
    ///击飞,受到击飞攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandKnockOut {
      get { return standKnockOut_; }
      set {
        standKnockOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standKnockBack" field.</summary>
    public const int StandKnockBackFieldNumber = 28;
    private string standKnockBack_ = "";
    /// <summary>
    ///击退,受到击退攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandKnockBack {
      get { return standKnockBack_; }
      set {
        standKnockBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standDiagUp" field.</summary>
    public const int StandDiagUpFieldNumber = 29;
    private string standDiagUp_ = "";
    /// <summary>
    ///浮空,受到浮空攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandDiagUp {
      get { return standDiagUp_; }
      set {
        standDiagUp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standKnockDown" field.</summary>
    public const int StandKnockDownFieldNumber = 30;
    private string standKnockDown_ = "";
    /// <summary>
    ///击倒,受到击倒攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandKnockDown {
      get { return standKnockDown_; }
      set {
        standKnockDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standHold" field.</summary>
    public const int StandHoldFieldNumber = 31;
    private string standHold_ = "";
    /// <summary>
    ///抓住,受到抓住攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandHold {
      get { return standHold_; }
      set {
        standHold_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standAirHit" field.</summary>
    public const int StandAirHitFieldNumber = 32;
    private string standAirHit_ = "";
    /// <summary>
    ///浮空追击,受到浮空追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandAirHit {
      get { return standAirHit_; }
      set {
        standAirHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standDownHit" field.</summary>
    public const int StandDownHitFieldNumber = 33;
    private string standDownHit_ = "";
    /// <summary>
    ///倒地追击,受到倒地追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandDownHit {
      get { return standDownHit_; }
      set {
        standDownHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standFallDown" field.</summary>
    public const int StandFallDownFieldNumber = 34;
    private string standFallDown_ = "";
    /// <summary>
    ///跌倒,受到倒地攻击时的动作ID号，此为默认动作号码H0031，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandFallDown {
      get { return standFallDown_; }
      set {
        standFallDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airStandHit" field.</summary>
    public const int AirStandHitFieldNumber = 35;
    private string airStandHit_ = "";
    /// <summary>
    ///做:受击结果:空中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirStandHit {
      get { return airStandHit_; }
      set {
        airStandHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airKnockOut" field.</summary>
    public const int AirKnockOutFieldNumber = 36;
    private string airKnockOut_ = "";
    /// <summary>
    ///击飞,受到击飞攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirKnockOut {
      get { return airKnockOut_; }
      set {
        airKnockOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airKnockBack" field.</summary>
    public const int AirKnockBackFieldNumber = 37;
    private string airKnockBack_ = "";
    /// <summary>
    ///击退,受到击退攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirKnockBack {
      get { return airKnockBack_; }
      set {
        airKnockBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airDiagUp" field.</summary>
    public const int AirDiagUpFieldNumber = 38;
    private string airDiagUp_ = "";
    /// <summary>
    ///浮空,受到浮空攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirDiagUp {
      get { return airDiagUp_; }
      set {
        airDiagUp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airKnockDown" field.</summary>
    public const int AirKnockDownFieldNumber = 39;
    private string airKnockDown_ = "";
    /// <summary>
    ///击倒,受到击倒攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirKnockDown {
      get { return airKnockDown_; }
      set {
        airKnockDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airHold" field.</summary>
    public const int AirHoldFieldNumber = 40;
    private string airHold_ = "";
    /// <summary>
    ///抓住,受到抓住攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirHold {
      get { return airHold_; }
      set {
        airHold_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airAirHit" field.</summary>
    public const int AirAirHitFieldNumber = 41;
    private string airAirHit_ = "";
    /// <summary>
    ///浮空追击,受到浮空追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirAirHit {
      get { return airAirHit_; }
      set {
        airAirHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airDownHit" field.</summary>
    public const int AirDownHitFieldNumber = 42;
    private string airDownHit_ = "";
    /// <summary>
    ///倒地追击,受到倒地追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirDownHit {
      get { return airDownHit_; }
      set {
        airDownHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "airFallDown" field.</summary>
    public const int AirFallDownFieldNumber = 43;
    private string airFallDown_ = "";
    /// <summary>
    ///跌倒,受到倒地攻击时的动作ID号，此为默认动作号码H0031，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AirFallDown {
      get { return airFallDown_; }
      set {
        airFallDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorStandHit" field.</summary>
    public const int FloorStandHitFieldNumber = 44;
    private string floorStandHit_ = "";
    /// <summary>
    ///做:受击结果:地面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorStandHit {
      get { return floorStandHit_; }
      set {
        floorStandHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorKnockOut" field.</summary>
    public const int FloorKnockOutFieldNumber = 45;
    private string floorKnockOut_ = "";
    /// <summary>
    ///击飞,受到击飞攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorKnockOut {
      get { return floorKnockOut_; }
      set {
        floorKnockOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorKnockBack" field.</summary>
    public const int FloorKnockBackFieldNumber = 46;
    private string floorKnockBack_ = "";
    /// <summary>
    ///击退,受到击退攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorKnockBack {
      get { return floorKnockBack_; }
      set {
        floorKnockBack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorDiagUp" field.</summary>
    public const int FloorDiagUpFieldNumber = 47;
    private string floorDiagUp_ = "";
    /// <summary>
    ///浮空,受到浮空攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorDiagUp {
      get { return floorDiagUp_; }
      set {
        floorDiagUp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorKnockDown" field.</summary>
    public const int FloorKnockDownFieldNumber = 48;
    private string floorKnockDown_ = "";
    /// <summary>
    ///击倒,受到击倒攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorKnockDown {
      get { return floorKnockDown_; }
      set {
        floorKnockDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorHold" field.</summary>
    public const int FloorHoldFieldNumber = 49;
    private string floorHold_ = "";
    /// <summary>
    ///抓住,受到抓住攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorHold {
      get { return floorHold_; }
      set {
        floorHold_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorAirHit" field.</summary>
    public const int FloorAirHitFieldNumber = 50;
    private string floorAirHit_ = "";
    /// <summary>
    ///浮空追击,受到浮空追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorAirHit {
      get { return floorAirHit_; }
      set {
        floorAirHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorDownHit" field.</summary>
    public const int FloorDownHitFieldNumber = 51;
    private string floorDownHit_ = "";
    /// <summary>
    ///倒地追击,受到倒地追击攻击时的动作ID号，此为默认动作号码，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorDownHit {
      get { return floorDownHit_; }
      set {
        floorDownHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "floorFallDown" field.</summary>
    public const int FloorFallDownFieldNumber = 52;
    private string floorFallDown_ = "";
    /// <summary>
    ///跌倒,受到倒地攻击时的动作ID号，此为默认动作号码H0031，每个Action自己可以覆盖此方法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FloorFallDown {
      get { return floorFallDown_; }
      set {
        floorFallDown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idlePabodyEffect" field.</summary>
    public const int IdlePabodyEffectFieldNumber = 53;
    private string idlePabodyEffect_ = "";
    /// <summary>
    ///做:霸体特效:待机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdlePabodyEffect {
      get { return idlePabodyEffect_; }
      set {
        idlePabodyEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idlePabodyEffectOffset" field.</summary>
    public const int IdlePabodyEffectOffsetFieldNumber = 54;
    private global::ActData.Vector3 idlePabodyEffectOffset_;
    /// <summary>
    ///待机霸体特效偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 IdlePabodyEffectOffset {
      get { return idlePabodyEffectOffset_; }
      set {
        idlePabodyEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "movePabodyEffect" field.</summary>
    public const int MovePabodyEffectFieldNumber = 55;
    private string movePabodyEffect_ = "";
    /// <summary>
    ///做:霸体特效:移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MovePabodyEffect {
      get { return movePabodyEffect_; }
      set {
        movePabodyEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "movePabodyEffectOffset" field.</summary>
    public const int MovePabodyEffectOffsetFieldNumber = 56;
    private global::ActData.Vector3 movePabodyEffectOffset_;
    /// <summary>
    ///霸体受击特效偏移量,怪物是霸体的时候，播放特效的偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 MovePabodyEffectOffset {
      get { return movePabodyEffectOffset_; }
      set {
        movePabodyEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "attackPabodyEffect" field.</summary>
    public const int AttackPabodyEffectFieldNumber = 57;
    private string attackPabodyEffect_ = "";
    /// <summary>
    ///做:霸体特效:攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttackPabodyEffect {
      get { return attackPabodyEffect_; }
      set {
        attackPabodyEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attackPabodyEffectOffset" field.</summary>
    public const int AttackPabodyEffectOffsetFieldNumber = 58;
    private global::ActData.Vector3 attackPabodyEffectOffset_;
    /// <summary>
    ///霸体受击特效偏移量,怪物是霸体的时候，播放特效的偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 AttackPabodyEffectOffset {
      get { return attackPabodyEffectOffset_; }
      set {
        attackPabodyEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "hitPabodyEffect" field.</summary>
    public const int HitPabodyEffectFieldNumber = 59;
    private string hitPabodyEffect_ = "";
    /// <summary>
    ///做:霸体特效:受伤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitPabodyEffect {
      get { return hitPabodyEffect_; }
      set {
        hitPabodyEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hitPabodyEffectOffset" field.</summary>
    public const int HitPabodyEffectOffsetFieldNumber = 60;
    private global::ActData.Vector3 hitPabodyEffectOffset_;
    /// <summary>
    ///受伤霸体特效偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 HitPabodyEffectOffset {
      get { return hitPabodyEffectOffset_; }
      set {
        hitPabodyEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "defensePabodyEffect" field.</summary>
    public const int DefensePabodyEffectFieldNumber = 61;
    private string defensePabodyEffect_ = "";
    /// <summary>
    ///做:霸体特效:防御
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefensePabodyEffect {
      get { return defensePabodyEffect_; }
      set {
        defensePabodyEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defensePabodyEffectOffset" field.</summary>
    public const int DefensePabodyEffectOffsetFieldNumber = 62;
    private global::ActData.Vector3 defensePabodyEffectOffset_;
    /// <summary>
    ///防御霸体特效偏移量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 DefensePabodyEffectOffset {
      get { return defensePabodyEffectOffset_; }
      set {
        defensePabodyEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "standDeath" field.</summary>
    public const int StandDeathFieldNumber = 63;
    private string standDeath_ = "";
    /// <summary>
    ///死亡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandDeath {
      get { return standDeath_; }
      set {
        standDeath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downDeath" field.</summary>
    public const int DownDeathFieldNumber = 64;
    private string downDeath_ = "";
    /// <summary>
    ///倒地死亡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DownDeath {
      get { return downDeath_; }
      set {
        downDeath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relativeEndureEffectAlpha" field.</summary>
    public const int RelativeEndureEffectAlphaFieldNumber = 65;
    private int relativeEndureEffectAlpha_;
    /// <summary>
    ///相对霸体特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeEndureEffectAlpha {
      get { return relativeEndureEffectAlpha_; }
      set {
        relativeEndureEffectAlpha_ = value;
      }
    }

    /// <summary>Field number for the "relativeEndureEffectRed" field.</summary>
    public const int RelativeEndureEffectRedFieldNumber = 66;
    private int relativeEndureEffectRed_;
    /// <summary>
    ///红色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeEndureEffectRed {
      get { return relativeEndureEffectRed_; }
      set {
        relativeEndureEffectRed_ = value;
      }
    }

    /// <summary>Field number for the "relativeEndureEffectGreen" field.</summary>
    public const int RelativeEndureEffectGreenFieldNumber = 67;
    private int relativeEndureEffectGreen_;
    /// <summary>
    ///绿色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeEndureEffectGreen {
      get { return relativeEndureEffectGreen_; }
      set {
        relativeEndureEffectGreen_ = value;
      }
    }

    /// <summary>Field number for the "relativeEndureEffectBule" field.</summary>
    public const int RelativeEndureEffectBuleFieldNumber = 68;
    private int relativeEndureEffectBule_;
    /// <summary>
    ///蓝色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeEndureEffectBule {
      get { return relativeEndureEffectBule_; }
      set {
        relativeEndureEffectBule_ = value;
      }
    }

    /// <summary>Field number for the "relativeEndureEffectOverTime" field.</summary>
    public const int RelativeEndureEffectOverTimeFieldNumber = 69;
    private int relativeEndureEffectOverTime_;
    /// <summary>
    ///过度时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeEndureEffectOverTime {
      get { return relativeEndureEffectOverTime_; }
      set {
        relativeEndureEffectOverTime_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 70;
    private string desc_ = "";
    /// <summary>
    ///说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spasticityCD" field.</summary>
    public const int SpasticityCDFieldNumber = 71;
    private int spasticityCD_;
    /// <summary>
    ///僵直CD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpasticityCD {
      get { return spasticityCD_; }
      set {
        spasticityCD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      actionList_.WriteTo(output, _repeated_actionList_codec);
      if (Race != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Race);
      }
      if (GroupNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupNum);
      }
      if (MaterialType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MaterialType);
      }
      if (MaterialTypeInt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaterialTypeInt);
      }
      if (RotateOnHit != false) {
        output.WriteRawTag(48);
        output.WriteBool(RotateOnHit);
      }
      if (CheckDeath != false) {
        output.WriteRawTag(56);
        output.WriteBool(CheckDeath);
      }
      if (ReflectUnit != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReflectUnit);
      }
      if (ReflectGroupID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReflectGroupID);
      }
      if (HasCollision != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasCollision);
      }
      if (DefaultActionLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DefaultActionLevel);
      }
      if (aISetting_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AISetting);
      }
      if (StartupAction.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StartupAction);
      }
      if (StartupActionInstance.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(StartupActionInstance);
      }
      if (CanCapture != false) {
        output.WriteRawTag(120);
        output.WriteBool(CanCapture);
      }
      if (AttackModify != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AttackModify);
      }
      if (ModifyStartTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ModifyStartTime);
      }
      if (ModifyEndTime != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ModifyEndTime);
      }
      if (Gravtity != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Gravtity);
      }
      if (AttackedGravtity != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(AttackedGravtity);
      }
      if (lashModifier_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LashModifier);
      }
      if (holdOffset_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(HoldOffset);
      }
      if (BoundingLength != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(BoundingLength);
      }
      if (BoundingWidth != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BoundingWidth);
      }
      if (BoundingHeight != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(BoundingHeight);
      }
      if (StandStandHit.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(StandStandHit);
      }
      if (StandKnockOut.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(StandKnockOut);
      }
      if (StandKnockBack.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(StandKnockBack);
      }
      if (StandDiagUp.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(StandDiagUp);
      }
      if (StandKnockDown.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(StandKnockDown);
      }
      if (StandHold.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(StandHold);
      }
      if (StandAirHit.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(StandAirHit);
      }
      if (StandDownHit.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(StandDownHit);
      }
      if (StandFallDown.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StandFallDown);
      }
      if (AirStandHit.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(AirStandHit);
      }
      if (AirKnockOut.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(AirKnockOut);
      }
      if (AirKnockBack.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(AirKnockBack);
      }
      if (AirDiagUp.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(AirDiagUp);
      }
      if (AirKnockDown.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(AirKnockDown);
      }
      if (AirHold.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(AirHold);
      }
      if (AirAirHit.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(AirAirHit);
      }
      if (AirDownHit.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(AirDownHit);
      }
      if (AirFallDown.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(AirFallDown);
      }
      if (FloorStandHit.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(FloorStandHit);
      }
      if (FloorKnockOut.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(FloorKnockOut);
      }
      if (FloorKnockBack.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(FloorKnockBack);
      }
      if (FloorDiagUp.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(FloorDiagUp);
      }
      if (FloorKnockDown.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(FloorKnockDown);
      }
      if (FloorHold.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(FloorHold);
      }
      if (FloorAirHit.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(FloorAirHit);
      }
      if (FloorDownHit.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(FloorDownHit);
      }
      if (FloorFallDown.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(FloorFallDown);
      }
      if (IdlePabodyEffect.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(IdlePabodyEffect);
      }
      if (idlePabodyEffectOffset_ != null) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(IdlePabodyEffectOffset);
      }
      if (MovePabodyEffect.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(MovePabodyEffect);
      }
      if (movePabodyEffectOffset_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(MovePabodyEffectOffset);
      }
      if (AttackPabodyEffect.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(AttackPabodyEffect);
      }
      if (attackPabodyEffectOffset_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(AttackPabodyEffectOffset);
      }
      if (HitPabodyEffect.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(HitPabodyEffect);
      }
      if (hitPabodyEffectOffset_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(HitPabodyEffectOffset);
      }
      if (DefensePabodyEffect.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(DefensePabodyEffect);
      }
      if (defensePabodyEffectOffset_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(DefensePabodyEffectOffset);
      }
      if (StandDeath.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(StandDeath);
      }
      if (DownDeath.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(DownDeath);
      }
      if (RelativeEndureEffectAlpha != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(RelativeEndureEffectAlpha);
      }
      if (RelativeEndureEffectRed != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(RelativeEndureEffectRed);
      }
      if (RelativeEndureEffectGreen != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(RelativeEndureEffectGreen);
      }
      if (RelativeEndureEffectBule != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(RelativeEndureEffectBule);
      }
      if (RelativeEndureEffectOverTime != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(RelativeEndureEffectOverTime);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(Desc);
      }
      if (SpasticityCD != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(SpasticityCD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += actionList_.CalculateSize(_repeated_actionList_codec);
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (GroupNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupNum);
      }
      if (MaterialType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MaterialType);
      }
      if (MaterialTypeInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaterialTypeInt);
      }
      if (RotateOnHit != false) {
        size += 1 + 1;
      }
      if (CheckDeath != false) {
        size += 1 + 1;
      }
      if (ReflectUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflectUnit);
      }
      if (ReflectGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflectGroupID);
      }
      if (HasCollision != false) {
        size += 1 + 1;
      }
      if (DefaultActionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultActionLevel);
      }
      if (aISetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AISetting);
      }
      if (StartupAction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartupAction);
      }
      if (StartupActionInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartupActionInstance);
      }
      if (CanCapture != false) {
        size += 1 + 1;
      }
      if (AttackModify != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackModify);
      }
      if (ModifyStartTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModifyStartTime);
      }
      if (ModifyEndTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ModifyEndTime);
      }
      if (Gravtity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Gravtity);
      }
      if (AttackedGravtity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackedGravtity);
      }
      if (lashModifier_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LashModifier);
      }
      if (holdOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HoldOffset);
      }
      if (BoundingLength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingLength);
      }
      if (BoundingWidth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingWidth);
      }
      if (BoundingHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingHeight);
      }
      if (StandStandHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandStandHit);
      }
      if (StandKnockOut.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandKnockOut);
      }
      if (StandKnockBack.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandKnockBack);
      }
      if (StandDiagUp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandDiagUp);
      }
      if (StandKnockDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandKnockDown);
      }
      if (StandHold.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandHold);
      }
      if (StandAirHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandAirHit);
      }
      if (StandDownHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandDownHit);
      }
      if (StandFallDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandFallDown);
      }
      if (AirStandHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirStandHit);
      }
      if (AirKnockOut.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirKnockOut);
      }
      if (AirKnockBack.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirKnockBack);
      }
      if (AirDiagUp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirDiagUp);
      }
      if (AirKnockDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirKnockDown);
      }
      if (AirHold.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirHold);
      }
      if (AirAirHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirAirHit);
      }
      if (AirDownHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirDownHit);
      }
      if (AirFallDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AirFallDown);
      }
      if (FloorStandHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorStandHit);
      }
      if (FloorKnockOut.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorKnockOut);
      }
      if (FloorKnockBack.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorKnockBack);
      }
      if (FloorDiagUp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorDiagUp);
      }
      if (FloorKnockDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorKnockDown);
      }
      if (FloorHold.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorHold);
      }
      if (FloorAirHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorAirHit);
      }
      if (FloorDownHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorDownHit);
      }
      if (FloorFallDown.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FloorFallDown);
      }
      if (IdlePabodyEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IdlePabodyEffect);
      }
      if (idlePabodyEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IdlePabodyEffectOffset);
      }
      if (MovePabodyEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MovePabodyEffect);
      }
      if (movePabodyEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MovePabodyEffectOffset);
      }
      if (AttackPabodyEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttackPabodyEffect);
      }
      if (attackPabodyEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackPabodyEffectOffset);
      }
      if (HitPabodyEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitPabodyEffect);
      }
      if (hitPabodyEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HitPabodyEffectOffset);
      }
      if (DefensePabodyEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DefensePabodyEffect);
      }
      if (defensePabodyEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefensePabodyEffectOffset);
      }
      if (StandDeath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StandDeath);
      }
      if (DownDeath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DownDeath);
      }
      if (RelativeEndureEffectAlpha != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeEndureEffectAlpha);
      }
      if (RelativeEndureEffectRed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeEndureEffectRed);
      }
      if (RelativeEndureEffectGreen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeEndureEffectGreen);
      }
      if (RelativeEndureEffectBule != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeEndureEffectBule);
      }
      if (RelativeEndureEffectOverTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeEndureEffectOverTime);
      }
      if (Desc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (SpasticityCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpasticityCD);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            actionList_.AddEntriesFrom(input, _repeated_actionList_codec);
            break;
          }
          case 16: {
            Race = input.ReadInt32();
            break;
          }
          case 24: {
            GroupNum = input.ReadInt32();
            break;
          }
          case 32: {
            materialType_ = (global::ActData.MaterialType) input.ReadEnum();
            break;
          }
          case 40: {
            MaterialTypeInt = input.ReadInt32();
            break;
          }
          case 48: {
            RotateOnHit = input.ReadBool();
            break;
          }
          case 56: {
            CheckDeath = input.ReadBool();
            break;
          }
          case 64: {
            ReflectUnit = input.ReadInt32();
            break;
          }
          case 72: {
            ReflectGroupID = input.ReadInt32();
            break;
          }
          case 80: {
            HasCollision = input.ReadBool();
            break;
          }
          case 88: {
            DefaultActionLevel = input.ReadInt32();
            break;
          }
          case 98: {
            if (aISetting_ == null) {
              aISetting_ = new global::ActData.AISetting();
            }
            input.ReadMessage(aISetting_);
            break;
          }
          case 106: {
            StartupAction = input.ReadString();
            break;
          }
          case 114: {
            StartupActionInstance = input.ReadString();
            break;
          }
          case 120: {
            CanCapture = input.ReadBool();
            break;
          }
          case 128: {
            AttackModify = input.ReadInt32();
            break;
          }
          case 136: {
            ModifyStartTime = input.ReadInt32();
            break;
          }
          case 144: {
            ModifyEndTime = input.ReadInt32();
            break;
          }
          case 152: {
            Gravtity = input.ReadInt32();
            break;
          }
          case 160: {
            AttackedGravtity = input.ReadInt32();
            break;
          }
          case 170: {
            if (lashModifier_ == null) {
              lashModifier_ = new global::ActData.Vector3();
            }
            input.ReadMessage(lashModifier_);
            break;
          }
          case 178: {
            if (holdOffset_ == null) {
              holdOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(holdOffset_);
            break;
          }
          case 184: {
            BoundingLength = input.ReadInt32();
            break;
          }
          case 192: {
            BoundingWidth = input.ReadInt32();
            break;
          }
          case 200: {
            BoundingHeight = input.ReadInt32();
            break;
          }
          case 210: {
            StandStandHit = input.ReadString();
            break;
          }
          case 218: {
            StandKnockOut = input.ReadString();
            break;
          }
          case 226: {
            StandKnockBack = input.ReadString();
            break;
          }
          case 234: {
            StandDiagUp = input.ReadString();
            break;
          }
          case 242: {
            StandKnockDown = input.ReadString();
            break;
          }
          case 250: {
            StandHold = input.ReadString();
            break;
          }
          case 258: {
            StandAirHit = input.ReadString();
            break;
          }
          case 266: {
            StandDownHit = input.ReadString();
            break;
          }
          case 274: {
            StandFallDown = input.ReadString();
            break;
          }
          case 282: {
            AirStandHit = input.ReadString();
            break;
          }
          case 290: {
            AirKnockOut = input.ReadString();
            break;
          }
          case 298: {
            AirKnockBack = input.ReadString();
            break;
          }
          case 306: {
            AirDiagUp = input.ReadString();
            break;
          }
          case 314: {
            AirKnockDown = input.ReadString();
            break;
          }
          case 322: {
            AirHold = input.ReadString();
            break;
          }
          case 330: {
            AirAirHit = input.ReadString();
            break;
          }
          case 338: {
            AirDownHit = input.ReadString();
            break;
          }
          case 346: {
            AirFallDown = input.ReadString();
            break;
          }
          case 354: {
            FloorStandHit = input.ReadString();
            break;
          }
          case 362: {
            FloorKnockOut = input.ReadString();
            break;
          }
          case 370: {
            FloorKnockBack = input.ReadString();
            break;
          }
          case 378: {
            FloorDiagUp = input.ReadString();
            break;
          }
          case 386: {
            FloorKnockDown = input.ReadString();
            break;
          }
          case 394: {
            FloorHold = input.ReadString();
            break;
          }
          case 402: {
            FloorAirHit = input.ReadString();
            break;
          }
          case 410: {
            FloorDownHit = input.ReadString();
            break;
          }
          case 418: {
            FloorFallDown = input.ReadString();
            break;
          }
          case 426: {
            IdlePabodyEffect = input.ReadString();
            break;
          }
          case 434: {
            if (idlePabodyEffectOffset_ == null) {
              idlePabodyEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(idlePabodyEffectOffset_);
            break;
          }
          case 442: {
            MovePabodyEffect = input.ReadString();
            break;
          }
          case 450: {
            if (movePabodyEffectOffset_ == null) {
              movePabodyEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(movePabodyEffectOffset_);
            break;
          }
          case 458: {
            AttackPabodyEffect = input.ReadString();
            break;
          }
          case 466: {
            if (attackPabodyEffectOffset_ == null) {
              attackPabodyEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(attackPabodyEffectOffset_);
            break;
          }
          case 474: {
            HitPabodyEffect = input.ReadString();
            break;
          }
          case 482: {
            if (hitPabodyEffectOffset_ == null) {
              hitPabodyEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(hitPabodyEffectOffset_);
            break;
          }
          case 490: {
            DefensePabodyEffect = input.ReadString();
            break;
          }
          case 498: {
            if (defensePabodyEffectOffset_ == null) {
              defensePabodyEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(defensePabodyEffectOffset_);
            break;
          }
          case 506: {
            StandDeath = input.ReadString();
            break;
          }
          case 514: {
            DownDeath = input.ReadString();
            break;
          }
          case 520: {
            RelativeEndureEffectAlpha = input.ReadInt32();
            break;
          }
          case 528: {
            RelativeEndureEffectRed = input.ReadInt32();
            break;
          }
          case 536: {
            RelativeEndureEffectGreen = input.ReadInt32();
            break;
          }
          case 544: {
            RelativeEndureEffectBule = input.ReadInt32();
            break;
          }
          case 552: {
            RelativeEndureEffectOverTime = input.ReadInt32();
            break;
          }
          case 562: {
            Desc = input.ReadString();
            break;
          }
          case 568: {
            SpasticityCD = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Action : pb::IMessage {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    /// <summary>Field number for the "animationVersion" field.</summary>
    public const int AnimationVersionFieldNumber = 1;
    private string animationVersion_ = "";
    /// <summary>
    ///-----------------------------------------------------动作---------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationVersion {
      get { return animationVersion_; }
      set {
        animationVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionVersion" field.</summary>
    public const int ActionVersionFieldNumber = 2;
    private string actionVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionVersion {
      get { return actionVersion_; }
      set {
        actionVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gfxVersion" field.</summary>
    public const int GfxVersionFieldNumber = 3;
    private string gfxVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GfxVersion {
      get { return gfxVersion_; }
      set {
        gfxVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    ///动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///动作名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private string desc_ = "";
    /// <summary>
    ///动作描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultLinkActionID" field.</summary>
    public const int DefaultLinkActionIDFieldNumber = 7;
    private string defaultLinkActionID_ = "";
    /// <summary>
    ///缺省连接的动作ID号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultLinkActionID {
      get { return defaultLinkActionID_; }
      set {
        defaultLinkActionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animSlotList" field.</summary>
    public const int AnimSlotListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::ActData.AnimSlot> _repeated_animSlotList_codec
        = pb::FieldCodec.ForMessage(66, global::ActData.AnimSlot.Parser);
    private readonly pbc::RepeatedField<global::ActData.AnimSlot> animSlotList_ = new pbc::RepeatedField<global::ActData.AnimSlot>();
    /// <summary>
    ///动画列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AnimSlot> AnimSlotList {
      get { return animSlotList_; }
    }

    /// <summary>Field number for the "animTime" field.</summary>
    public const int AnimTimeFieldNumber = 9;
    private int animTime_;
    /// <summary>
    ///动画的时间(单位毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimTime {
      get { return animTime_; }
      set {
        animTime_ = value;
      }
    }

    /// <summary>Field number for the "blendTime" field.</summary>
    public const int BlendTimeFieldNumber = 10;
    private int blendTime_;
    /// <summary>
    ///动画混合时间、动画转换到其他动画时候的混合时间，默认为100(单位毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlendTime {
      get { return blendTime_; }
      set {
        blendTime_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 11;
    private int moveSpeed_;
    /// <summary>
    ///移动速度,1秒里面动作移动的速度(单位厘米)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "poseTime" field.</summary>
    public const int PoseTimeFieldNumber = 12;
    private int poseTime_;
    /// <summary>
    ///POSE的时间,动画播放完成之后Blend到POSE的时间(单位毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoseTime {
      get { return poseTime_; }
      set {
        poseTime_ = value;
      }
    }

    /// <summary>Field number for the "totalTime" field.</summary>
    public const int TotalTimeFieldNumber = 13;
    private int totalTime_;
    /// <summary>
    ///动作的总时间,动作的总时间为[AnimTime+PoseTime](单位毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "boundingLengthRadio" field.</summary>
    public const int BoundingLengthRadioFieldNumber = 14;
    private int boundingLengthRadio_;
    /// <summary>
    ///------------------------------------------------------包围盒-------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingLengthRadio {
      get { return boundingLengthRadio_; }
      set {
        boundingLengthRadio_ = value;
      }
    }

    /// <summary>Field number for the "boundingWidthRadio" field.</summary>
    public const int BoundingWidthRadioFieldNumber = 15;
    private int boundingWidthRadio_;
    /// <summary>
    ///宽度比例,包围盒的宽度比例调整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingWidthRadio {
      get { return boundingWidthRadio_; }
      set {
        boundingWidthRadio_ = value;
      }
    }

    /// <summary>Field number for the "boundingHeightRadio" field.</summary>
    public const int BoundingHeightRadioFieldNumber = 16;
    private int boundingHeightRadio_;
    /// <summary>
    ///高度比例,包围盒的包围盒的高度比例调整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingHeightRadio {
      get { return boundingHeightRadio_; }
      set {
        boundingHeightRadio_ = value;
      }
    }

    /// <summary>Field number for the "boundingOffsetX" field.</summary>
    public const int BoundingOffsetXFieldNumber = 17;
    private int boundingOffsetX_;
    /// <summary>
    ///包围盒X偏移,包围盒的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingOffsetX {
      get { return boundingOffsetX_; }
      set {
        boundingOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "boundingOffsetY" field.</summary>
    public const int BoundingOffsetYFieldNumber = 18;
    private int boundingOffsetY_;
    /// <summary>
    ///包围盒Y偏移,包围盒的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingOffsetY {
      get { return boundingOffsetY_; }
      set {
        boundingOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "boundingOffsetZ" field.</summary>
    public const int BoundingOffsetZFieldNumber = 19;
    private int boundingOffsetZ_;
    /// <summary>
    ///包围盒Z偏移,包围盒的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoundingOffsetZ {
      get { return boundingOffsetZ_; }
      set {
        boundingOffsetZ_ = value;
      }
    }

    /// <summary>Field number for the "collsionLengthRadio" field.</summary>
    public const int CollsionLengthRadioFieldNumber = 20;
    private int collsionLengthRadio_;
    /// <summary>
    ///长度比例,碰撞框的长度比例调整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollsionLengthRadio {
      get { return collsionLengthRadio_; }
      set {
        collsionLengthRadio_ = value;
      }
    }

    /// <summary>Field number for the "collsionWidthRadio" field.</summary>
    public const int CollsionWidthRadioFieldNumber = 21;
    private int collsionWidthRadio_;
    /// <summary>
    ///宽度比例,碰撞框的宽度比例调整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollsionWidthRadio {
      get { return collsionWidthRadio_; }
      set {
        collsionWidthRadio_ = value;
      }
    }

    /// <summary>Field number for the "collsionHeightRadio" field.</summary>
    public const int CollsionHeightRadioFieldNumber = 22;
    private int collsionHeightRadio_;
    /// <summary>
    ///高度比例,碰撞框的高度比例调整
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollsionHeightRadio {
      get { return collsionHeightRadio_; }
      set {
        collsionHeightRadio_ = value;
      }
    }

    /// <summary>Field number for the "collisionOffsetX" field.</summary>
    public const int CollisionOffsetXFieldNumber = 23;
    private int collisionOffsetX_;
    /// <summary>
    ///碰撞框X偏移,碰撞框的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionOffsetX {
      get { return collisionOffsetX_; }
      set {
        collisionOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "collsionOffsetY" field.</summary>
    public const int CollsionOffsetYFieldNumber = 24;
    private int collsionOffsetY_;
    /// <summary>
    ///碰撞框Y偏移,碰撞框的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollsionOffsetY {
      get { return collsionOffsetY_; }
      set {
        collsionOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "collisionOffsetZ" field.</summary>
    public const int CollisionOffsetZFieldNumber = 25;
    private int collisionOffsetZ_;
    /// <summary>
    ///碰撞框Z偏移,碰撞框的偏移，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollisionOffsetZ {
      get { return collisionOffsetZ_; }
      set {
        collisionOffsetZ_ = value;
      }
    }

    /// <summary>Field number for the "heightStatus" field.</summary>
    public const int HeightStatusFieldNumber = 26;
    private int heightStatus_;
    /// <summary>
    ///------------------------------------------------------状态---------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeightStatus {
      get { return heightStatus_; }
      set {
        heightStatus_ = value;
      }
    }

    /// <summary>Field number for the "actionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 27;
    private int actionStatus_;
    /// <summary>
    ///动作状态,待机=0，移动=1，攻击=2，受伤=3，防御=4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "fragmentStatus" field.</summary>
    public const int FragmentStatusFieldNumber = 28;
    private int fragmentStatus_;
    /// <summary>
    ///片段状态,准备=0，行动=1，回复=2，硬直=3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FragmentStatus {
      get { return fragmentStatus_; }
      set {
        fragmentStatus_ = value;
      }
    }

    /// <summary>Field number for the "actionLevel" field.</summary>
    public const int ActionLevelFieldNumber = 29;
    private int actionLevel_;
    /// <summary>
    ///动作等级,动作等级为0的时候，该动作采用单位的默认动作，否则为指定的设定等级。默认值为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionLevel {
      get { return actionLevel_; }
      set {
        actionLevel_ = value;
      }
    }

    /// <summary>Field number for the "resetVelocity" field.</summary>
    public const int ResetVelocityFieldNumber = 30;
    private bool resetVelocity_;
    /// <summary>
    ///是否重置速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResetVelocity {
      get { return resetVelocity_; }
      set {
        resetVelocity_ = value;
      }
    }

    /// <summary>Field number for the "hasCollision" field.</summary>
    public const int HasCollisionFieldNumber = 31;
    private int hasCollision_;
    /// <summary>
    ///是否生成碰撞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasCollision {
      get { return hasCollision_; }
      set {
        hasCollision_ = value;
      }
    }

    /// <summary>Field number for the "rotateOnHit" field.</summary>
    public const int RotateOnHitFieldNumber = 32;
    private int rotateOnHit_;
    /// <summary>
    ///受击后转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateOnHit {
      get { return rotateOnHit_; }
      set {
        rotateOnHit_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 33;
    private static readonly pb::FieldCodec<global::ActData.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(266, global::ActData.Event.Parser);
    private readonly pbc::RepeatedField<global::ActData.Event> events_ = new pbc::RepeatedField<global::ActData.Event>();
    /// <summary>
    ///内部事件,该动作内能够触发的事件列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.Event> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "actionInterrupts" field.</summary>
    public const int ActionInterruptsFieldNumber = 34;
    private static readonly pb::FieldCodec<global::ActData.ActionInterrupt> _repeated_actionInterrupts_codec
        = pb::FieldCodec.ForMessage(274, global::ActData.ActionInterrupt.Parser);
    private readonly pbc::RepeatedField<global::ActData.ActionInterrupt> actionInterrupts_ = new pbc::RepeatedField<global::ActData.ActionInterrupt>();
    /// <summary>
    ///中断列表,该动作内能够被中断的动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.ActionInterrupt> ActionInterrupts {
      get { return actionInterrupts_; }
    }

    /// <summary>Field number for the "attackDefs" field.</summary>
    public const int AttackDefsFieldNumber = 35;
    private static readonly pb::FieldCodec<global::ActData.AttackDef> _repeated_attackDefs_codec
        = pb::FieldCodec.ForMessage(282, global::ActData.AttackDef.Parser);
    private readonly pbc::RepeatedField<global::ActData.AttackDef> attackDefs_ = new pbc::RepeatedField<global::ActData.AttackDef>();
    /// <summary>
    ///攻击定义,该动作所包含的攻击定义列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AttackDef> AttackDefs {
      get { return attackDefs_; }
    }

    /// <summary>Field number for the "actionCache" field.</summary>
    public const int ActionCacheFieldNumber = 36;
    private int actionCache_;
    /// <summary>
    ///ActionCache
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCache {
      get { return actionCache_; }
      set {
        actionCache_ = value;
      }
    }

    /// <summary>Field number for the "nextActionCache" field.</summary>
    public const int NextActionCacheFieldNumber = 37;
    private int nextActionCache_;
    /// <summary>
    ///NextActionCache
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextActionCache {
      get { return nextActionCache_; }
      set {
        nextActionCache_ = value;
      }
    }

    /// <summary>Field number for the "ignoreGravity" field.</summary>
    public const int IgnoreGravityFieldNumber = 38;
    private bool ignoreGravity_;
    /// <summary>
    ///-----------------------------------------------------控制器----------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreGravity {
      get { return ignoreGravity_; }
      set {
        ignoreGravity_ = value;
      }
    }

    /// <summary>Field number for the "inSky" field.</summary>
    public const int InSkyFieldNumber = 39;
    private bool inSky_;
    /// <summary>
    ///空中,切换玩家状态到：空中inSky = ignoreGravity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InSky {
      get { return inSky_; }
      set {
        inSky_ = value;
      }
    }

    /// <summary>Field number for the "faceTarget" field.</summary>
    public const int FaceTargetFieldNumber = 40;
    private bool faceTarget_;
    /// <summary>
    ///面向目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaceTarget {
      get { return faceTarget_; }
      set {
        faceTarget_ = value;
      }
    }

    /// <summary>Field number for the "canMove" field.</summary>
    public const int CanMoveFieldNumber = 41;
    private bool canMove_;
    /// <summary>
    ///可移动,切换玩家状态到：可移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanMove {
      get { return canMove_; }
      set {
        canMove_ = value;
      }
    }

    /// <summary>Field number for the "canRotate" field.</summary>
    public const int CanRotateFieldNumber = 42;
    private bool canRotate_;
    /// <summary>
    ///可转身,切换玩家状态到：可转身
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRotate {
      get { return canRotate_; }
      set {
        canRotate_ = value;
      }
    }

    /// <summary>Field number for the "canHurt" field.</summary>
    public const int CanHurtFieldNumber = 43;
    private bool canHurt_;
    /// <summary>
    ///可受伤,切换玩家状态到：可受伤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanHurt {
      get { return canHurt_; }
      set {
        canHurt_ = value;
      }
    }

    /// <summary>Field number for the "isGOD" field.</summary>
    public const int IsGODFieldNumber = 44;
    private bool isGOD_;
    /// <summary>
    ///无敌,切换玩家状态到：无敌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGOD {
      get { return isGOD_; }
      set {
        isGOD_ = value;
      }
    }

    /// <summary>Field number for the "cameraTarget" field.</summary>
    public const int CameraTargetFieldNumber = 45;
    private bool cameraTarget_;
    /// <summary>
    ///摄像机视角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CameraTarget {
      get { return cameraTarget_; }
      set {
        cameraTarget_ = value;
      }
    }

    /// <summary>Field number for the "easyDiffTimeProp" field.</summary>
    public const int EasyDiffTimePropFieldNumber = 46;
    private int easyDiffTimeProp_;
    /// <summary>
    ///简单难度下时间比列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EasyDiffTimeProp {
      get { return easyDiffTimeProp_; }
      set {
        easyDiffTimeProp_ = value;
      }
    }

    /// <summary>Field number for the "nomalDiffTimeProp" field.</summary>
    public const int NomalDiffTimePropFieldNumber = 47;
    private int nomalDiffTimeProp_;
    /// <summary>
    ///普通难度下时间比列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NomalDiffTimeProp {
      get { return nomalDiffTimeProp_; }
      set {
        nomalDiffTimeProp_ = value;
      }
    }

    /// <summary>Field number for the "hardDiffTimeProp" field.</summary>
    public const int HardDiffTimePropFieldNumber = 48;
    private int hardDiffTimeProp_;
    /// <summary>
    ///困难难度下时间比列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HardDiffTimeProp {
      get { return hardDiffTimeProp_; }
      set {
        hardDiffTimeProp_ = value;
      }
    }

    /// <summary>Field number for the "nightmareDiffTimeProp" field.</summary>
    public const int NightmareDiffTimePropFieldNumber = 49;
    private int nightmareDiffTimeProp_;
    /// <summary>
    ///噩梦难度下时间比列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NightmareDiffTimeProp {
      get { return nightmareDiffTimeProp_; }
      set {
        nightmareDiffTimeProp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnimationVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AnimationVersion);
      }
      if (ActionVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionVersion);
      }
      if (GfxVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GfxVersion);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Desc);
      }
      if (DefaultLinkActionID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DefaultLinkActionID);
      }
      animSlotList_.WriteTo(output, _repeated_animSlotList_codec);
      if (AnimTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AnimTime);
      }
      if (BlendTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BlendTime);
      }
      if (MoveSpeed != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MoveSpeed);
      }
      if (PoseTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PoseTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(TotalTime);
      }
      if (BoundingLengthRadio != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BoundingLengthRadio);
      }
      if (BoundingWidthRadio != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BoundingWidthRadio);
      }
      if (BoundingHeightRadio != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BoundingHeightRadio);
      }
      if (BoundingOffsetX != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(BoundingOffsetX);
      }
      if (BoundingOffsetY != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BoundingOffsetY);
      }
      if (BoundingOffsetZ != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BoundingOffsetZ);
      }
      if (CollsionLengthRadio != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CollsionLengthRadio);
      }
      if (CollsionWidthRadio != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CollsionWidthRadio);
      }
      if (CollsionHeightRadio != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CollsionHeightRadio);
      }
      if (CollisionOffsetX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(CollisionOffsetX);
      }
      if (CollsionOffsetY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CollsionOffsetY);
      }
      if (CollisionOffsetZ != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CollisionOffsetZ);
      }
      if (HeightStatus != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(HeightStatus);
      }
      if (ActionStatus != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActionStatus);
      }
      if (FragmentStatus != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(FragmentStatus);
      }
      if (ActionLevel != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(ActionLevel);
      }
      if (ResetVelocity != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ResetVelocity);
      }
      if (HasCollision != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HasCollision);
      }
      if (RotateOnHit != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(RotateOnHit);
      }
      events_.WriteTo(output, _repeated_events_codec);
      actionInterrupts_.WriteTo(output, _repeated_actionInterrupts_codec);
      attackDefs_.WriteTo(output, _repeated_attackDefs_codec);
      if (ActionCache != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(ActionCache);
      }
      if (NextActionCache != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(NextActionCache);
      }
      if (IgnoreGravity != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IgnoreGravity);
      }
      if (InSky != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(InSky);
      }
      if (FaceTarget != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(FaceTarget);
      }
      if (CanMove != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(CanMove);
      }
      if (CanRotate != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(CanRotate);
      }
      if (CanHurt != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(CanHurt);
      }
      if (IsGOD != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsGOD);
      }
      if (CameraTarget != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(CameraTarget);
      }
      if (EasyDiffTimeProp != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(EasyDiffTimeProp);
      }
      if (NomalDiffTimeProp != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(NomalDiffTimeProp);
      }
      if (HardDiffTimeProp != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(HardDiffTimeProp);
      }
      if (NightmareDiffTimeProp != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(NightmareDiffTimeProp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnimationVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimationVersion);
      }
      if (ActionVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionVersion);
      }
      if (GfxVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GfxVersion);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (DefaultLinkActionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultLinkActionID);
      }
      size += animSlotList_.CalculateSize(_repeated_animSlotList_codec);
      if (AnimTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimTime);
      }
      if (BlendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlendTime);
      }
      if (MoveSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveSpeed);
      }
      if (PoseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoseTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (BoundingLengthRadio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundingLengthRadio);
      }
      if (BoundingWidthRadio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundingWidthRadio);
      }
      if (BoundingHeightRadio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingHeightRadio);
      }
      if (BoundingOffsetX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingOffsetX);
      }
      if (BoundingOffsetY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingOffsetY);
      }
      if (BoundingOffsetZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BoundingOffsetZ);
      }
      if (CollsionLengthRadio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollsionLengthRadio);
      }
      if (CollsionWidthRadio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollsionWidthRadio);
      }
      if (CollsionHeightRadio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollsionHeightRadio);
      }
      if (CollisionOffsetX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollisionOffsetX);
      }
      if (CollsionOffsetY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollsionOffsetY);
      }
      if (CollisionOffsetZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CollisionOffsetZ);
      }
      if (HeightStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeightStatus);
      }
      if (ActionStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionStatus);
      }
      if (FragmentStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FragmentStatus);
      }
      if (ActionLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionLevel);
      }
      if (ResetVelocity != false) {
        size += 2 + 1;
      }
      if (HasCollision != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HasCollision);
      }
      if (RotateOnHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotateOnHit);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      size += actionInterrupts_.CalculateSize(_repeated_actionInterrupts_codec);
      size += attackDefs_.CalculateSize(_repeated_attackDefs_codec);
      if (ActionCache != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActionCache);
      }
      if (NextActionCache != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextActionCache);
      }
      if (IgnoreGravity != false) {
        size += 2 + 1;
      }
      if (InSky != false) {
        size += 2 + 1;
      }
      if (FaceTarget != false) {
        size += 2 + 1;
      }
      if (CanMove != false) {
        size += 2 + 1;
      }
      if (CanRotate != false) {
        size += 2 + 1;
      }
      if (CanHurt != false) {
        size += 2 + 1;
      }
      if (IsGOD != false) {
        size += 2 + 1;
      }
      if (CameraTarget != false) {
        size += 2 + 1;
      }
      if (EasyDiffTimeProp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EasyDiffTimeProp);
      }
      if (NomalDiffTimeProp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NomalDiffTimeProp);
      }
      if (HardDiffTimeProp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HardDiffTimeProp);
      }
      if (NightmareDiffTimeProp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NightmareDiffTimeProp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AnimationVersion = input.ReadString();
            break;
          }
          case 18: {
            ActionVersion = input.ReadString();
            break;
          }
          case 26: {
            GfxVersion = input.ReadString();
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Desc = input.ReadString();
            break;
          }
          case 58: {
            DefaultLinkActionID = input.ReadString();
            break;
          }
          case 66: {
            animSlotList_.AddEntriesFrom(input, _repeated_animSlotList_codec);
            break;
          }
          case 72: {
            AnimTime = input.ReadInt32();
            break;
          }
          case 80: {
            BlendTime = input.ReadInt32();
            break;
          }
          case 88: {
            MoveSpeed = input.ReadInt32();
            break;
          }
          case 96: {
            PoseTime = input.ReadInt32();
            break;
          }
          case 104: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 112: {
            BoundingLengthRadio = input.ReadInt32();
            break;
          }
          case 120: {
            BoundingWidthRadio = input.ReadInt32();
            break;
          }
          case 128: {
            BoundingHeightRadio = input.ReadInt32();
            break;
          }
          case 136: {
            BoundingOffsetX = input.ReadInt32();
            break;
          }
          case 144: {
            BoundingOffsetY = input.ReadInt32();
            break;
          }
          case 152: {
            BoundingOffsetZ = input.ReadInt32();
            break;
          }
          case 160: {
            CollsionLengthRadio = input.ReadInt32();
            break;
          }
          case 168: {
            CollsionWidthRadio = input.ReadInt32();
            break;
          }
          case 176: {
            CollsionHeightRadio = input.ReadInt32();
            break;
          }
          case 184: {
            CollisionOffsetX = input.ReadInt32();
            break;
          }
          case 192: {
            CollsionOffsetY = input.ReadInt32();
            break;
          }
          case 200: {
            CollisionOffsetZ = input.ReadInt32();
            break;
          }
          case 208: {
            HeightStatus = input.ReadInt32();
            break;
          }
          case 216: {
            ActionStatus = input.ReadInt32();
            break;
          }
          case 224: {
            FragmentStatus = input.ReadInt32();
            break;
          }
          case 232: {
            ActionLevel = input.ReadInt32();
            break;
          }
          case 240: {
            ResetVelocity = input.ReadBool();
            break;
          }
          case 248: {
            HasCollision = input.ReadInt32();
            break;
          }
          case 256: {
            RotateOnHit = input.ReadInt32();
            break;
          }
          case 266: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 274: {
            actionInterrupts_.AddEntriesFrom(input, _repeated_actionInterrupts_codec);
            break;
          }
          case 282: {
            attackDefs_.AddEntriesFrom(input, _repeated_attackDefs_codec);
            break;
          }
          case 288: {
            ActionCache = input.ReadInt32();
            break;
          }
          case 296: {
            NextActionCache = input.ReadInt32();
            break;
          }
          case 304: {
            IgnoreGravity = input.ReadBool();
            break;
          }
          case 312: {
            InSky = input.ReadBool();
            break;
          }
          case 320: {
            FaceTarget = input.ReadBool();
            break;
          }
          case 328: {
            CanMove = input.ReadBool();
            break;
          }
          case 336: {
            CanRotate = input.ReadBool();
            break;
          }
          case 344: {
            CanHurt = input.ReadBool();
            break;
          }
          case 352: {
            IsGOD = input.ReadBool();
            break;
          }
          case 360: {
            CameraTarget = input.ReadBool();
            break;
          }
          case 368: {
            EasyDiffTimeProp = input.ReadInt32();
            break;
          }
          case 376: {
            NomalDiffTimeProp = input.ReadInt32();
            break;
          }
          case 384: {
            HardDiffTimeProp = input.ReadInt32();
            break;
          }
          case 392: {
            NightmareDiffTimeProp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AnimSlot : pb::IMessage {
    private static readonly pb::MessageParser<AnimSlot> _parser = new pb::MessageParser<AnimSlot>(() => new AnimSlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimSlot> Parser { get { return _parser; } }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 1;
    private string animation_ = "";
    /// <summary>
    ///动画设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Animation {
      get { return animation_; }
      set {
        animation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private int start_;
    /// <summary>
    ///起始,动画起始的在原动画的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private int end_;
    /// <summary>
    ///结束,动画结束的在原动画的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private int weight_;
    /// <summary>
    ///权重,动画的权重
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "animControlList" field.</summary>
    public const int AnimControlListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ActData.AnimControl> _repeated_animControlList_codec
        = pb::FieldCodec.ForMessage(42, global::ActData.AnimControl.Parser);
    private readonly pbc::RepeatedField<global::ActData.AnimControl> animControlList_ = new pbc::RepeatedField<global::ActData.AnimControl>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AnimControl> AnimControlList {
      get { return animControlList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Animation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Animation);
      }
      if (Start != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(End);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      animControlList_.WriteTo(output, _repeated_animControlList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Animation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Animation);
      }
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      size += animControlList_.CalculateSize(_repeated_animControlList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Animation = input.ReadString();
            break;
          }
          case 16: {
            Start = input.ReadInt32();
            break;
          }
          case 24: {
            End = input.ReadInt32();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
          case 42: {
            animControlList_.AddEntriesFrom(input, _repeated_animControlList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class AnimControl : pb::IMessage {
    private static readonly pb::MessageParser<AnimControl> _parser = new pb::MessageParser<AnimControl>(() => new AnimControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimControl> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionTimeProportion" field.</summary>
    public const int ActionTimeProportionFieldNumber = 1;
    private int actionTimeProportion_;
    /// <summary>
    ///动画控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionTimeProportion {
      get { return actionTimeProportion_; }
      set {
        actionTimeProportion_ = value;
      }
    }

    /// <summary>Field number for the "animTimeProportion" field.</summary>
    public const int AnimTimeProportionFieldNumber = 2;
    private int animTimeProportion_;
    /// <summary>
    ///动画时间比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimTimeProportion {
      get { return animTimeProportion_; }
      set {
        animTimeProportion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionTimeProportion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionTimeProportion);
      }
      if (AnimTimeProportion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AnimTimeProportion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionTimeProportion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionTimeProportion);
      }
      if (AnimTimeProportion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimTimeProportion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionTimeProportion = input.ReadInt32();
            break;
          }
          case 16: {
            AnimTimeProportion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class Event : pb::IMessage {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    /// <summary>Field number for the "triggerTime" field.</summary>
    public const int TriggerTimeFieldNumber = 1;
    private int triggerTime_;
    /// <summary>
    ///触发时间,事件触发的时间点(百分比)，数值为[0-100-200]，[0-100]期间是处于动画时间段里面的百分比，[100-200]期间是出于POSE时间段里面的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerTime {
      get { return triggerTime_; }
      set {
        triggerTime_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private global::ActData.EventType eventType_ = 0;
    /// <summary>
    ///触发类型,事件触发的类型，默认为None
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "eventTypeInt" field.</summary>
    public const int EventTypeIntFieldNumber = 3;
    private int eventTypeInt_;
    /// <summary>
    ///EventType的Int数值，方便C++的XML读取  eventTypeInt = (int)eventType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventTypeInt {
      get { return eventTypeInt_; }
      set {
        eventTypeInt_ = value;
      }
    }

    /// <summary>Field number for the "eventDetailData" field.</summary>
    public const int EventDetailDataFieldNumber = 4;
    private global::ActData.EventData eventDetailData_;
    /// <summary>
    ///事件详细数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventData EventDetailData {
      get { return eventDetailData_; }
      set {
        eventDetailData_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 5;
    private string desc_ = "";
    /// <summary>
    ///事件的描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TriggerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerTime);
      }
      if (EventType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventType);
      }
      if (EventTypeInt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventTypeInt);
      }
      if (eventDetailData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EventDetailData);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Desc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TriggerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerTime);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (EventTypeInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventTypeInt);
      }
      if (eventDetailData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventDetailData);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TriggerTime = input.ReadInt32();
            break;
          }
          case 16: {
            eventType_ = (global::ActData.EventType) input.ReadEnum();
            break;
          }
          case 24: {
            EventTypeInt = input.ReadInt32();
            break;
          }
          case 34: {
            if (eventDetailData_ == null) {
              eventDetailData_ = new global::ActData.EventData();
            }
            input.ReadMessage(eventDetailData_);
            break;
          }
          case 42: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///=========================================================EventData=========================================================
  /// </summary>
  public sealed class EventData : pb::IMessage {
    private static readonly pb::MessageParser<EventData> _parser = new pb::MessageParser<EventData>(() => new EventData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventData> Parser { get { return _parser; } }

    /// <summary>Field number for the "eventPlayEffect" field.</summary>
    public const int EventPlayEffectFieldNumber = 1;
    private global::ActData.EventPlayEffect eventPlayEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventPlayEffect EventPlayEffect {
      get { return eventPlayEffect_; }
      set {
        eventPlayEffect_ = value;
      }
    }

    /// <summary>Field number for the "eventSetColor" field.</summary>
    public const int EventSetColorFieldNumber = 2;
    private global::ActData.EventSetColor eventSetColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetColor EventSetColor {
      get { return eventSetColor_; }
      set {
        eventSetColor_ = value;
      }
    }

    /// <summary>Field number for the "eventLinkActionOn" field.</summary>
    public const int EventLinkActionOnFieldNumber = 3;
    private global::ActData.EventLinkActionOn eventLinkActionOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventLinkActionOn EventLinkActionOn {
      get { return eventLinkActionOn_; }
      set {
        eventLinkActionOn_ = value;
      }
    }

    /// <summary>Field number for the "eventLinkActionOff" field.</summary>
    public const int EventLinkActionOffFieldNumber = 4;
    private global::ActData.EventLinkActionOff eventLinkActionOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventLinkActionOff EventLinkActionOff {
      get { return eventLinkActionOff_; }
      set {
        eventLinkActionOff_ = value;
      }
    }

    /// <summary>Field number for the "eventSetVelocity" field.</summary>
    public const int EventSetVelocityFieldNumber = 5;
    private global::ActData.EventSetVelocity eventSetVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetVelocity EventSetVelocity {
      get { return eventSetVelocity_; }
      set {
        eventSetVelocity_ = value;
      }
    }

    /// <summary>Field number for the "eventSetDirection" field.</summary>
    public const int EventSetDirectionFieldNumber = 6;
    private global::ActData.EventSetDirection eventSetDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetDirection EventSetDirection {
      get { return eventSetDirection_; }
      set {
        eventSetDirection_ = value;
      }
    }

    /// <summary>Field number for the "eventSetGravity" field.</summary>
    public const int EventSetGravityFieldNumber = 7;
    private global::ActData.EventSetGravity eventSetGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetGravity EventSetGravity {
      get { return eventSetGravity_; }
      set {
        eventSetGravity_ = value;
      }
    }

    /// <summary>Field number for the "eventSetHeightStatus" field.</summary>
    public const int EventSetHeightStatusFieldNumber = 8;
    private global::ActData.EventSetHeightStatus eventSetHeightStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetHeightStatus EventSetHeightStatus {
      get { return eventSetHeightStatus_; }
      set {
        eventSetHeightStatus_ = value;
      }
    }

    /// <summary>Field number for the "eventSetActionStatus" field.</summary>
    public const int EventSetActionStatusFieldNumber = 9;
    private global::ActData.EventSetActionStatus eventSetActionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetActionStatus EventSetActionStatus {
      get { return eventSetActionStatus_; }
      set {
        eventSetActionStatus_ = value;
      }
    }

    /// <summary>Field number for the "eventSetFragmentStatus" field.</summary>
    public const int EventSetFragmentStatusFieldNumber = 10;
    private global::ActData.EventSetFragmentStatus eventSetFragmentStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetFragmentStatus EventSetFragmentStatus {
      get { return eventSetFragmentStatus_; }
      set {
        eventSetFragmentStatus_ = value;
      }
    }

    /// <summary>Field number for the "eventAddUnit" field.</summary>
    public const int EventAddUnitFieldNumber = 11;
    private global::ActData.EventAddUnit eventAddUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventAddUnit EventAddUnit {
      get { return eventAddUnit_; }
      set {
        eventAddUnit_ = value;
      }
    }

    /// <summary>Field number for the "eventListTargets" field.</summary>
    public const int EventListTargetsFieldNumber = 12;
    private global::ActData.EventListTargets eventListTargets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventListTargets EventListTargets {
      get { return eventListTargets_; }
      set {
        eventListTargets_ = value;
      }
    }

    /// <summary>Field number for the "eventSetVariable" field.</summary>
    public const int EventSetVariableFieldNumber = 13;
    private global::ActData.EventSetVariable eventSetVariable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetVariable EventSetVariable {
      get { return eventSetVariable_; }
      set {
        eventSetVariable_ = value;
      }
    }

    /// <summary>Field number for the "eventAdjustVarible" field.</summary>
    public const int EventAdjustVaribleFieldNumber = 14;
    private global::ActData.EventAdjustVarible eventAdjustVarible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventAdjustVarible EventAdjustVarible {
      get { return eventAdjustVarible_; }
      set {
        eventAdjustVarible_ = value;
      }
    }

    /// <summary>Field number for the "eventAttackTargets" field.</summary>
    public const int EventAttackTargetsFieldNumber = 15;
    private global::ActData.EventAttackTargets eventAttackTargets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventAttackTargets EventAttackTargets {
      get { return eventAttackTargets_; }
      set {
        eventAttackTargets_ = value;
      }
    }

    /// <summary>Field number for the "eventGoToTargets" field.</summary>
    public const int EventGoToTargetsFieldNumber = 16;
    private global::ActData.EventGoToTargets eventGoToTargets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventGoToTargets EventGoToTargets {
      get { return eventGoToTargets_; }
      set {
        eventGoToTargets_ = value;
      }
    }

    /// <summary>Field number for the "eventSummonUnit" field.</summary>
    public const int EventSummonUnitFieldNumber = 17;
    private global::ActData.EventSummonUnit eventSummonUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSummonUnit EventSummonUnit {
      get { return eventSummonUnit_; }
      set {
        eventSummonUnit_ = value;
      }
    }

    /// <summary>Field number for the "eventControlUnit" field.</summary>
    public const int EventControlUnitFieldNumber = 18;
    private global::ActData.EventControlUnit eventControlUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventControlUnit EventControlUnit {
      get { return eventControlUnit_; }
      set {
        eventControlUnit_ = value;
      }
    }

    /// <summary>Field number for the "eventActionLevel" field.</summary>
    public const int EventActionLevelFieldNumber = 19;
    private global::ActData.EventActionLevel eventActionLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventActionLevel EventActionLevel {
      get { return eventActionLevel_; }
      set {
        eventActionLevel_ = value;
      }
    }

    /// <summary>Field number for the "eventRotateOnHit" field.</summary>
    public const int EventRotateOnHitFieldNumber = 20;
    private global::ActData.EventRotateOnHit eventRotateOnHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventRotateOnHit EventRotateOnHit {
      get { return eventRotateOnHit_; }
      set {
        eventRotateOnHit_ = value;
      }
    }

    /// <summary>Field number for the "eventHasCollision" field.</summary>
    public const int EventHasCollisionFieldNumber = 21;
    private global::ActData.EventHasCollision eventHasCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventHasCollision EventHasCollision {
      get { return eventHasCollision_; }
      set {
        eventHasCollision_ = value;
      }
    }

    /// <summary>Field number for the "eventPlaySound" field.</summary>
    public const int EventPlaySoundFieldNumber = 22;
    private global::ActData.EventPlaySound eventPlaySound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventPlaySound EventPlaySound {
      get { return eventPlaySound_; }
      set {
        eventPlaySound_ = value;
      }
    }

    /// <summary>Field number for the "eventStatusOn" field.</summary>
    public const int EventStatusOnFieldNumber = 23;
    private global::ActData.EventStatusOn eventStatusOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventStatusOn EventStatusOn {
      get { return eventStatusOn_; }
      set {
        eventStatusOn_ = value;
      }
    }

    /// <summary>Field number for the "eventStatusOff" field.</summary>
    public const int EventStatusOffFieldNumber = 24;
    private global::ActData.EventStatusOff eventStatusOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventStatusOff EventStatusOff {
      get { return eventStatusOff_; }
      set {
        eventStatusOff_ = value;
      }
    }

    /// <summary>Field number for the "eventSetVelocity_X" field.</summary>
    public const int EventSetVelocityXFieldNumber = 25;
    private global::ActData.EventSetVelocity_X eventSetVelocityX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetVelocity_X EventSetVelocityX {
      get { return eventSetVelocityX_; }
      set {
        eventSetVelocityX_ = value;
      }
    }

    /// <summary>Field number for the "eventSetVelocity_Y" field.</summary>
    public const int EventSetVelocityYFieldNumber = 26;
    private global::ActData.EventSetVelocity_Y eventSetVelocityY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetVelocity_Y EventSetVelocityY {
      get { return eventSetVelocityY_; }
      set {
        eventSetVelocityY_ = value;
      }
    }

    /// <summary>Field number for the "eventSetVelocity_Z" field.</summary>
    public const int EventSetVelocityZFieldNumber = 27;
    private global::ActData.EventSetVelocity_Z eventSetVelocityZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventSetVelocity_Z EventSetVelocityZ {
      get { return eventSetVelocityZ_; }
      set {
        eventSetVelocityZ_ = value;
      }
    }

    /// <summary>Field number for the "eventExeScript" field.</summary>
    public const int EventExeScriptFieldNumber = 28;
    private global::ActData.EventExeScript eventExeScript_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventExeScript EventExeScript {
      get { return eventExeScript_; }
      set {
        eventExeScript_ = value;
      }
    }

    /// <summary>Field number for the "eventCameraEffect" field.</summary>
    public const int EventCameraEffectFieldNumber = 29;
    private global::ActData.EventCameraEffect eventCameraEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventCameraEffect EventCameraEffect {
      get { return eventCameraEffect_; }
      set {
        eventCameraEffect_ = value;
      }
    }

    /// <summary>Field number for the "eventChat" field.</summary>
    public const int EventChatFieldNumber = 30;
    private global::ActData.EventChat eventChat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventChat EventChat {
      get { return eventChat_; }
      set {
        eventChat_ = value;
      }
    }

    /// <summary>Field number for the "eventFaceTargets" field.</summary>
    public const int EventFaceTargetsFieldNumber = 31;
    private global::ActData.EventFaceTargets eventFaceTargets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventFaceTargets EventFaceTargets {
      get { return eventFaceTargets_; }
      set {
        eventFaceTargets_ = value;
      }
    }

    /// <summary>Field number for the "eventEarlyWarning" field.</summary>
    public const int EventEarlyWarningFieldNumber = 32;
    private global::ActData.EventEarlyWarning eventEarlyWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventEarlyWarning EventEarlyWarning {
      get { return eventEarlyWarning_; }
      set {
        eventEarlyWarning_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventPlayEffect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventPlayEffect);
      }
      if (eventSetColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventSetColor);
      }
      if (eventLinkActionOn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EventLinkActionOn);
      }
      if (eventLinkActionOff_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EventLinkActionOff);
      }
      if (eventSetVelocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EventSetVelocity);
      }
      if (eventSetDirection_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EventSetDirection);
      }
      if (eventSetGravity_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EventSetGravity);
      }
      if (eventSetHeightStatus_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EventSetHeightStatus);
      }
      if (eventSetActionStatus_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EventSetActionStatus);
      }
      if (eventSetFragmentStatus_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EventSetFragmentStatus);
      }
      if (eventAddUnit_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EventAddUnit);
      }
      if (eventListTargets_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EventListTargets);
      }
      if (eventSetVariable_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EventSetVariable);
      }
      if (eventAdjustVarible_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EventAdjustVarible);
      }
      if (eventAttackTargets_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EventAttackTargets);
      }
      if (eventGoToTargets_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EventGoToTargets);
      }
      if (eventSummonUnit_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(EventSummonUnit);
      }
      if (eventControlUnit_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(EventControlUnit);
      }
      if (eventActionLevel_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(EventActionLevel);
      }
      if (eventRotateOnHit_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(EventRotateOnHit);
      }
      if (eventHasCollision_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(EventHasCollision);
      }
      if (eventPlaySound_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(EventPlaySound);
      }
      if (eventStatusOn_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EventStatusOn);
      }
      if (eventStatusOff_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(EventStatusOff);
      }
      if (eventSetVelocityX_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(EventSetVelocityX);
      }
      if (eventSetVelocityY_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(EventSetVelocityY);
      }
      if (eventSetVelocityZ_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(EventSetVelocityZ);
      }
      if (eventExeScript_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(EventExeScript);
      }
      if (eventCameraEffect_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(EventCameraEffect);
      }
      if (eventChat_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(EventChat);
      }
      if (eventFaceTargets_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(EventFaceTargets);
      }
      if (eventEarlyWarning_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(EventEarlyWarning);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventPlayEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventPlayEffect);
      }
      if (eventSetColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetColor);
      }
      if (eventLinkActionOn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventLinkActionOn);
      }
      if (eventLinkActionOff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventLinkActionOff);
      }
      if (eventSetVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetVelocity);
      }
      if (eventSetDirection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetDirection);
      }
      if (eventSetGravity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetGravity);
      }
      if (eventSetHeightStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetHeightStatus);
      }
      if (eventSetActionStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetActionStatus);
      }
      if (eventSetFragmentStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetFragmentStatus);
      }
      if (eventAddUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventAddUnit);
      }
      if (eventListTargets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventListTargets);
      }
      if (eventSetVariable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventSetVariable);
      }
      if (eventAdjustVarible_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventAdjustVarible);
      }
      if (eventAttackTargets_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventAttackTargets);
      }
      if (eventGoToTargets_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventGoToTargets);
      }
      if (eventSummonUnit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventSummonUnit);
      }
      if (eventControlUnit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventControlUnit);
      }
      if (eventActionLevel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventActionLevel);
      }
      if (eventRotateOnHit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventRotateOnHit);
      }
      if (eventHasCollision_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventHasCollision);
      }
      if (eventPlaySound_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventPlaySound);
      }
      if (eventStatusOn_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventStatusOn);
      }
      if (eventStatusOff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventStatusOff);
      }
      if (eventSetVelocityX_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventSetVelocityX);
      }
      if (eventSetVelocityY_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventSetVelocityY);
      }
      if (eventSetVelocityZ_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventSetVelocityZ);
      }
      if (eventExeScript_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventExeScript);
      }
      if (eventCameraEffect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventCameraEffect);
      }
      if (eventChat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventChat);
      }
      if (eventFaceTargets_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventFaceTargets);
      }
      if (eventEarlyWarning_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EventEarlyWarning);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (eventPlayEffect_ == null) {
              eventPlayEffect_ = new global::ActData.EventPlayEffect();
            }
            input.ReadMessage(eventPlayEffect_);
            break;
          }
          case 18: {
            if (eventSetColor_ == null) {
              eventSetColor_ = new global::ActData.EventSetColor();
            }
            input.ReadMessage(eventSetColor_);
            break;
          }
          case 26: {
            if (eventLinkActionOn_ == null) {
              eventLinkActionOn_ = new global::ActData.EventLinkActionOn();
            }
            input.ReadMessage(eventLinkActionOn_);
            break;
          }
          case 34: {
            if (eventLinkActionOff_ == null) {
              eventLinkActionOff_ = new global::ActData.EventLinkActionOff();
            }
            input.ReadMessage(eventLinkActionOff_);
            break;
          }
          case 42: {
            if (eventSetVelocity_ == null) {
              eventSetVelocity_ = new global::ActData.EventSetVelocity();
            }
            input.ReadMessage(eventSetVelocity_);
            break;
          }
          case 50: {
            if (eventSetDirection_ == null) {
              eventSetDirection_ = new global::ActData.EventSetDirection();
            }
            input.ReadMessage(eventSetDirection_);
            break;
          }
          case 58: {
            if (eventSetGravity_ == null) {
              eventSetGravity_ = new global::ActData.EventSetGravity();
            }
            input.ReadMessage(eventSetGravity_);
            break;
          }
          case 66: {
            if (eventSetHeightStatus_ == null) {
              eventSetHeightStatus_ = new global::ActData.EventSetHeightStatus();
            }
            input.ReadMessage(eventSetHeightStatus_);
            break;
          }
          case 74: {
            if (eventSetActionStatus_ == null) {
              eventSetActionStatus_ = new global::ActData.EventSetActionStatus();
            }
            input.ReadMessage(eventSetActionStatus_);
            break;
          }
          case 82: {
            if (eventSetFragmentStatus_ == null) {
              eventSetFragmentStatus_ = new global::ActData.EventSetFragmentStatus();
            }
            input.ReadMessage(eventSetFragmentStatus_);
            break;
          }
          case 90: {
            if (eventAddUnit_ == null) {
              eventAddUnit_ = new global::ActData.EventAddUnit();
            }
            input.ReadMessage(eventAddUnit_);
            break;
          }
          case 98: {
            if (eventListTargets_ == null) {
              eventListTargets_ = new global::ActData.EventListTargets();
            }
            input.ReadMessage(eventListTargets_);
            break;
          }
          case 106: {
            if (eventSetVariable_ == null) {
              eventSetVariable_ = new global::ActData.EventSetVariable();
            }
            input.ReadMessage(eventSetVariable_);
            break;
          }
          case 114: {
            if (eventAdjustVarible_ == null) {
              eventAdjustVarible_ = new global::ActData.EventAdjustVarible();
            }
            input.ReadMessage(eventAdjustVarible_);
            break;
          }
          case 122: {
            if (eventAttackTargets_ == null) {
              eventAttackTargets_ = new global::ActData.EventAttackTargets();
            }
            input.ReadMessage(eventAttackTargets_);
            break;
          }
          case 130: {
            if (eventGoToTargets_ == null) {
              eventGoToTargets_ = new global::ActData.EventGoToTargets();
            }
            input.ReadMessage(eventGoToTargets_);
            break;
          }
          case 138: {
            if (eventSummonUnit_ == null) {
              eventSummonUnit_ = new global::ActData.EventSummonUnit();
            }
            input.ReadMessage(eventSummonUnit_);
            break;
          }
          case 146: {
            if (eventControlUnit_ == null) {
              eventControlUnit_ = new global::ActData.EventControlUnit();
            }
            input.ReadMessage(eventControlUnit_);
            break;
          }
          case 154: {
            if (eventActionLevel_ == null) {
              eventActionLevel_ = new global::ActData.EventActionLevel();
            }
            input.ReadMessage(eventActionLevel_);
            break;
          }
          case 162: {
            if (eventRotateOnHit_ == null) {
              eventRotateOnHit_ = new global::ActData.EventRotateOnHit();
            }
            input.ReadMessage(eventRotateOnHit_);
            break;
          }
          case 170: {
            if (eventHasCollision_ == null) {
              eventHasCollision_ = new global::ActData.EventHasCollision();
            }
            input.ReadMessage(eventHasCollision_);
            break;
          }
          case 178: {
            if (eventPlaySound_ == null) {
              eventPlaySound_ = new global::ActData.EventPlaySound();
            }
            input.ReadMessage(eventPlaySound_);
            break;
          }
          case 186: {
            if (eventStatusOn_ == null) {
              eventStatusOn_ = new global::ActData.EventStatusOn();
            }
            input.ReadMessage(eventStatusOn_);
            break;
          }
          case 194: {
            if (eventStatusOff_ == null) {
              eventStatusOff_ = new global::ActData.EventStatusOff();
            }
            input.ReadMessage(eventStatusOff_);
            break;
          }
          case 202: {
            if (eventSetVelocityX_ == null) {
              eventSetVelocityX_ = new global::ActData.EventSetVelocity_X();
            }
            input.ReadMessage(eventSetVelocityX_);
            break;
          }
          case 210: {
            if (eventSetVelocityY_ == null) {
              eventSetVelocityY_ = new global::ActData.EventSetVelocity_Y();
            }
            input.ReadMessage(eventSetVelocityY_);
            break;
          }
          case 218: {
            if (eventSetVelocityZ_ == null) {
              eventSetVelocityZ_ = new global::ActData.EventSetVelocity_Z();
            }
            input.ReadMessage(eventSetVelocityZ_);
            break;
          }
          case 226: {
            if (eventExeScript_ == null) {
              eventExeScript_ = new global::ActData.EventExeScript();
            }
            input.ReadMessage(eventExeScript_);
            break;
          }
          case 234: {
            if (eventCameraEffect_ == null) {
              eventCameraEffect_ = new global::ActData.EventCameraEffect();
            }
            input.ReadMessage(eventCameraEffect_);
            break;
          }
          case 242: {
            if (eventChat_ == null) {
              eventChat_ = new global::ActData.EventChat();
            }
            input.ReadMessage(eventChat_);
            break;
          }
          case 250: {
            if (eventFaceTargets_ == null) {
              eventFaceTargets_ = new global::ActData.EventFaceTargets();
            }
            input.ReadMessage(eventFaceTargets_);
            break;
          }
          case 258: {
            if (eventEarlyWarning_ == null) {
              eventEarlyWarning_ = new global::ActData.EventEarlyWarning();
            }
            input.ReadMessage(eventEarlyWarning_);
            break;
          }
        }
      }
    }

  }

  public sealed class EventPlayEffect : pb::IMessage {
    private static readonly pb::MessageParser<EventPlayEffect> _parser = new pb::MessageParser<EventPlayEffect>(() => new EventPlayEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPlayEffect> Parser { get { return _parser; } }

    /// <summary>Field number for the "effectName" field.</summary>
    public const int EffectNameFieldNumber = 1;
    private string effectName_ = "";
    /// <summary>
    ///特效名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectName {
      get { return effectName_; }
      set {
        effectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offsetX" field.</summary>
    public const int OffsetXFieldNumber = 2;
    private float offsetX_;
    /// <summary>
    ///偏移X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "offsetY" field.</summary>
    public const int OffsetYFieldNumber = 3;
    private float offsetY_;
    /// <summary>
    ///偏移Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "offsetZ" field.</summary>
    public const int OffsetZFieldNumber = 4;
    private float offsetZ_;
    /// <summary>
    ///偏移Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    /// <summary>Field number for the "stopMode" field.</summary>
    public const int StopModeFieldNumber = 5;
    private int stopMode_;
    /// <summary>
    ///停止方式：0:与动作无关; 1: 随着动作结束而结束; 2:放者的动作状态=受伤结束; 3:动作被中断特效终止
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StopMode {
      get { return stopMode_; }
      set {
        stopMode_ = value;
      }
    }

    /// <summary>Field number for the "bindMode" field.</summary>
    public const int BindModeFieldNumber = 6;
    private int bindMode_;
    /// <summary>
    ///绑定方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindMode {
      get { return bindMode_; }
      set {
        bindMode_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "scaleTime" field.</summary>
    public const int ScaleTimeFieldNumber = 8;
    private float scaleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleTime {
      get { return scaleTime_; }
      set {
        scaleTime_ = value;
      }
    }

    /// <summary>Field number for the "visibleType" field.</summary>
    public const int VisibleTypeFieldNumber = 9;
    private int visibleType_;
    /// <summary>
    ///0=所有玩家阵营可见（默认） 1=自己与友方阵营可见 2=敌方阵营可见 3=仅自己可见
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisibleType {
      get { return visibleType_; }
      set {
        visibleType_ = value;
      }
    }

    /// <summary>Field number for the "bindName" field.</summary>
    public const int BindNameFieldNumber = 10;
    private string bindName_ = "";
    /// <summary>
    ///特效绑定的节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BindName {
      get { return bindName_; }
      set {
        bindName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 11;
    private int duration_;
    /// <summary>
    ///特效持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EffectName);
      }
      if (OffsetX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OffsetZ);
      }
      if (StopMode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StopMode);
      }
      if (BindMode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BindMode);
      }
      if (Scale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
      if (ScaleTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ScaleTime);
      }
      if (VisibleType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VisibleType);
      }
      if (BindName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BindName);
      }
      if (Duration != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectName);
      }
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (StopMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StopMode);
      }
      if (BindMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindMode);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (ScaleTime != 0F) {
        size += 1 + 4;
      }
      if (VisibleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VisibleType);
      }
      if (BindName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BindName);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EffectName = input.ReadString();
            break;
          }
          case 21: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 29: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 37: {
            OffsetZ = input.ReadFloat();
            break;
          }
          case 40: {
            StopMode = input.ReadInt32();
            break;
          }
          case 48: {
            BindMode = input.ReadInt32();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
          case 69: {
            ScaleTime = input.ReadFloat();
            break;
          }
          case 72: {
            VisibleType = input.ReadInt32();
            break;
          }
          case 82: {
            BindName = input.ReadString();
            break;
          }
          case 88: {
            Duration = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetColor : pb::IMessage {
    private static readonly pb::MessageParser<EventSetColor> _parser = new pb::MessageParser<EventSetColor>(() => new EventSetColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetColor> Parser { get { return _parser; } }

    /// <summary>Field number for the "colorRed" field.</summary>
    public const int ColorRedFieldNumber = 1;
    private int colorRed_;
    /// <summary>
    ///红色分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorRed {
      get { return colorRed_; }
      set {
        colorRed_ = value;
      }
    }

    /// <summary>Field number for the "colorGreen" field.</summary>
    public const int ColorGreenFieldNumber = 2;
    private int colorGreen_;
    /// <summary>
    ///绿色分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorGreen {
      get { return colorGreen_; }
      set {
        colorGreen_ = value;
      }
    }

    /// <summary>Field number for the "colorBlue" field.</summary>
    public const int ColorBlueFieldNumber = 3;
    private int colorBlue_;
    /// <summary>
    ///蓝色分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorBlue {
      get { return colorBlue_; }
      set {
        colorBlue_ = value;
      }
    }

    /// <summary>Field number for the "colorAlpha" field.</summary>
    public const int ColorAlphaFieldNumber = 4;
    private int colorAlpha_;
    /// <summary>
    ///Alpha分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorAlpha {
      get { return colorAlpha_; }
      set {
        colorAlpha_ = value;
      }
    }

    /// <summary>Field number for the "colorTime" field.</summary>
    public const int ColorTimeFieldNumber = 5;
    private int colorTime_;
    /// <summary>
    ///颜色持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorTime {
      get { return colorTime_; }
      set {
        colorTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColorRed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ColorRed);
      }
      if (ColorGreen != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColorGreen);
      }
      if (ColorBlue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ColorBlue);
      }
      if (ColorAlpha != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColorAlpha);
      }
      if (ColorTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ColorTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColorRed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorRed);
      }
      if (ColorGreen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorGreen);
      }
      if (ColorBlue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorBlue);
      }
      if (ColorAlpha != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorAlpha);
      }
      if (ColorTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ColorRed = input.ReadInt32();
            break;
          }
          case 16: {
            ColorGreen = input.ReadInt32();
            break;
          }
          case 24: {
            ColorBlue = input.ReadInt32();
            break;
          }
          case 32: {
            ColorAlpha = input.ReadInt32();
            break;
          }
          case 40: {
            ColorTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventLinkActionOn : pb::IMessage {
    private static readonly pb::MessageParser<EventLinkActionOn> _parser = new pb::MessageParser<EventLinkActionOn>(() => new EventLinkActionOn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventLinkActionOn> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionRequestIdx" field.</summary>
    public const int ActionRequestIdxFieldNumber = 1;
    private int actionRequestIdx_;
    /// <summary>
    ///连接开启动作索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionRequestIdx {
      get { return actionRequestIdx_; }
      set {
        actionRequestIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionRequestIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionRequestIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionRequestIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionRequestIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionRequestIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventLinkActionOff : pb::IMessage {
    private static readonly pb::MessageParser<EventLinkActionOff> _parser = new pb::MessageParser<EventLinkActionOff>(() => new EventLinkActionOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventLinkActionOff> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionRequestIdx" field.</summary>
    public const int ActionRequestIdxFieldNumber = 1;
    private int actionRequestIdx_;
    /// <summary>
    ///连接关闭动作索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionRequestIdx {
      get { return actionRequestIdx_; }
      set {
        actionRequestIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionRequestIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionRequestIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionRequestIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionRequestIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionRequestIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetVelocity : pb::IMessage {
    private static readonly pb::MessageParser<EventSetVelocity> _parser = new pb::MessageParser<EventSetVelocity>(() => new EventSetVelocity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetVelocity> Parser { get { return _parser; } }

    /// <summary>Field number for the "velocityX" field.</summary>
    public const int VelocityXFieldNumber = 1;
    private int velocityX_;
    /// <summary>
    ///速度X分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "velocityY" field.</summary>
    public const int VelocityYFieldNumber = 2;
    private int velocityY_;
    /// <summary>
    ///速度Y分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "velocityZ" field.</summary>
    public const int VelocityZFieldNumber = 3;
    private int velocityZ_;
    /// <summary>
    ///速度Z分量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VelocityX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VelocityX);
      }
      if (VelocityY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VelocityY);
      }
      if (VelocityZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VelocityZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VelocityX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityX);
      }
      if (VelocityY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityY);
      }
      if (VelocityZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VelocityX = input.ReadInt32();
            break;
          }
          case 16: {
            VelocityY = input.ReadInt32();
            break;
          }
          case 24: {
            VelocityZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetDirection : pb::IMessage {
    private static readonly pb::MessageParser<EventSetDirection> _parser = new pb::MessageParser<EventSetDirection>(() => new EventSetDirection());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetDirection> Parser { get { return _parser; } }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private int angle_;
    /// <summary>
    ///角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 2;
    private bool local_;
    /// <summary>
    ///相对于局部坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      if (Local != false) {
        output.WriteRawTag(16);
        output.WriteBool(Local);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Local != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 16: {
            Local = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetGravity : pb::IMessage {
    private static readonly pb::MessageParser<EventSetGravity> _parser = new pb::MessageParser<EventSetGravity>(() => new EventSetGravity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetGravity> Parser { get { return _parser; } }

    /// <summary>Field number for the "gravity" field.</summary>
    public const int GravityFieldNumber = 1;
    private int gravity_;
    /// <summary>
    ///设置重力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gravity {
      get { return gravity_; }
      set {
        gravity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gravity != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gravity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gravity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gravity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gravity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetHeightStatus : pb::IMessage {
    private static readonly pb::MessageParser<EventSetHeightStatus> _parser = new pb::MessageParser<EventSetHeightStatus>(() => new EventSetHeightStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetHeightStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "heightStatus" field.</summary>
    public const int HeightStatusFieldNumber = 1;
    private int heightStatus_;
    /// <summary>
    ///高度状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeightStatus {
      get { return heightStatus_; }
      set {
        heightStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeightStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeightStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeightStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeightStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetActionStatus : pb::IMessage {
    private static readonly pb::MessageParser<EventSetActionStatus> _parser = new pb::MessageParser<EventSetActionStatus>(() => new EventSetActionStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetActionStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "actionStatus" field.</summary>
    public const int ActionStatusFieldNumber = 1;
    private int actionStatus_;
    /// <summary>
    ///动作状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActionStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActionStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetFragmentStatus : pb::IMessage {
    private static readonly pb::MessageParser<EventSetFragmentStatus> _parser = new pb::MessageParser<EventSetFragmentStatus>(() => new EventSetFragmentStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetFragmentStatus> Parser { get { return _parser; } }

    /// <summary>Field number for the "fragmentStatus" field.</summary>
    public const int FragmentStatusFieldNumber = 1;
    private int fragmentStatus_;
    /// <summary>
    ///片段状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FragmentStatus {
      get { return fragmentStatus_; }
      set {
        fragmentStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FragmentStatus != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FragmentStatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FragmentStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FragmentStatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FragmentStatus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventAddUnit : pb::IMessage {
    private static readonly pb::MessageParser<EventAddUnit> _parser = new pb::MessageParser<EventAddUnit>(() => new EventAddUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAddUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///Unit Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private string actionId_ = "";
    /// <summary>
    ///动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 3;
    private int posX_;
    /// <summary>
    ///位置X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 4;
    private int posY_;
    /// <summary>
    ///位置Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 5;
    private int posZ_;
    /// <summary>
    ///位置Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 6;
    private int angle_;
    /// <summary>
    ///角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 7;
    private bool local_;
    /// <summary>
    ///局部坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 8;
    private int skillId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "comboAddParent" field.</summary>
    public const int ComboAddParentFieldNumber = 9;
    private bool comboAddParent_;
    /// <summary>
    ///ComboAddParent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ComboAddParent {
      get { return comboAddParent_; }
      set {
        comboAddParent_ = value;
      }
    }

    /// <summary>Field number for the "followParent" field.</summary>
    public const int FollowParentFieldNumber = 10;
    private bool followParent_;
    /// <summary>
    ///跟随父亲
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FollowParent {
      get { return followParent_; }
      set {
        followParent_ = value;
      }
    }

    /// <summary>Field number for the "randomRange" field.</summary>
    public const int RandomRangeFieldNumber = 11;
    private bool randomRange_;
    /// <summary>
    ///随机范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RandomRange {
      get { return randomRange_; }
      set {
        randomRange_ = value;
      }
    }

    /// <summary>Field number for the "randomMinWidth" field.</summary>
    public const int RandomMinWidthFieldNumber = 12;
    private int randomMinWidth_;
    /// <summary>
    ///随机宽度最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomMinWidth {
      get { return randomMinWidth_; }
      set {
        randomMinWidth_ = value;
      }
    }

    /// <summary>Field number for the "randomMaxWidth" field.</summary>
    public const int RandomMaxWidthFieldNumber = 13;
    private int randomMaxWidth_;
    /// <summary>
    ///随机宽度最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomMaxWidth {
      get { return randomMaxWidth_; }
      set {
        randomMaxWidth_ = value;
      }
    }

    /// <summary>Field number for the "randomMinDepth" field.</summary>
    public const int RandomMinDepthFieldNumber = 14;
    private int randomMinDepth_;
    /// <summary>
    ///随机深度最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomMinDepth {
      get { return randomMinDepth_; }
      set {
        randomMinDepth_ = value;
      }
    }

    /// <summary>Field number for the "randomMaxDepth" field.</summary>
    public const int RandomMaxDepthFieldNumber = 15;
    private int randomMaxDepth_;
    /// <summary>
    ///随机深度最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomMaxDepth {
      get { return randomMaxDepth_; }
      set {
        randomMaxDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ActionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionId);
      }
      if (PosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosZ);
      }
      if (Angle != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Angle);
      }
      if (Local != false) {
        output.WriteRawTag(56);
        output.WriteBool(Local);
      }
      if (SkillId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SkillId);
      }
      if (ComboAddParent != false) {
        output.WriteRawTag(72);
        output.WriteBool(ComboAddParent);
      }
      if (FollowParent != false) {
        output.WriteRawTag(80);
        output.WriteBool(FollowParent);
      }
      if (RandomRange != false) {
        output.WriteRawTag(88);
        output.WriteBool(RandomRange);
      }
      if (RandomMinWidth != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RandomMinWidth);
      }
      if (RandomMaxWidth != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(RandomMaxWidth);
      }
      if (RandomMinDepth != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RandomMinDepth);
      }
      if (RandomMaxDepth != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RandomMaxDepth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Local != false) {
        size += 1 + 1;
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (ComboAddParent != false) {
        size += 1 + 1;
      }
      if (FollowParent != false) {
        size += 1 + 1;
      }
      if (RandomRange != false) {
        size += 1 + 1;
      }
      if (RandomMinWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomMinWidth);
      }
      if (RandomMaxWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomMaxWidth);
      }
      if (RandomMinDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomMinDepth);
      }
      if (RandomMaxDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomMaxDepth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ActionId = input.ReadString();
            break;
          }
          case 24: {
            PosX = input.ReadInt32();
            break;
          }
          case 32: {
            PosY = input.ReadInt32();
            break;
          }
          case 40: {
            PosZ = input.ReadInt32();
            break;
          }
          case 48: {
            Angle = input.ReadInt32();
            break;
          }
          case 56: {
            Local = input.ReadBool();
            break;
          }
          case 64: {
            SkillId = input.ReadInt32();
            break;
          }
          case 72: {
            ComboAddParent = input.ReadBool();
            break;
          }
          case 80: {
            FollowParent = input.ReadBool();
            break;
          }
          case 88: {
            RandomRange = input.ReadBool();
            break;
          }
          case 96: {
            RandomMinWidth = input.ReadInt32();
            break;
          }
          case 104: {
            RandomMaxWidth = input.ReadInt32();
            break;
          }
          case 112: {
            RandomMinDepth = input.ReadInt32();
            break;
          }
          case 120: {
            RandomMaxDepth = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventListTargets : pb::IMessage {
    private static readonly pb::MessageParser<EventListTargets> _parser = new pb::MessageParser<EventListTargets>(() => new EventListTargets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventListTargets> Parser { get { return _parser; } }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private int left_;
    /// <summary>
    ///左边范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private int right_;
    /// <summary>
    ///右边范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "back" field.</summary>
    public const int BackFieldNumber = 3;
    private int back_;
    /// <summary>
    ///后面范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Back {
      get { return back_; }
      set {
        back_ = value;
      }
    }

    /// <summary>Field number for the "front" field.</summary>
    public const int FrontFieldNumber = 4;
    private int front_;
    /// <summary>
    ///前面范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Front {
      get { return front_; }
      set {
        front_ = value;
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 5;
    private int bottom_;
    /// <summary>
    ///底部范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bottom {
      get { return bottom_; }
      set {
        bottom_ = value;
      }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 6;
    private int top_;
    /// <summary>
    ///顶部范围
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Top {
      get { return top_; }
      set {
        top_ = value;
      }
    }

    /// <summary>Field number for the "listType" field.</summary>
    public const int ListTypeFieldNumber = 7;
    private global::ActData.ListTargetFrameType listType_ = 0;
    /// <summary>
    ///列举类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.ListTargetFrameType ListType {
      get { return listType_; }
      set {
        listType_ = value;
      }
    }

    /// <summary>Field number for the "listMode" field.</summary>
    public const int ListModeFieldNumber = 8;
    private global::ActData.ListTargetMode listMode_ = 0;
    /// <summary>
    ///列举方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.ListTargetMode ListMode {
      get { return listMode_; }
      set {
        listMode_ = value;
      }
    }

    /// <summary>Field number for the "fanRadius" field.</summary>
    public const int FanRadiusFieldNumber = 9;
    private int fanRadius_;
    /// <summary>
    ///扇形半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FanRadius {
      get { return fanRadius_; }
      set {
        fanRadius_ = value;
      }
    }

    /// <summary>Field number for the "fanAngle" field.</summary>
    public const int FanAngleFieldNumber = 10;
    private int fanAngle_;
    /// <summary>
    ///扇形角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FanAngle {
      get { return fanAngle_; }
      set {
        fanAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Left != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Left);
      }
      if (Right != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Right);
      }
      if (Back != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Back);
      }
      if (Front != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Front);
      }
      if (Bottom != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Bottom);
      }
      if (Top != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Top);
      }
      if (ListType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ListType);
      }
      if (ListMode != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ListMode);
      }
      if (FanRadius != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FanRadius);
      }
      if (FanAngle != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FanAngle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Left != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Left);
      }
      if (Right != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Right);
      }
      if (Back != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Back);
      }
      if (Front != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Front);
      }
      if (Bottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bottom);
      }
      if (Top != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Top);
      }
      if (ListType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ListType);
      }
      if (ListMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ListMode);
      }
      if (FanRadius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanRadius);
      }
      if (FanAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FanAngle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Left = input.ReadInt32();
            break;
          }
          case 16: {
            Right = input.ReadInt32();
            break;
          }
          case 24: {
            Back = input.ReadInt32();
            break;
          }
          case 32: {
            Front = input.ReadInt32();
            break;
          }
          case 40: {
            Bottom = input.ReadInt32();
            break;
          }
          case 48: {
            Top = input.ReadInt32();
            break;
          }
          case 56: {
            listType_ = (global::ActData.ListTargetFrameType) input.ReadEnum();
            break;
          }
          case 64: {
            listMode_ = (global::ActData.ListTargetMode) input.ReadEnum();
            break;
          }
          case 72: {
            FanRadius = input.ReadInt32();
            break;
          }
          case 80: {
            FanAngle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetVariable : pb::IMessage {
    private static readonly pb::MessageParser<EventSetVariable> _parser = new pb::MessageParser<EventSetVariable>(() => new EventSetVariable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetVariable> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private int slot_;
    /// <summary>
    ///变量槽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///变量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 3;
    private int maxValue_;
    /// <summary>
    ///最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slot);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (MaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Slot = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            MaxValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventAdjustVarible : pb::IMessage {
    private static readonly pb::MessageParser<EventAdjustVarible> _parser = new pb::MessageParser<EventAdjustVarible>(() => new EventAdjustVarible());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAdjustVarible> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private int slot_;
    /// <summary>
    ///变量槽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///变量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "append" field.</summary>
    public const int AppendFieldNumber = 3;
    private int append_;
    /// <summary>
    ///附加数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Append {
      get { return append_; }
      set {
        append_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Slot);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Append != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Append);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Append != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Append);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Slot = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 24: {
            Append = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventAttackTargets : pb::IMessage {
    private static readonly pb::MessageParser<EventAttackTargets> _parser = new pb::MessageParser<EventAttackTargets>(() => new EventAttackTargets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventAttackTargets> Parser { get { return _parser; } }

    /// <summary>Field number for the "hitIndex" field.</summary>
    public const int HitIndexFieldNumber = 1;
    private int hitIndex_;
    /// <summary>
    ///攻击定义索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitIndex {
      get { return hitIndex_; }
      set {
        hitIndex_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///攻击次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "random" field.</summary>
    public const int RandomFieldNumber = 3;
    private int random_;
    /// <summary>
    ///随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Random {
      get { return random_; }
      set {
        random_ = value;
      }
    }

    /// <summary>Field number for the "attackType" field.</summary>
    public const int AttackTypeFieldNumber = 4;
    private int attackType_;
    /// <summary>
    ///攻击目标的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HitIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Random != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Random);
      }
      if (AttackType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Random != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Random);
      }
      if (AttackType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HitIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Random = input.ReadInt32();
            break;
          }
          case 32: {
            AttackType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventGoToTargets : pb::IMessage {
    private static readonly pb::MessageParser<EventGoToTargets> _parser = new pb::MessageParser<EventGoToTargets>(() => new EventGoToTargets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventGoToTargets> Parser { get { return _parser; } }

    /// <summary>Field number for the "offsetX" field.</summary>
    public const int OffsetXFieldNumber = 1;
    private int offsetX_;
    /// <summary>
    ///偏移量X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "offsetY" field.</summary>
    public const int OffsetYFieldNumber = 2;
    private int offsetY_;
    /// <summary>
    ///偏移量Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "offsetZ" field.</summary>
    public const int OffsetZFieldNumber = 3;
    private int offsetZ_;
    /// <summary>
    ///偏移量Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    /// <summary>Field number for the "targetType" field.</summary>
    public const int TargetTypeFieldNumber = 4;
    private int targetType_;
    /// <summary>
    ///目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 5;
    private bool local_;
    /// <summary>
    ///局部坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "random" field.</summary>
    public const int RandomFieldNumber = 6;
    private bool random_;
    /// <summary>
    ///随机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Random {
      get { return random_; }
      set {
        random_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OffsetX);
      }
      if (OffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OffsetY);
      }
      if (OffsetZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OffsetZ);
      }
      if (TargetType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetType);
      }
      if (Local != false) {
        output.WriteRawTag(40);
        output.WriteBool(Local);
      }
      if (Random != false) {
        output.WriteRawTag(48);
        output.WriteBool(Random);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetX);
      }
      if (OffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetY);
      }
      if (OffsetZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetZ);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
      }
      if (Local != false) {
        size += 1 + 1;
      }
      if (Random != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            OffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            OffsetZ = input.ReadInt32();
            break;
          }
          case 32: {
            TargetType = input.ReadInt32();
            break;
          }
          case 40: {
            Local = input.ReadBool();
            break;
          }
          case 48: {
            Random = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSummonUnit : pb::IMessage {
    private static readonly pb::MessageParser<EventSummonUnit> _parser = new pb::MessageParser<EventSummonUnit>(() => new EventSummonUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSummonUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 1;
    private int race_;
    /// <summary>
    ///怪物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 2;
    private int posX_;
    /// <summary>
    ///位置X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 3;
    private int posY_;
    /// <summary>
    ///位置Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 4;
    private int posZ_;
    /// <summary>
    ///位置Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 5;
    private int angle_;
    /// <summary>
    ///角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "modifyAttr" field.</summary>
    public const int ModifyAttrFieldNumber = 6;
    private int modifyAttr_;
    /// <summary>
    ///修改父亲属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifyAttr {
      get { return modifyAttr_; }
      set {
        modifyAttr_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 7;
    private bool local_;
    /// <summary>
    ///局部坐标系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 8;
    private string actionId_ = "";
    /// <summary>
    ///起始动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Race != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Race);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosZ);
      }
      if (Angle != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Angle);
      }
      if (ModifyAttr != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ModifyAttr);
      }
      if (Local != false) {
        output.WriteRawTag(56);
        output.WriteBool(Local);
      }
      if (ActionId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ActionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (ModifyAttr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifyAttr);
      }
      if (Local != false) {
        size += 1 + 1;
      }
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Race = input.ReadInt32();
            break;
          }
          case 16: {
            PosX = input.ReadInt32();
            break;
          }
          case 24: {
            PosY = input.ReadInt32();
            break;
          }
          case 32: {
            PosZ = input.ReadInt32();
            break;
          }
          case 40: {
            Angle = input.ReadInt32();
            break;
          }
          case 48: {
            ModifyAttr = input.ReadInt32();
            break;
          }
          case 56: {
            Local = input.ReadBool();
            break;
          }
          case 66: {
            ActionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class EventControlUnit : pb::IMessage {
    private static readonly pb::MessageParser<EventControlUnit> _parser = new pb::MessageParser<EventControlUnit>(() => new EventControlUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventControlUnit> Parser { get { return _parser; } }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 1;
    private int race_;
    /// <summary>
    ///怪物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "actionId" field.</summary>
    public const int ActionIdFieldNumber = 2;
    private string actionId_ = "";
    /// <summary>
    ///动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionId {
      get { return actionId_; }
      set {
        actionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private int mode_;
    /// <summary>
    ///控制模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 4;
    private int skillId_;
    /// <summary>
    ///技能ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Race != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Race);
      }
      if (ActionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionId);
      }
      if (Mode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mode);
      }
      if (SkillId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (ActionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionId);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Race = input.ReadInt32();
            break;
          }
          case 18: {
            ActionId = input.ReadString();
            break;
          }
          case 24: {
            Mode = input.ReadInt32();
            break;
          }
          case 32: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventActionLevel : pb::IMessage {
    private static readonly pb::MessageParser<EventActionLevel> _parser = new pb::MessageParser<EventActionLevel>(() => new EventActionLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventActionLevel> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///动作等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventRotateOnHit : pb::IMessage {
    private static readonly pb::MessageParser<EventRotateOnHit> _parser = new pb::MessageParser<EventRotateOnHit>(() => new EventRotateOnHit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRotateOnHit> Parser { get { return _parser; } }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 1;
    private bool rotate_;
    /// <summary>
    ///受击后转向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rotate != false) {
        output.WriteRawTag(8);
        output.WriteBool(Rotate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rotate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rotate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EventHasCollision : pb::IMessage {
    private static readonly pb::MessageParser<EventHasCollision> _parser = new pb::MessageParser<EventHasCollision>(() => new EventHasCollision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventHasCollision> Parser { get { return _parser; } }

    /// <summary>Field number for the "hasCollision" field.</summary>
    public const int HasCollisionFieldNumber = 1;
    private bool hasCollision_;
    /// <summary>
    ///产生碰撞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCollision {
      get { return hasCollision_; }
      set {
        hasCollision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCollision != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasCollision);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCollision != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasCollision = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EventPlaySound : pb::IMessage {
    private static readonly pb::MessageParser<EventPlaySound> _parser = new pb::MessageParser<EventPlaySound>(() => new EventPlaySound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventPlaySound> Parser { get { return _parser; } }

    /// <summary>Field number for the "soundName" field.</summary>
    public const int SoundNameFieldNumber = 1;
    private string soundName_ = "";
    /// <summary>
    ///声音名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoundName {
      get { return soundName_; }
      set {
        soundName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkMatril" field.</summary>
    public const int CheckMatrilFieldNumber = 2;
    private bool checkMatril_;
    /// <summary>
    ///检查材质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckMatril {
      get { return checkMatril_; }
      set {
        checkMatril_ = value;
      }
    }

    /// <summary>Field number for the "soundIndex" field.</summary>
    public const int SoundIndexFieldNumber = 3;
    private int soundIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundIndex {
      get { return soundIndex_; }
      set {
        soundIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoundName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SoundName);
      }
      if (CheckMatril != false) {
        output.WriteRawTag(16);
        output.WriteBool(CheckMatril);
      }
      if (SoundIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SoundIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoundName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoundName);
      }
      if (CheckMatril != false) {
        size += 1 + 1;
      }
      if (SoundIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SoundName = input.ReadString();
            break;
          }
          case 16: {
            CheckMatril = input.ReadBool();
            break;
          }
          case 24: {
            SoundIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventStatusOn : pb::IMessage {
    private static readonly pb::MessageParser<EventStatusOn> _parser = new pb::MessageParser<EventStatusOn>(() => new EventStatusOn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStatusOn> Parser { get { return _parser; } }

    /// <summary>Field number for the "statusName" field.</summary>
    public const int StatusNameFieldNumber = 1;
    private string statusName_ = "";
    /// <summary>
    ///状态名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusName {
      get { return statusName_; }
      set {
        statusName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatusName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StatusName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class EventStatusOff : pb::IMessage {
    private static readonly pb::MessageParser<EventStatusOff> _parser = new pb::MessageParser<EventStatusOff>(() => new EventStatusOff());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventStatusOff> Parser { get { return _parser; } }

    /// <summary>Field number for the "statusName" field.</summary>
    public const int StatusNameFieldNumber = 1;
    private string statusName_ = "";
    /// <summary>
    ///状态名字	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusName {
      get { return statusName_; }
      set {
        statusName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatusName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StatusName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetVelocity_X : pb::IMessage {
    private static readonly pb::MessageParser<EventSetVelocity_X> _parser = new pb::MessageParser<EventSetVelocity_X>(() => new EventSetVelocity_X());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetVelocity_X> Parser { get { return _parser; } }

    /// <summary>Field number for the "velocityX" field.</summary>
    public const int VelocityXFieldNumber = 1;
    private int velocityX_;
    /// <summary>
    ///速度X分量			
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VelocityX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VelocityX);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VelocityX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityX);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VelocityX = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetVelocity_Y : pb::IMessage {
    private static readonly pb::MessageParser<EventSetVelocity_Y> _parser = new pb::MessageParser<EventSetVelocity_Y>(() => new EventSetVelocity_Y());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetVelocity_Y> Parser { get { return _parser; } }

    /// <summary>Field number for the "velocityY" field.</summary>
    public const int VelocityYFieldNumber = 1;
    private int velocityY_;
    /// <summary>
    ///速度Y分量			
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VelocityY != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VelocityY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VelocityY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VelocityY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventSetVelocity_Z : pb::IMessage {
    private static readonly pb::MessageParser<EventSetVelocity_Z> _parser = new pb::MessageParser<EventSetVelocity_Z>(() => new EventSetVelocity_Z());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSetVelocity_Z> Parser { get { return _parser; } }

    /// <summary>Field number for the "velocityZ" field.</summary>
    public const int VelocityZFieldNumber = 1;
    private int velocityZ_;
    /// <summary>
    ///速度Z分量		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VelocityZ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VelocityZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VelocityZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelocityZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VelocityZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventExeScript : pb::IMessage {
    private static readonly pb::MessageParser<EventExeScript> _parser = new pb::MessageParser<EventExeScript>(() => new EventExeScript());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventExeScript> Parser { get { return _parser; } }

    /// <summary>Field number for the "scriptCmd" field.</summary>
    public const int ScriptCmdFieldNumber = 1;
    private string scriptCmd_ = "";
    /// <summary>
    ///脚本命令	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScriptCmd {
      get { return scriptCmd_; }
      set {
        scriptCmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScriptCmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScriptCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScriptCmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ScriptCmd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class EventCameraEffect : pb::IMessage {
    private static readonly pb::MessageParser<EventCameraEffect> _parser = new pb::MessageParser<EventCameraEffect>(() => new EventCameraEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCameraEffect> Parser { get { return _parser; } }

    /// <summary>Field number for the "camerId" field.</summary>
    public const int CamerIdFieldNumber = 1;
    private int camerId_;
    /// <summary>
    ///相机ID	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CamerId {
      get { return camerId_; }
      set {
        camerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CamerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CamerId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CamerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CamerId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CamerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventChat : pb::IMessage {
    private static readonly pb::MessageParser<EventChat> _parser = new pb::MessageParser<EventChat>(() => new EventChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventChat> Parser { get { return _parser; } }

    /// <summary>Field number for the "charDataList" field.</summary>
    public const int CharDataListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActData.EventCharData> _repeated_charDataList_codec
        = pb::FieldCodec.ForMessage(10, global::ActData.EventCharData.Parser);
    private readonly pbc::RepeatedField<global::ActData.EventCharData> charDataList_ = new pbc::RepeatedField<global::ActData.EventCharData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.EventCharData> CharDataList {
      get { return charDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      charDataList_.WriteTo(output, _repeated_charDataList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += charDataList_.CalculateSize(_repeated_charDataList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            charDataList_.AddEntriesFrom(input, _repeated_charDataList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EventCharData : pb::IMessage {
    private static readonly pb::MessageParser<EventCharData> _parser = new pb::MessageParser<EventCharData>(() => new EventCharData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventCharData> Parser { get { return _parser; } }

    /// <summary>Field number for the "cahrID" field.</summary>
    public const int CahrIDFieldNumber = 1;
    private int cahrID_;
    /// <summary>
    ///喊话ID		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CahrID {
      get { return cahrID_; }
      set {
        cahrID_ = value;
      }
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 2;
    private int probability_;
    /// <summary>
    ///喊话概率		
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CahrID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CahrID);
      }
      if (Probability != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Probability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CahrID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CahrID);
      }
      if (Probability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Probability);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CahrID = input.ReadInt32();
            break;
          }
          case 16: {
            Probability = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventFaceTargets : pb::IMessage {
    private static readonly pb::MessageParser<EventFaceTargets> _parser = new pb::MessageParser<EventFaceTargets>(() => new EventFaceTargets());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventFaceTargets> Parser { get { return _parser; } }

    /// <summary>Field number for the "faceType" field.</summary>
    public const int FaceTypeFieldNumber = 1;
    private int faceType_;
    /// <summary>
    ///面向类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceType {
      get { return faceType_; }
      set {
        faceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FaceType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EventEarlyWarning : pb::IMessage {
    private static readonly pb::MessageParser<EventEarlyWarning> _parser = new pb::MessageParser<EventEarlyWarning>(() => new EventEarlyWarning());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventEarlyWarning> Parser { get { return _parser; } }

    /// <summary>Field number for the "warningType" field.</summary>
    public const int WarningTypeFieldNumber = 1;
    private global::ActData.EventEarlyWarning.Types.WarningType warningType_ = 0;
    /// <summary>
    ///预警框类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.EventEarlyWarning.Types.WarningType WarningType {
      get { return warningType_; }
      set {
        warningType_ = value;
      }
    }

    /// <summary>Field number for the "offsetX" field.</summary>
    public const int OffsetXFieldNumber = 2;
    private float offsetX_;
    /// <summary>
    ///偏移X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetX {
      get { return offsetX_; }
      set {
        offsetX_ = value;
      }
    }

    /// <summary>Field number for the "offsetY" field.</summary>
    public const int OffsetYFieldNumber = 3;
    private float offsetY_;
    /// <summary>
    ///偏移Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetY {
      get { return offsetY_; }
      set {
        offsetY_ = value;
      }
    }

    /// <summary>Field number for the "offsetZ" field.</summary>
    public const int OffsetZFieldNumber = 4;
    private float offsetZ_;
    /// <summary>
    ///偏移Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetZ {
      get { return offsetZ_; }
      set {
        offsetZ_ = value;
      }
    }

    /// <summary>Field number for the "bindMode" field.</summary>
    public const int BindModeFieldNumber = 5;
    private int bindMode_;
    /// <summary>
    ///绑定方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BindMode {
      get { return bindMode_; }
      set {
        bindMode_ = value;
      }
    }

    /// <summary>Field number for the "rotateX" field.</summary>
    public const int RotateXFieldNumber = 6;
    private int rotateX_;
    /// <summary>
    ///绕X轴旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateX {
      get { return rotateX_; }
      set {
        rotateX_ = value;
      }
    }

    /// <summary>Field number for the "rotateY" field.</summary>
    public const int RotateYFieldNumber = 7;
    private int rotateY_;
    /// <summary>
    ///绕Y轴旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateY {
      get { return rotateY_; }
      set {
        rotateY_ = value;
      }
    }

    /// <summary>Field number for the "rotateZ" field.</summary>
    public const int RotateZFieldNumber = 8;
    private int rotateZ_;
    /// <summary>
    ///绕Z轴旋转角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateZ {
      get { return rotateZ_; }
      set {
        rotateZ_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 9;
    private float size_;
    /// <summary>
    ///大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 10;
    private float duration_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WarningType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) WarningType);
      }
      if (OffsetX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OffsetX);
      }
      if (OffsetY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(OffsetY);
      }
      if (OffsetZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OffsetZ);
      }
      if (BindMode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BindMode);
      }
      if (RotateX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RotateX);
      }
      if (RotateY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RotateY);
      }
      if (RotateZ != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RotateZ);
      }
      if (Size != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Size);
      }
      if (Duration != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WarningType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WarningType);
      }
      if (OffsetX != 0F) {
        size += 1 + 4;
      }
      if (OffsetY != 0F) {
        size += 1 + 4;
      }
      if (OffsetZ != 0F) {
        size += 1 + 4;
      }
      if (BindMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindMode);
      }
      if (RotateX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateX);
      }
      if (RotateY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateY);
      }
      if (RotateZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateZ);
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            warningType_ = (global::ActData.EventEarlyWarning.Types.WarningType) input.ReadEnum();
            break;
          }
          case 21: {
            OffsetX = input.ReadFloat();
            break;
          }
          case 29: {
            OffsetY = input.ReadFloat();
            break;
          }
          case 37: {
            OffsetZ = input.ReadFloat();
            break;
          }
          case 40: {
            BindMode = input.ReadInt32();
            break;
          }
          case 48: {
            RotateX = input.ReadInt32();
            break;
          }
          case 56: {
            RotateY = input.ReadInt32();
            break;
          }
          case 64: {
            RotateZ = input.ReadInt32();
            break;
          }
          case 77: {
            Size = input.ReadFloat();
            break;
          }
          case 85: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EventEarlyWarning message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public enum WarningType {
        /// <summary>
        ///矩形
        /// </summary>
        Rectangle = 0,
        Rectangle2 = 1,
        Rectangle3 = 2,
        /// <summary>
        ///圆形
        /// </summary>
        Circle = 3,
        Circle2 = 4,
        Circle3 = 5,
        /// <summary>
        ///扇形
        /// </summary>
        Fan = 6,
        /// <summary>
        ///扇形
        /// </summary>
        Fan2 = 7,
      }

    }
    #endregion

  }

  public sealed class ActionInterrupt : pb::IMessage {
    private static readonly pb::MessageParser<ActionInterrupt> _parser = new pb::MessageParser<ActionInterrupt>(() => new ActionInterrupt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionInterrupt> Parser { get { return _parser; } }

    /// <summary>Field number for the "interruptName" field.</summary>
    public const int InterruptNameFieldNumber = 1;
    private string interruptName_ = "";
    /// <summary>
    ///------------------------------------------------动作切换------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InterruptName {
      get { return interruptName_; }
      set {
        interruptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionID" field.</summary>
    public const int ActionIDFieldNumber = 2;
    private string actionID_ = "";
    /// <summary>
    ///动作编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionID {
      get { return actionID_; }
      set {
        actionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actionCache" field.</summary>
    public const int ActionCacheFieldNumber = 3;
    private int actionCache_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionCache {
      get { return actionCache_; }
      set {
        actionCache_ = value;
      }
    }

    /// <summary>Field number for the "connectMode" field.</summary>
    public const int ConnectModeFieldNumber = 4;
    private int connectMode_;
    /// <summary>
    ///替换方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectMode {
      get { return connectMode_; }
      set {
        connectMode_ = value;
      }
    }

    /// <summary>Field number for the "connectTime" field.</summary>
    public const int ConnectTimeFieldNumber = 5;
    private int connectTime_;
    /// <summary>
    ///替换时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectTime {
      get { return connectTime_; }
      set {
        connectTime_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 6;
    private bool enabled_;
    /// <summary>
    ///是否启用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "enableBegin" field.</summary>
    public const int EnableBeginFieldNumber = 7;
    private int enableBegin_;
    /// <summary>
    ///启用起始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnableBegin {
      get { return enableBegin_; }
      set {
        enableBegin_ = value;
      }
    }

    /// <summary>Field number for the "enableEnd" field.</summary>
    public const int EnableEndFieldNumber = 8;
    private int enableEnd_;
    /// <summary>
    ///启用结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnableEnd {
      get { return enableEnd_; }
      set {
        enableEnd_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 9;
    private int skillID_;
    /// <summary>
    ///呼叫技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "checkSkillID" field.</summary>
    public const int CheckSkillIDFieldNumber = 10;
    private int checkSkillID_;
    /// <summary>
    ///检测技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckSkillID {
      get { return checkSkillID_; }
      set {
        checkSkillID_ = value;
      }
    }

    /// <summary>Field number for the "playSkill" field.</summary>
    public const int PlaySkillFieldNumber = 11;
    private bool playSkill_;
    /// <summary>
    ///使用技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlaySkill {
      get { return playSkill_; }
      set {
        playSkill_ = value;
      }
    }

    /// <summary>Field number for the "checkSkillLv" field.</summary>
    public const int CheckSkillLvFieldNumber = 12;
    private bool checkSkillLv_;
    /// <summary>
    ///检测技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckSkillLv {
      get { return checkSkillLv_; }
      set {
        checkSkillLv_ = value;
      }
    }

    /// <summary>Field number for the "skillLv" field.</summary>
    public const int SkillLvFieldNumber = 13;
    private int skillLv_;
    /// <summary>
    ///技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLv {
      get { return skillLv_; }
      set {
        skillLv_ = value;
      }
    }

    /// <summary>Field number for the "skillCompareType" field.</summary>
    public const int SkillCompareTypeFieldNumber = 14;
    private int skillCompareType_;
    /// <summary>
    ///技能比较条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillCompareType {
      get { return skillCompareType_; }
      set {
        skillCompareType_ = value;
      }
    }

    /// <summary>Field number for the "hurted" field.</summary>
    public const int HurtedFieldNumber = 15;
    private bool hurted_;
    /// <summary>
    ///------------------------------------------------收到伤害------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hurted {
      get { return hurted_; }
      set {
        hurted_ = value;
      }
    }

    /// <summary>Field number for the "hurtType" field.</summary>
    public const int HurtTypeFieldNumber = 16;
    private int hurtType_;
    /// <summary>
    ///受到伤害种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtType {
      get { return hurtType_; }
      set {
        hurtType_ = value;
      }
    }

    /// <summary>Field number for the "remoteOnly" field.</summary>
    public const int RemoteOnlyFieldNumber = 17;
    private bool remoteOnly_;
    /// <summary>
    ///仅远程攻击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoteOnly {
      get { return remoteOnly_; }
      set {
        remoteOnly_ = value;
      }
    }

    /// <summary>Field number for the "checkAllCondition" field.</summary>
    public const int CheckAllConditionFieldNumber = 18;
    private bool checkAllCondition_;
    /// <summary>
    ///切换条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckAllCondition {
      get { return checkAllCondition_; }
      set {
        checkAllCondition_ = value;
      }
    }

    /// <summary>Field number for the "conditionInterrupte" field.</summary>
    public const int ConditionInterrupteFieldNumber = 19;
    private bool conditionInterrupte_;
    /// <summary>
    ///条件中断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConditionInterrupte {
      get { return conditionInterrupte_; }
      set {
        conditionInterrupte_ = value;
      }
    }

    /// <summary>Field number for the "detectType" field.</summary>
    public const int DetectTypeFieldNumber = 20;
    private int detectType_;
    /// <summary>
    ///监控目标类型1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DetectType {
      get { return detectType_; }
      set {
        detectType_ = value;
      }
    }

    /// <summary>Field number for the "checkInput1" field.</summary>
    public const int CheckInput1FieldNumber = 21;
    private bool checkInput1_;
    /// <summary>
    ///------------------------------------------------动作输入1------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckInput1 {
      get { return checkInput1_; }
      set {
        checkInput1_ = value;
      }
    }

    /// <summary>Field number for the "inputKey1" field.</summary>
    public const int InputKey1FieldNumber = 22;
    private int inputKey1_;
    /// <summary>
    ///按钮1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputKey1 {
      get { return inputKey1_; }
      set {
        inputKey1_ = value;
      }
    }

    /// <summary>Field number for the "inputType1" field.</summary>
    public const int InputType1FieldNumber = 23;
    private int inputType1_;
    /// <summary>
    ///按钮状态1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputType1 {
      get { return inputType1_; }
      set {
        inputType1_ = value;
      }
    }

    /// <summary>Field number for the "checkInput2" field.</summary>
    public const int CheckInput2FieldNumber = 24;
    private bool checkInput2_;
    /// <summary>
    ///------------------------------------------------动作输入2------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckInput2 {
      get { return checkInput2_; }
      set {
        checkInput2_ = value;
      }
    }

    /// <summary>Field number for the "inputKey2" field.</summary>
    public const int InputKey2FieldNumber = 25;
    private int inputKey2_;
    /// <summary>
    ///按钮2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputKey2 {
      get { return inputKey2_; }
      set {
        inputKey2_ = value;
      }
    }

    /// <summary>Field number for the "inputType2" field.</summary>
    public const int InputType2FieldNumber = 26;
    private int inputType2_;
    /// <summary>
    ///按钮状态2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputType2 {
      get { return inputType2_; }
      set {
        inputType2_ = value;
      }
    }

    /// <summary>Field number for the "checkInput3" field.</summary>
    public const int CheckInput3FieldNumber = 27;
    private bool checkInput3_;
    /// <summary>
    ///------------------------------------------------动作输入3------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckInput3 {
      get { return checkInput3_; }
      set {
        checkInput3_ = value;
      }
    }

    /// <summary>Field number for the "inputKey3" field.</summary>
    public const int InputKey3FieldNumber = 28;
    private int inputKey3_;
    /// <summary>
    ///按钮3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputKey3 {
      get { return inputKey3_; }
      set {
        inputKey3_ = value;
      }
    }

    /// <summary>Field number for the "inputType3" field.</summary>
    public const int InputType3FieldNumber = 29;
    private int inputType3_;
    /// <summary>
    ///按钮状态3	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputType3 {
      get { return inputType3_; }
      set {
        inputType3_ = value;
      }
    }

    /// <summary>Field number for the "checkInput4" field.</summary>
    public const int CheckInput4FieldNumber = 30;
    private bool checkInput4_;
    /// <summary>
    ///------------------------------------------------动作输入4------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckInput4 {
      get { return checkInput4_; }
      set {
        checkInput4_ = value;
      }
    }

    /// <summary>Field number for the "inputKey4" field.</summary>
    public const int InputKey4FieldNumber = 31;
    private int inputKey4_;
    /// <summary>
    ///按钮4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputKey4 {
      get { return inputKey4_; }
      set {
        inputKey4_ = value;
      }
    }

    /// <summary>Field number for the "inputType4" field.</summary>
    public const int InputType4FieldNumber = 32;
    private int inputType4_;
    /// <summary>
    ///按钮状态4	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InputType4 {
      get { return inputType4_; }
      set {
        inputType4_ = value;
      }
    }

    /// <summary>Field number for the "noInput" field.</summary>
    public const int NoInputFieldNumber = 33;
    private bool noInput_;
    /// <summary>
    ///------------------------------------------------任何情况------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoInput {
      get { return noInput_; }
      set {
        noInput_ = value;
      }
    }

    /// <summary>Field number for the "touchGround" field.</summary>
    public const int TouchGroundFieldNumber = 34;
    private bool touchGround_;
    /// <summary>
    ///------------------------------------------------接触地面------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TouchGround {
      get { return touchGround_; }
      set {
        touchGround_ = value;
      }
    }

    /// <summary>Field number for the "touchWall" field.</summary>
    public const int TouchWallFieldNumber = 35;
    private bool touchWall_;
    /// <summary>
    ///------------------------------------------------接触墙壁------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TouchWall {
      get { return touchWall_; }
      set {
        touchWall_ = value;
      }
    }

    /// <summary>Field number for the "reachHighest" field.</summary>
    public const int ReachHighestFieldNumber = 36;
    private bool reachHighest_;
    /// <summary>
    ///------------------------------------------------到达最高点------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReachHighest {
      get { return reachHighest_; }
      set {
        reachHighest_ = value;
      }
    }

    /// <summary>Field number for the "unitDead" field.</summary>
    public const int UnitDeadFieldNumber = 37;
    private bool unitDead_;
    /// <summary>
    ///------------------------------------------------单位死亡------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnitDead {
      get { return unitDead_; }
      set {
        unitDead_ = value;
      }
    }

    /// <summary>Field number for the "hitTarget" field.</summary>
    public const int HitTargetFieldNumber = 38;
    private bool hitTarget_;
    /// <summary>
    ///------------------------------------------------击中目标------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitTarget {
      get { return hitTarget_; }
      set {
        hitTarget_ = value;
      }
    }

    /// <summary>Field number for the "checkHitTarget" field.</summary>
    public const int CheckHitTargetFieldNumber = 39;
    private bool checkHitTarget_;
    /// <summary>
    ///检测击中目标目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CheckHitTarget {
      get { return checkHitTarget_; }
      set {
        checkHitTarget_ = value;
      }
    }

    /// <summary>Field number for the "hitTargetID" field.</summary>
    public const int HitTargetIDFieldNumber = 40;
    private string hitTargetID_ = "";
    /// <summary>
    ///击中目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitTargetID {
      get { return hitTargetID_; }
      set {
        hitTargetID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endCapture" field.</summary>
    public const int EndCaptureFieldNumber = 41;
    private bool endCapture_;
    /// <summary>
    ///------------------------------------------------抓取结束------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndCapture {
      get { return endCapture_; }
      set {
        endCapture_ = value;
      }
    }

    /// <summary>Field number for the "detectVariable" field.</summary>
    public const int DetectVariableFieldNumber = 42;
    private bool detectVariable_;
    /// <summary>
    ///------------------------------------------------监控变量------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DetectVariable {
      get { return detectVariable_; }
      set {
        detectVariable_ = value;
      }
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 43;
    private int variable_;
    /// <summary>
    ///监控变量名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Variable {
      get { return variable_; }
      set {
        variable_ = value;
      }
    }

    /// <summary>Field number for the "compareType" field.</summary>
    public const int CompareTypeFieldNumber = 44;
    private int compareType_;
    /// <summary>
    ///监控变量比较条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareType {
      get { return compareType_; }
      set {
        compareType_ = value;
      }
    }

    /// <summary>Field number for the "compareValue" field.</summary>
    public const int CompareValueFieldNumber = 45;
    private int compareValue_;
    /// <summary>
    ///监控变量比较数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompareValue {
      get { return compareValue_; }
      set {
        compareValue_ = value;
      }
    }

    /// <summary>Field number for the "senseTarget" field.</summary>
    public const int SenseTargetFieldNumber = 46;
    private bool senseTarget_;
    /// <summary>
    ///------------------------------------------------感觉目标------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SenseTarget {
      get { return senseTarget_; }
      set {
        senseTarget_ = value;
      }
    }

    /// <summary>Field number for the "targetDistanceMin" field.</summary>
    public const int TargetDistanceMinFieldNumber = 47;
    private int targetDistanceMin_;
    /// <summary>
    ///目标距离最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetDistanceMin {
      get { return targetDistanceMin_; }
      set {
        targetDistanceMin_ = value;
      }
    }

    /// <summary>Field number for the "targetDistanceMax" field.</summary>
    public const int TargetDistanceMaxFieldNumber = 48;
    private int targetDistanceMax_;
    /// <summary>
    ///目标距离最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetDistanceMax {
      get { return targetDistanceMax_; }
      set {
        targetDistanceMax_ = value;
      }
    }

    /// <summary>Field number for the "targetLocalAngleMin" field.</summary>
    public const int TargetLocalAngleMinFieldNumber = 49;
    private int targetLocalAngleMin_;
    /// <summary>
    ///目标朝向夹角最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetLocalAngleMin {
      get { return targetLocalAngleMin_; }
      set {
        targetLocalAngleMin_ = value;
      }
    }

    /// <summary>Field number for the "targetLocalAngleMax" field.</summary>
    public const int TargetLocalAngleMaxFieldNumber = 50;
    private int targetLocalAngleMax_;
    /// <summary>
    ///目标朝向夹角最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetLocalAngleMax {
      get { return targetLocalAngleMax_; }
      set {
        targetLocalAngleMax_ = value;
      }
    }

    /// <summary>Field number for the "targetWorldAngleMin" field.</summary>
    public const int TargetWorldAngleMinFieldNumber = 51;
    private int targetWorldAngleMin_;
    /// <summary>
    ///目标位置夹角最小值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetWorldAngleMin {
      get { return targetWorldAngleMin_; }
      set {
        targetWorldAngleMin_ = value;
      }
    }

    /// <summary>Field number for the "targetWorldAngleMax" field.</summary>
    public const int TargetWorldAngleMaxFieldNumber = 52;
    private int targetWorldAngleMax_;
    /// <summary>
    ///目标位置夹角最大值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetWorldAngleMax {
      get { return targetWorldAngleMax_; }
      set {
        targetWorldAngleMax_ = value;
      }
    }

    /// <summary>Field number for the "checkTargetHeight" field.</summary>
    public const int CheckTargetHeightFieldNumber = 53;
    private int checkTargetHeight_;
    /// <summary>
    ///检查目标高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckTargetHeight {
      get { return checkTargetHeight_; }
      set {
        checkTargetHeight_ = value;
      }
    }

    /// <summary>Field number for the "buffListID" field.</summary>
    public const int BuffListIDFieldNumber = 54;
    private string buffListID_ = "";
    /// <summary>
    ///------------------------------------------------buff------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuffListID {
      get { return buffListID_; }
      set {
        buffListID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buffListState" field.</summary>
    public const int BuffListStateFieldNumber = 55;
    private string buffListState_ = "";
    /// <summary>
    ///中断buff状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuffListState {
      get { return buffListState_; }
      set {
        buffListState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkBuffID" field.</summary>
    public const int CheckBuffIDFieldNumber = 56;
    private int checkBuffID_;
    /// <summary>
    ///检测BufferID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckBuffID {
      get { return checkBuffID_; }
      set {
        checkBuffID_ = value;
      }
    }

    /// <summary>Field number for the "checkBuffState" field.</summary>
    public const int CheckBuffStateFieldNumber = 57;
    private int checkBuffState_;
    /// <summary>
    ///检测Buffer状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckBuffState {
      get { return checkBuffState_; }
      set {
        checkBuffState_ = value;
      }
    }

    /// <summary>Field number for the "checkAllBuff" field.</summary>
    public const int CheckAllBuffFieldNumber = 58;
    private int checkAllBuff_;
    /// <summary>
    ///检查所有Buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckAllBuff {
      get { return checkAllBuff_; }
      set {
        checkAllBuff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InterruptName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InterruptName);
      }
      if (ActionID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActionID);
      }
      if (ActionCache != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActionCache);
      }
      if (ConnectMode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConnectMode);
      }
      if (ConnectTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConnectTime);
      }
      if (Enabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Enabled);
      }
      if (EnableBegin != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EnableBegin);
      }
      if (EnableEnd != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EnableEnd);
      }
      if (SkillID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkillID);
      }
      if (CheckSkillID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CheckSkillID);
      }
      if (PlaySkill != false) {
        output.WriteRawTag(88);
        output.WriteBool(PlaySkill);
      }
      if (CheckSkillLv != false) {
        output.WriteRawTag(96);
        output.WriteBool(CheckSkillLv);
      }
      if (SkillLv != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SkillLv);
      }
      if (SkillCompareType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SkillCompareType);
      }
      if (Hurted != false) {
        output.WriteRawTag(120);
        output.WriteBool(Hurted);
      }
      if (HurtType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(HurtType);
      }
      if (RemoteOnly != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(RemoteOnly);
      }
      if (CheckAllCondition != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(CheckAllCondition);
      }
      if (ConditionInterrupte != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ConditionInterrupte);
      }
      if (DetectType != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DetectType);
      }
      if (CheckInput1 != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(CheckInput1);
      }
      if (InputKey1 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(InputKey1);
      }
      if (InputType1 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(InputType1);
      }
      if (CheckInput2 != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CheckInput2);
      }
      if (InputKey2 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(InputKey2);
      }
      if (InputType2 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(InputType2);
      }
      if (CheckInput3 != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CheckInput3);
      }
      if (InputKey3 != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(InputKey3);
      }
      if (InputType3 != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(InputType3);
      }
      if (CheckInput4 != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(CheckInput4);
      }
      if (InputKey4 != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(InputKey4);
      }
      if (InputType4 != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(InputType4);
      }
      if (NoInput != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(NoInput);
      }
      if (TouchGround != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(TouchGround);
      }
      if (TouchWall != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(TouchWall);
      }
      if (ReachHighest != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ReachHighest);
      }
      if (UnitDead != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(UnitDead);
      }
      if (HitTarget != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(HitTarget);
      }
      if (CheckHitTarget != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(CheckHitTarget);
      }
      if (HitTargetID.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(HitTargetID);
      }
      if (EndCapture != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(EndCapture);
      }
      if (DetectVariable != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(DetectVariable);
      }
      if (Variable != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Variable);
      }
      if (CompareType != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(CompareType);
      }
      if (CompareValue != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(CompareValue);
      }
      if (SenseTarget != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(SenseTarget);
      }
      if (TargetDistanceMin != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(TargetDistanceMin);
      }
      if (TargetDistanceMax != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(TargetDistanceMax);
      }
      if (TargetLocalAngleMin != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(TargetLocalAngleMin);
      }
      if (TargetLocalAngleMax != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(TargetLocalAngleMax);
      }
      if (TargetWorldAngleMin != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(TargetWorldAngleMin);
      }
      if (TargetWorldAngleMax != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(TargetWorldAngleMax);
      }
      if (CheckTargetHeight != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(CheckTargetHeight);
      }
      if (BuffListID.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(BuffListID);
      }
      if (BuffListState.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(BuffListState);
      }
      if (CheckBuffID != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(CheckBuffID);
      }
      if (CheckBuffState != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(CheckBuffState);
      }
      if (CheckAllBuff != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(CheckAllBuff);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InterruptName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InterruptName);
      }
      if (ActionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionID);
      }
      if (ActionCache != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionCache);
      }
      if (ConnectMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectMode);
      }
      if (ConnectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectTime);
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (EnableBegin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnableBegin);
      }
      if (EnableEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnableEnd);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (CheckSkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckSkillID);
      }
      if (PlaySkill != false) {
        size += 1 + 1;
      }
      if (CheckSkillLv != false) {
        size += 1 + 1;
      }
      if (SkillLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLv);
      }
      if (SkillCompareType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillCompareType);
      }
      if (Hurted != false) {
        size += 1 + 1;
      }
      if (HurtType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HurtType);
      }
      if (RemoteOnly != false) {
        size += 2 + 1;
      }
      if (CheckAllCondition != false) {
        size += 2 + 1;
      }
      if (ConditionInterrupte != false) {
        size += 2 + 1;
      }
      if (DetectType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DetectType);
      }
      if (CheckInput1 != false) {
        size += 2 + 1;
      }
      if (InputKey1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputKey1);
      }
      if (InputType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputType1);
      }
      if (CheckInput2 != false) {
        size += 2 + 1;
      }
      if (InputKey2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputKey2);
      }
      if (InputType2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputType2);
      }
      if (CheckInput3 != false) {
        size += 2 + 1;
      }
      if (InputKey3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputKey3);
      }
      if (InputType3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputType3);
      }
      if (CheckInput4 != false) {
        size += 2 + 1;
      }
      if (InputKey4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputKey4);
      }
      if (InputType4 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InputType4);
      }
      if (NoInput != false) {
        size += 2 + 1;
      }
      if (TouchGround != false) {
        size += 2 + 1;
      }
      if (TouchWall != false) {
        size += 2 + 1;
      }
      if (ReachHighest != false) {
        size += 2 + 1;
      }
      if (UnitDead != false) {
        size += 2 + 1;
      }
      if (HitTarget != false) {
        size += 2 + 1;
      }
      if (CheckHitTarget != false) {
        size += 2 + 1;
      }
      if (HitTargetID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitTargetID);
      }
      if (EndCapture != false) {
        size += 2 + 1;
      }
      if (DetectVariable != false) {
        size += 2 + 1;
      }
      if (Variable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Variable);
      }
      if (CompareType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompareType);
      }
      if (CompareValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CompareValue);
      }
      if (SenseTarget != false) {
        size += 2 + 1;
      }
      if (TargetDistanceMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetDistanceMin);
      }
      if (TargetDistanceMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetDistanceMax);
      }
      if (TargetLocalAngleMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetLocalAngleMin);
      }
      if (TargetLocalAngleMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetLocalAngleMax);
      }
      if (TargetWorldAngleMin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetWorldAngleMin);
      }
      if (TargetWorldAngleMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetWorldAngleMax);
      }
      if (CheckTargetHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CheckTargetHeight);
      }
      if (BuffListID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BuffListID);
      }
      if (BuffListState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BuffListState);
      }
      if (CheckBuffID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CheckBuffID);
      }
      if (CheckBuffState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CheckBuffState);
      }
      if (CheckAllBuff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CheckAllBuff);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            InterruptName = input.ReadString();
            break;
          }
          case 18: {
            ActionID = input.ReadString();
            break;
          }
          case 24: {
            ActionCache = input.ReadInt32();
            break;
          }
          case 32: {
            ConnectMode = input.ReadInt32();
            break;
          }
          case 40: {
            ConnectTime = input.ReadInt32();
            break;
          }
          case 48: {
            Enabled = input.ReadBool();
            break;
          }
          case 56: {
            EnableBegin = input.ReadInt32();
            break;
          }
          case 64: {
            EnableEnd = input.ReadInt32();
            break;
          }
          case 72: {
            SkillID = input.ReadInt32();
            break;
          }
          case 80: {
            CheckSkillID = input.ReadInt32();
            break;
          }
          case 88: {
            PlaySkill = input.ReadBool();
            break;
          }
          case 96: {
            CheckSkillLv = input.ReadBool();
            break;
          }
          case 104: {
            SkillLv = input.ReadInt32();
            break;
          }
          case 112: {
            SkillCompareType = input.ReadInt32();
            break;
          }
          case 120: {
            Hurted = input.ReadBool();
            break;
          }
          case 128: {
            HurtType = input.ReadInt32();
            break;
          }
          case 136: {
            RemoteOnly = input.ReadBool();
            break;
          }
          case 144: {
            CheckAllCondition = input.ReadBool();
            break;
          }
          case 152: {
            ConditionInterrupte = input.ReadBool();
            break;
          }
          case 160: {
            DetectType = input.ReadInt32();
            break;
          }
          case 168: {
            CheckInput1 = input.ReadBool();
            break;
          }
          case 176: {
            InputKey1 = input.ReadInt32();
            break;
          }
          case 184: {
            InputType1 = input.ReadInt32();
            break;
          }
          case 192: {
            CheckInput2 = input.ReadBool();
            break;
          }
          case 200: {
            InputKey2 = input.ReadInt32();
            break;
          }
          case 208: {
            InputType2 = input.ReadInt32();
            break;
          }
          case 216: {
            CheckInput3 = input.ReadBool();
            break;
          }
          case 224: {
            InputKey3 = input.ReadInt32();
            break;
          }
          case 232: {
            InputType3 = input.ReadInt32();
            break;
          }
          case 240: {
            CheckInput4 = input.ReadBool();
            break;
          }
          case 248: {
            InputKey4 = input.ReadInt32();
            break;
          }
          case 256: {
            InputType4 = input.ReadInt32();
            break;
          }
          case 264: {
            NoInput = input.ReadBool();
            break;
          }
          case 272: {
            TouchGround = input.ReadBool();
            break;
          }
          case 280: {
            TouchWall = input.ReadBool();
            break;
          }
          case 288: {
            ReachHighest = input.ReadBool();
            break;
          }
          case 296: {
            UnitDead = input.ReadBool();
            break;
          }
          case 304: {
            HitTarget = input.ReadBool();
            break;
          }
          case 312: {
            CheckHitTarget = input.ReadBool();
            break;
          }
          case 322: {
            HitTargetID = input.ReadString();
            break;
          }
          case 328: {
            EndCapture = input.ReadBool();
            break;
          }
          case 336: {
            DetectVariable = input.ReadBool();
            break;
          }
          case 344: {
            Variable = input.ReadInt32();
            break;
          }
          case 352: {
            CompareType = input.ReadInt32();
            break;
          }
          case 360: {
            CompareValue = input.ReadInt32();
            break;
          }
          case 368: {
            SenseTarget = input.ReadBool();
            break;
          }
          case 376: {
            TargetDistanceMin = input.ReadInt32();
            break;
          }
          case 384: {
            TargetDistanceMax = input.ReadInt32();
            break;
          }
          case 392: {
            TargetLocalAngleMin = input.ReadInt32();
            break;
          }
          case 400: {
            TargetLocalAngleMax = input.ReadInt32();
            break;
          }
          case 408: {
            TargetWorldAngleMin = input.ReadInt32();
            break;
          }
          case 416: {
            TargetWorldAngleMax = input.ReadInt32();
            break;
          }
          case 424: {
            CheckTargetHeight = input.ReadInt32();
            break;
          }
          case 434: {
            BuffListID = input.ReadString();
            break;
          }
          case 442: {
            BuffListState = input.ReadString();
            break;
          }
          case 448: {
            CheckBuffID = input.ReadInt32();
            break;
          }
          case 456: {
            CheckBuffState = input.ReadInt32();
            break;
          }
          case 464: {
            CheckAllBuff = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AttackDef : pb::IMessage {
    private static readonly pb::MessageParser<AttackDef> _parser = new pb::MessageParser<AttackDef>(() => new AttackDef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackDef> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///击中定义ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///当前攻击定义名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enableSkillBuffer" field.</summary>
    public const int EnableSkillBufferFieldNumber = 3;
    private int enableSkillBuffer_;
    /// <summary>
    ///启用技能的buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnableSkillBuffer {
      get { return enableSkillBuffer_; }
      set {
        enableSkillBuffer_ = value;
      }
    }

    /// <summary>Field number for the "alignmentTarget" field.</summary>
    public const int AlignmentTargetFieldNumber = 4;
    private int alignmentTarget_;
    /// <summary>
    ///对齐攻击目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlignmentTarget {
      get { return alignmentTarget_; }
      set {
        alignmentTarget_ = value;
      }
    }

    /// <summary>Field number for the "eventOnly" field.</summary>
    public const int EventOnlyFieldNumber = 5;
    private int eventOnly_;
    /// <summary>
    ///-------------------------------------------------------击中判定----------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventOnly {
      get { return eventOnly_; }
      set {
        eventOnly_ = value;
      }
    }

    /// <summary>Field number for the "isCapture" field.</summary>
    public const int IsCaptureFieldNumber = 6;
    private int isCapture_;
    /// <summary>
    ///是否抓取,该攻击定义是否为抓取技能，0为不是，1为抓取技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsCapture {
      get { return isCapture_; }
      set {
        isCapture_ = value;
      }
    }

    /// <summary>Field number for the "keepLocal" field.</summary>
    public const int KeepLocalFieldNumber = 7;
    private int keepLocal_;
    /// <summary>
    ///相对位移,攻击定义相对施放者位移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepLocal {
      get { return keepLocal_; }
      set {
        keepLocal_ = value;
      }
    }

    /// <summary>Field number for the "pathInterpolation" field.</summary>
    public const int PathInterpolationFieldNumber = 8;
    private int pathInterpolation_;
    /// <summary>
    ///路径插值,0为线性插值，1为贝塞尔曲线插值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PathInterpolation {
      get { return pathInterpolation_; }
      set {
        pathInterpolation_ = value;
      }
    }

    /// <summary>Field number for the "rotateSpeed" field.</summary>
    public const int RotateSpeedFieldNumber = 9;
    private int rotateSpeed_;
    /// <summary>
    ///旋转速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RotateSpeed {
      get { return rotateSpeed_; }
      set {
        rotateSpeed_ = value;
      }
    }

    /// <summary>Field number for the "attachUnitRotate" field.</summary>
    public const int AttachUnitRotateFieldNumber = 10;
    private int attachUnitRotate_;
    /// <summary>
    ///抓取单位跟随旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachUnitRotate {
      get { return attachUnitRotate_; }
      set {
        attachUnitRotate_ = value;
      }
    }

    /// <summary>Field number for the "attachUnitKeepLocal" field.</summary>
    public const int AttachUnitKeepLocalFieldNumber = 11;
    private int attachUnitKeepLocal_;
    /// <summary>
    ///抓取单位KeepLocal
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachUnitKeepLocal {
      get { return attachUnitKeepLocal_; }
      set {
        attachUnitKeepLocal_ = value;
      }
    }

    /// <summary>Field number for the "attachUnitSpeedY" field.</summary>
    public const int AttachUnitSpeedYFieldNumber = 12;
    private int attachUnitSpeedY_;
    /// <summary>
    ///抓取后竖直方向上的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachUnitSpeedY {
      get { return attachUnitSpeedY_; }
      set {
        attachUnitSpeedY_ = value;
      }
    }

    /// <summary>Field number for the "attachUnitSpeedCenter" field.</summary>
    public const int AttachUnitSpeedCenterFieldNumber = 13;
    private int attachUnitSpeedCenter_;
    /// <summary>
    ///抓取后移向中心的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttachUnitSpeedCenter {
      get { return attachUnitSpeedCenter_; }
      set {
        attachUnitSpeedCenter_ = value;
      }
    }

    /// <summary>Field number for the "maxCountOuteDate" field.</summary>
    public const int MaxCountOuteDateFieldNumber = 14;
    private int maxCountOuteDate_;
    /// <summary>
    ///达到最大次数后消失,达到最大次数后消失，0不消失,1消失
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCountOuteDate {
      get { return maxCountOuteDate_; }
      set {
        maxCountOuteDate_ = value;
      }
    }

    /// <summary>Field number for the "coolDownTime" field.</summary>
    public const int CoolDownTimeFieldNumber = 15;
    private uint coolDownTime_;
    /// <summary>
    ///攻击定义的CD时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CoolDownTime {
      get { return coolDownTime_; }
      set {
        coolDownTime_ = value;
      }
    }

    /// <summary>Field number for the "ownerActionChange" field.</summary>
    public const int OwnerActionChangeFieldNumber = 16;
    private int ownerActionChange_;
    /// <summary>
    ///释放者动作改变
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerActionChange {
      get { return ownerActionChange_; }
      set {
        ownerActionChange_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 17;
    private global::ActData.RaceType race_ = 0;
    /// <summary>
    ///释放者动作改变
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.RaceType Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "raceInt" field.</summary>
    public const int RaceIntFieldNumber = 18;
    private int raceInt_;
    /// <summary>
    ///(int)race
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaceInt {
      get { return raceInt_; }
      set {
        raceInt_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 19;
    private int delay_;
    /// <summary>
    ///延迟时间,该攻击定义产生之后，延迟该时间之后开始计算伤害。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "triggerTime" field.</summary>
    public const int TriggerTimeFieldNumber = 20;
    private int triggerTime_;
    /// <summary>
    ///触发时间,事件触发的时间点(百分比)，数值为[0-100-200]，[0-100]期间是处于动画时间段里面的百分比，[100-200]期间是出于POSE时间段里面的百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerTime {
      get { return triggerTime_; }
      set {
        triggerTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 21;
    private int duration_;
    /// <summary>
    ///持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "movingSpeed" field.</summary>
    public const int MovingSpeedFieldNumber = 22;
    private global::ActData.Vector3 movingSpeed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 MovingSpeed {
      get { return movingSpeed_; }
      set {
        movingSpeed_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 23;
    private static readonly pb::FieldCodec<global::ActData.AttackDef.Types.PathNode> _repeated_path_codec
        = pb::FieldCodec.ForMessage(186, global::ActData.AttackDef.Types.PathNode.Parser);
    private readonly pbc::RepeatedField<global::ActData.AttackDef.Types.PathNode> path_ = new pbc::RepeatedField<global::ActData.AttackDef.Types.PathNode>();
    /// <summary>
    ///移动路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.AttackDef.Types.PathNode> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "hitCount" field.</summary>
    public const int HitCountFieldNumber = 24;
    private int hitCount_;
    /// <summary>
    ///攻击频率,在攻击定义的生存周期里面，改攻击判定的总共的攻击次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitCount {
      get { return hitCount_; }
      set {
        hitCount_ = value;
      }
    }

    /// <summary>Field number for the "passNum" field.</summary>
    public const int PassNumFieldNumber = 25;
    private int passNum_;
    /// <summary>
    ///最大穿透次数,一个攻击判定对[一个单位]的伤害判断次数，超过该次数攻击定义将对改单位无效。默认值为-1代表无穿透次数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassNum {
      get { return passNum_; }
      set {
        passNum_ = value;
      }
    }

    /// <summary>Field number for the "maxHitCount" field.</summary>
    public const int MaxHitCountFieldNumber = 26;
    private int maxHitCount_;
    /// <summary>
    ///最大伤害次数,一个攻击判定最大的攻击次数，累加到这个值的时候，该攻击判定将会被终止。默认值为-1代表无最大击中次数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHitCount {
      get { return maxHitCount_; }
      set {
        maxHitCount_ = value;
      }
    }

    /// <summary>Field number for the "frameSize" field.</summary>
    public const int FrameSizeFieldNumber = 27;
    private global::ActData.Vector3 frameSize_;
    /// <summary>
    ///技能击中框,技能击中框(长方体分别对应:宽,高,长; 圆柱体前2个参数分别为半径和高度，第三个无效;圆环为内半径,外半径,高度)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 FrameSize {
      get { return frameSize_; }
      set {
        frameSize_ = value;
      }
    }

    /// <summary>Field number for the "frameFinalFactor" field.</summary>
    public const int FrameFinalFactorFieldNumber = 28;
    private global::ActData.Vector3 frameFinalFactor_;
    /// <summary>
    ///技能框缩放比例,最终的技能框相对于初始技能框架的缩放比例:圆柱为半径，高度;圆环为内半径,外半径,高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 FrameFinalFactor {
      get { return frameFinalFactor_; }
      set {
        frameFinalFactor_ = value;
      }
    }

    /// <summary>Field number for the "framType" field.</summary>
    public const int FramTypeFieldNumber = 29;
    private global::ActData.HitDefnitionFramType framType_ = 0;
    /// <summary>
    ///技能击中框的类型,技能击中框的类型:CuboidType为长方体;CylinderType为立方体; RingType:为圆环形; SomatoType:为受击体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.HitDefnitionFramType FramType {
      get { return framType_; }
      set {
        framType_ = value;
      }
    }

    /// <summary>Field number for the "frameType_Int" field.</summary>
    public const int FrameTypeIntFieldNumber = 30;
    private uint frameTypeInt_;
    /// <summary>
    ///(int)mFramType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameTypeInt {
      get { return frameTypeInt_; }
      set {
        frameTypeInt_ = value;
      }
    }

    /// <summary>Field number for the "attackType" field.</summary>
    public const int AttackTypeFieldNumber = 31;
    private global::ActData.AttackFrame attackType_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AttackFrame AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 32;
    private global::ActData.Vector3 offset_;
    /// <summary>
    ///偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "heightStatusHitMask" field.</summary>
    public const int HeightStatusHitMaskFieldNumber = 33;
    private int heightStatusHitMask_;
    /// <summary>
    ///有效击中高度组合(位运算)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeightStatusHitMask {
      get { return heightStatusHitMask_; }
      set {
        heightStatusHitMask_ = value;
      }
    }

    /// <summary>Field number for the "heightStatusHitMaskInt" field.</summary>
    public const int HeightStatusHitMaskIntFieldNumber = 34;
    private int heightStatusHitMaskInt_;
    /// <summary>
    ///(int)heightStatusHitMask
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeightStatusHitMaskInt {
      get { return heightStatusHitMaskInt_; }
      set {
        heightStatusHitMaskInt_ = value;
      }
    }

    /// <summary>Field number for the "isRemoteAttacks" field.</summary>
    public const int IsRemoteAttacksFieldNumber = 35;
    private int isRemoteAttacks_;
    /// <summary>
    ///---------------------------------------------------------击中结果-------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsRemoteAttacks {
      get { return isRemoteAttacks_; }
      set {
        isRemoteAttacks_ = value;
      }
    }

    /// <summary>Field number for the "attackLevel" field.</summary>
    public const int AttackLevelFieldNumber = 36;
    private int attackLevel_;
    /// <summary>
    ///攻击等级,攻击者的攻击等级，攻击等级小于受击者的动作等级的时候，受击者为霸体状态。默认值为10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackLevel {
      get { return attackLevel_; }
      set {
        attackLevel_ = value;
      }
    }

    /// <summary>Field number for the "fllowReleaser" field.</summary>
    public const int FllowReleaserFieldNumber = 37;
    private int fllowReleaser_;
    /// <summary>
    ///跟随释放者移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FllowReleaser {
      get { return fllowReleaser_; }
      set {
        fllowReleaser_ = value;
      }
    }

    /// <summary>Field number for the "skillAffectAttackLevel" field.</summary>
    public const int SkillAffectAttackLevelFieldNumber = 38;
    private int skillAffectAttackLevel_;
    /// <summary>
    ///技能影响攻击定义等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillAffectAttackLevel {
      get { return skillAffectAttackLevel_; }
      set {
        skillAffectAttackLevel_ = value;
      }
    }

    /// <summary>Field number for the "attackerStraightTime" field.</summary>
    public const int AttackerStraightTimeFieldNumber = 39;
    private int attackerStraightTime_;
    /// <summary>
    ///攻击者的硬直时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerStraightTime {
      get { return attackerStraightTime_; }
      set {
        attackerStraightTime_ = value;
      }
    }

    /// <summary>Field number for the "targetStayAir" field.</summary>
    public const int TargetStayAirFieldNumber = 40;
    private int targetStayAir_;
    /// <summary>
    ///目标滞空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetStayAir {
      get { return targetStayAir_; }
      set {
        targetStayAir_ = value;
      }
    }

    /// <summary>Field number for the "attackerLash" field.</summary>
    public const int AttackerLashFieldNumber = 41;
    private global::ActData.Vector3 attackerLash_;
    /// <summary>
    ///攻击者的冲击速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 AttackerLash {
      get { return attackerLash_; }
      set {
        attackerLash_ = value;
      }
    }

    /// <summary>Field number for the "attackerTime" field.</summary>
    public const int AttackerTimeFieldNumber = 42;
    private int attackerTime_;
    /// <summary>
    ///攻击者冲击时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerTime {
      get { return attackerTime_; }
      set {
        attackerTime_ = value;
      }
    }

    /// <summary>Field number for the "attackeeStraightTime" field.</summary>
    public const int AttackeeStraightTimeFieldNumber = 43;
    private int attackeeStraightTime_;
    /// <summary>
    ///受击者的硬直时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackeeStraightTime {
      get { return attackeeStraightTime_; }
      set {
        attackeeStraightTime_ = value;
      }
    }

    /// <summary>Field number for the "hitResult" field.</summary>
    public const int HitResultFieldNumber = 44;
    private global::ActData.HitResultType hitResult_ = 0;
    /// <summary>
    ///击中结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.HitResultType HitResult {
      get { return hitResult_; }
      set {
        hitResult_ = value;
      }
    }

    /// <summary>Field number for the "groundHit" field.</summary>
    public const int GroundHitFieldNumber = 45;
    private global::ActData.AttackDef.Types.HitResultData groundHit_;
    /// <summary>
    ///倒地受击数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AttackDef.Types.HitResultData GroundHit {
      get { return groundHit_; }
      set {
        groundHit_ = value;
      }
    }

    /// <summary>Field number for the "lowAirHit" field.</summary>
    public const int LowAirHitFieldNumber = 46;
    private global::ActData.AttackDef.Types.HitResultData lowAirHit_;
    /// <summary>
    ///低空受击数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AttackDef.Types.HitResultData LowAirHit {
      get { return lowAirHit_; }
      set {
        lowAirHit_ = value;
      }
    }

    /// <summary>Field number for the "highAirHit" field.</summary>
    public const int HighAirHitFieldNumber = 47;
    private global::ActData.AttackDef.Types.HitResultData highAirHit_;
    /// <summary>
    ///低空受击数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.AttackDef.Types.HitResultData HighAirHit {
      get { return highAirHit_; }
      set {
        highAirHit_ = value;
      }
    }

    /// <summary>Field number for the "attackeeLash" field.</summary>
    public const int AttackeeLashFieldNumber = 48;
    private global::ActData.Vector3 attackeeLash_;
    /// <summary>
    ///受击者冲击速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 AttackeeLash {
      get { return attackeeLash_; }
      set {
        attackeeLash_ = value;
      }
    }

    /// <summary>Field number for the "attackeeTime" field.</summary>
    public const int AttackeeTimeFieldNumber = 49;
    private int attackeeTime_;
    /// <summary>
    ///受击者冲击时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackeeTime {
      get { return attackeeTime_; }
      set {
        attackeeTime_ = value;
      }
    }

    /// <summary>Field number for the "buffID" field.</summary>
    public const int BuffIDFieldNumber = 50;
    private string buffID_ = "";
    /// <summary>
    ///BuffID,追加Buff的ID号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuffID {
      get { return buffID_; }
      set {
        buffID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 51;
    private global::ActData.DamageType damageType_ = 0;
    /// <summary>
    ///击中伤害类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.DamageType DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 52;
    private int damage_;
    /// <summary>
    ///受击者冲击时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "initAbility" field.</summary>
    public const int InitAbilityFieldNumber = 53;
    private int initAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InitAbility {
      get { return initAbility_; }
      set {
        initAbility_ = value;
      }
    }

    /// <summary>Field number for the "hitAbility" field.</summary>
    public const int HitAbilityFieldNumber = 54;
    private int hitAbility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitAbility {
      get { return hitAbility_; }
      set {
        hitAbility_ = value;
      }
    }

    /// <summary>Field number for the "holdOffsetOpen" field.</summary>
    public const int HoldOffsetOpenFieldNumber = 55;
    private int holdOffsetOpen_;
    /// <summary>
    ///抓取偏移开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HoldOffsetOpen {
      get { return holdOffsetOpen_; }
      set {
        holdOffsetOpen_ = value;
      }
    }

    /// <summary>Field number for the "holdOffset" field.</summary>
    public const int HoldOffsetFieldNumber = 56;
    private global::ActData.Vector3 holdOffset_;
    /// <summary>
    ///抓取偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 HoldOffset {
      get { return holdOffset_; }
      set {
        holdOffset_ = value;
      }
    }

    /// <summary>Field number for the "hitedEffect" field.</summary>
    public const int HitedEffectFieldNumber = 57;
    private string hitedEffect_ = "";
    /// <summary>
    ///--------------------------------------------------------外观----------------------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitedEffect {
      get { return hitedEffect_; }
      set {
        hitedEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hitedEffectScale" field.</summary>
    public const int HitedEffectScaleFieldNumber = 58;
    private uint hitedEffectScale_;
    /// <summary>
    ///击中特效缩放,击中特效缩放,基数为100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitedEffectScale {
      get { return hitedEffectScale_; }
      set {
        hitedEffectScale_ = value;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 59;
    private string script_ = "";
    /// <summary>
    ///击中脚本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Script {
      get { return script_; }
      set {
        script_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hitedEffectOffset" field.</summary>
    public const int HitedEffectOffsetFieldNumber = 60;
    private global::ActData.Vector3 hitedEffectOffset_;
    /// <summary>
    ///站立击中特效偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 HitedEffectOffset {
      get { return hitedEffectOffset_; }
      set {
        hitedEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "groundHitedEffectOffset" field.</summary>
    public const int GroundHitedEffectOffsetFieldNumber = 61;
    private global::ActData.Vector3 groundHitedEffectOffset_;
    /// <summary>
    ///倒地击中特效偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 GroundHitedEffectOffset {
      get { return groundHitedEffectOffset_; }
      set {
        groundHitedEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "lowAirHitedEffectOffset" field.</summary>
    public const int LowAirHitedEffectOffsetFieldNumber = 62;
    private global::ActData.Vector3 lowAirHitedEffectOffset_;
    /// <summary>
    ///低空击中特效偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 LowAirHitedEffectOffset {
      get { return lowAirHitedEffectOffset_; }
      set {
        lowAirHitedEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "highAirHitedEffectOffset" field.</summary>
    public const int HighAirHitedEffectOffsetFieldNumber = 63;
    private global::ActData.Vector3 highAirHitedEffectOffset_;
    /// <summary>
    ///高空击中特效偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 HighAirHitedEffectOffset {
      get { return highAirHitedEffectOffset_; }
      set {
        highAirHitedEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "hitedSound" field.</summary>
    public const int HitedSoundFieldNumber = 64;
    private string hitedSound_ = "";
    /// <summary>
    ///击中音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitedSound {
      get { return hitedSound_; }
      set {
        hitedSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hitedSoundIndex" field.</summary>
    public const int HitedSoundIndexFieldNumber = 65;
    private int hitedSoundIndex_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitedSoundIndex {
      get { return hitedSoundIndex_; }
      set {
        hitedSoundIndex_ = value;
      }
    }

    /// <summary>Field number for the "selfEffect" field.</summary>
    public const int SelfEffectFieldNumber = 66;
    private string selfEffect_ = "";
    /// <summary>
    ///本体特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelfEffect {
      get { return selfEffect_; }
      set {
        selfEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selfEffectScale" field.</summary>
    public const int SelfEffectScaleFieldNumber = 67;
    private uint selfEffectScale_;
    /// <summary>
    ///本体特效缩放,本体特效缩放,基数为100
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SelfEffectScale {
      get { return selfEffectScale_; }
      set {
        selfEffectScale_ = value;
      }
    }

    /// <summary>Field number for the "seflEffectNT" field.</summary>
    public const int SeflEffectNTFieldNumber = 68;
    private int seflEffectNT_;
    /// <summary>
    ///本体特效NT,1=特效随动作中断不中断，播完为止,0=随动作中断而中断特效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeflEffectNT {
      get { return seflEffectNT_; }
      set {
        seflEffectNT_ = value;
      }
    }

    /// <summary>Field number for the "effectTriggerTime" field.</summary>
    public const int EffectTriggerTimeFieldNumber = 69;
    private int effectTriggerTime_;
    /// <summary>
    ///本体特效起效时间,本体特效起效时间(只对本体特效有效)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectTriggerTime {
      get { return effectTriggerTime_; }
      set {
        effectTriggerTime_ = value;
      }
    }

    /// <summary>Field number for the "selfEffectOffset" field.</summary>
    public const int SelfEffectOffsetFieldNumber = 70;
    private global::ActData.Vector3 selfEffectOffset_;
    /// <summary>
    ///本体特效偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 SelfEffectOffset {
      get { return selfEffectOffset_; }
      set {
        selfEffectOffset_ = value;
      }
    }

    /// <summary>Field number for the "baseGround" field.</summary>
    public const int BaseGroundFieldNumber = 71;
    private int baseGround_;
    /// <summary>
    ///是否相对地面,0=相对击中框中心偏移播放，1=特效在地面播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseGround {
      get { return baseGround_; }
      set {
        baseGround_ = value;
      }
    }

    /// <summary>Field number for the "selfSound" field.</summary>
    public const int SelfSoundFieldNumber = 72;
    private string selfSound_ = "";
    /// <summary>
    ///本体音效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelfSound {
      get { return selfSound_; }
      set {
        selfSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "soundTriggerTime" field.</summary>
    public const int SoundTriggerTimeFieldNumber = 73;
    private int soundTriggerTime_;
    /// <summary>
    ///本体音效起效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoundTriggerTime {
      get { return soundTriggerTime_; }
      set {
        soundTriggerTime_ = value;
      }
    }

    /// <summary>Field number for the "weaponType" field.</summary>
    public const int WeaponTypeFieldNumber = 74;
    private global::ActData.WeaponType weaponType_ = 0;
    /// <summary>
    ///攻击定义的材质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.WeaponType WeaponType {
      get { return weaponType_; }
      set {
        weaponType_ = value;
      }
    }

    /// <summary>Field number for the "weaponType_Int" field.</summary>
    public const int WeaponTypeIntFieldNumber = 75;
    private int weaponTypeInt_;
    /// <summary>
    ///(int)weaponType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponTypeInt {
      get { return weaponTypeInt_; }
      set {
        weaponTypeInt_ = value;
      }
    }

    /// <summary>Field number for the "hitedEffectDuration" field.</summary>
    public const int HitedEffectDurationFieldNumber = 76;
    private int hitedEffectDuration_;
    /// <summary>
    ///击中特效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitedEffectDuration {
      get { return hitedEffectDuration_; }
      set {
        hitedEffectDuration_ = value;
      }
    }

    /// <summary>Field number for the "selfEffectDuration" field.</summary>
    public const int SelfEffectDurationFieldNumber = 77;
    private int selfEffectDuration_;
    /// <summary>
    ///本体特效时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfEffectDuration {
      get { return selfEffectDuration_; }
      set {
        selfEffectDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (EnableSkillBuffer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EnableSkillBuffer);
      }
      if (AlignmentTarget != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AlignmentTarget);
      }
      if (EventOnly != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EventOnly);
      }
      if (IsCapture != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IsCapture);
      }
      if (KeepLocal != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KeepLocal);
      }
      if (PathInterpolation != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PathInterpolation);
      }
      if (RotateSpeed != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RotateSpeed);
      }
      if (AttachUnitRotate != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AttachUnitRotate);
      }
      if (AttachUnitKeepLocal != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AttachUnitKeepLocal);
      }
      if (AttachUnitSpeedY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AttachUnitSpeedY);
      }
      if (AttachUnitSpeedCenter != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AttachUnitSpeedCenter);
      }
      if (MaxCountOuteDate != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MaxCountOuteDate);
      }
      if (CoolDownTime != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CoolDownTime);
      }
      if (OwnerActionChange != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OwnerActionChange);
      }
      if (Race != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Race);
      }
      if (RaceInt != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RaceInt);
      }
      if (Delay != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Delay);
      }
      if (TriggerTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(TriggerTime);
      }
      if (Duration != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Duration);
      }
      if (movingSpeed_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MovingSpeed);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (HitCount != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(HitCount);
      }
      if (PassNum != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(PassNum);
      }
      if (MaxHitCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(MaxHitCount);
      }
      if (frameSize_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(FrameSize);
      }
      if (frameFinalFactor_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(FrameFinalFactor);
      }
      if (FramType != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) FramType);
      }
      if (FrameTypeInt != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(FrameTypeInt);
      }
      if (attackType_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(AttackType);
      }
      if (offset_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Offset);
      }
      if (HeightStatusHitMask != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HeightStatusHitMask);
      }
      if (HeightStatusHitMaskInt != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(HeightStatusHitMaskInt);
      }
      if (IsRemoteAttacks != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(IsRemoteAttacks);
      }
      if (AttackLevel != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(AttackLevel);
      }
      if (FllowReleaser != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(FllowReleaser);
      }
      if (SkillAffectAttackLevel != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SkillAffectAttackLevel);
      }
      if (AttackerStraightTime != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(AttackerStraightTime);
      }
      if (TargetStayAir != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(TargetStayAir);
      }
      if (attackerLash_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(AttackerLash);
      }
      if (AttackerTime != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(AttackerTime);
      }
      if (AttackeeStraightTime != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(AttackeeStraightTime);
      }
      if (HitResult != 0) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) HitResult);
      }
      if (groundHit_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(GroundHit);
      }
      if (lowAirHit_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(LowAirHit);
      }
      if (highAirHit_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(HighAirHit);
      }
      if (attackeeLash_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(AttackeeLash);
      }
      if (AttackeeTime != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AttackeeTime);
      }
      if (BuffID.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(BuffID);
      }
      if (DamageType != 0) {
        output.WriteRawTag(152, 3);
        output.WriteEnum((int) DamageType);
      }
      if (Damage != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(Damage);
      }
      if (InitAbility != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(InitAbility);
      }
      if (HitAbility != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(HitAbility);
      }
      if (HoldOffsetOpen != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(HoldOffsetOpen);
      }
      if (holdOffset_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(HoldOffset);
      }
      if (HitedEffect.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(HitedEffect);
      }
      if (HitedEffectScale != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(HitedEffectScale);
      }
      if (Script.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Script);
      }
      if (hitedEffectOffset_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(HitedEffectOffset);
      }
      if (groundHitedEffectOffset_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(GroundHitedEffectOffset);
      }
      if (lowAirHitedEffectOffset_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(LowAirHitedEffectOffset);
      }
      if (highAirHitedEffectOffset_ != null) {
        output.WriteRawTag(250, 3);
        output.WriteMessage(HighAirHitedEffectOffset);
      }
      if (HitedSound.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(HitedSound);
      }
      if (HitedSoundIndex != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(HitedSoundIndex);
      }
      if (SelfEffect.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(SelfEffect);
      }
      if (SelfEffectScale != 0) {
        output.WriteRawTag(152, 4);
        output.WriteUInt32(SelfEffectScale);
      }
      if (SeflEffectNT != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(SeflEffectNT);
      }
      if (EffectTriggerTime != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(EffectTriggerTime);
      }
      if (selfEffectOffset_ != null) {
        output.WriteRawTag(178, 4);
        output.WriteMessage(SelfEffectOffset);
      }
      if (BaseGround != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(BaseGround);
      }
      if (SelfSound.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(SelfSound);
      }
      if (SoundTriggerTime != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(SoundTriggerTime);
      }
      if (WeaponType != 0) {
        output.WriteRawTag(208, 4);
        output.WriteEnum((int) WeaponType);
      }
      if (WeaponTypeInt != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(WeaponTypeInt);
      }
      if (HitedEffectDuration != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(HitedEffectDuration);
      }
      if (SelfEffectDuration != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(SelfEffectDuration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EnableSkillBuffer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnableSkillBuffer);
      }
      if (AlignmentTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlignmentTarget);
      }
      if (EventOnly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventOnly);
      }
      if (IsCapture != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsCapture);
      }
      if (KeepLocal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepLocal);
      }
      if (PathInterpolation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathInterpolation);
      }
      if (RotateSpeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RotateSpeed);
      }
      if (AttachUnitRotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachUnitRotate);
      }
      if (AttachUnitKeepLocal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachUnitKeepLocal);
      }
      if (AttachUnitSpeedY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachUnitSpeedY);
      }
      if (AttachUnitSpeedCenter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttachUnitSpeedCenter);
      }
      if (MaxCountOuteDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCountOuteDate);
      }
      if (CoolDownTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoolDownTime);
      }
      if (OwnerActionChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OwnerActionChange);
      }
      if (Race != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Race);
      }
      if (RaceInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RaceInt);
      }
      if (Delay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      if (TriggerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TriggerTime);
      }
      if (Duration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (movingSpeed_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MovingSpeed);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (HitCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitCount);
      }
      if (PassNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PassNum);
      }
      if (MaxHitCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxHitCount);
      }
      if (frameSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FrameSize);
      }
      if (frameFinalFactor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FrameFinalFactor);
      }
      if (FramType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FramType);
      }
      if (FrameTypeInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FrameTypeInt);
      }
      if (attackType_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackType);
      }
      if (offset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (HeightStatusHitMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeightStatusHitMask);
      }
      if (HeightStatusHitMaskInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeightStatusHitMaskInt);
      }
      if (IsRemoteAttacks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsRemoteAttacks);
      }
      if (AttackLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackLevel);
      }
      if (FllowReleaser != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FllowReleaser);
      }
      if (SkillAffectAttackLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillAffectAttackLevel);
      }
      if (AttackerStraightTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackerStraightTime);
      }
      if (TargetStayAir != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetStayAir);
      }
      if (attackerLash_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackerLash);
      }
      if (AttackerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackerTime);
      }
      if (AttackeeStraightTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackeeStraightTime);
      }
      if (HitResult != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HitResult);
      }
      if (groundHit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroundHit);
      }
      if (lowAirHit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LowAirHit);
      }
      if (highAirHit_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighAirHit);
      }
      if (attackeeLash_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackeeLash);
      }
      if (AttackeeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackeeTime);
      }
      if (BuffID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BuffID);
      }
      if (DamageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DamageType);
      }
      if (Damage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (InitAbility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InitAbility);
      }
      if (HitAbility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitAbility);
      }
      if (HoldOffsetOpen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HoldOffsetOpen);
      }
      if (holdOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HoldOffset);
      }
      if (HitedEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitedEffect);
      }
      if (HitedEffectScale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HitedEffectScale);
      }
      if (Script.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Script);
      }
      if (hitedEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HitedEffectOffset);
      }
      if (groundHitedEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroundHitedEffectOffset);
      }
      if (lowAirHitedEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LowAirHitedEffectOffset);
      }
      if (highAirHitedEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighAirHitedEffectOffset);
      }
      if (HitedSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HitedSound);
      }
      if (HitedSoundIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitedSoundIndex);
      }
      if (SelfEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SelfEffect);
      }
      if (SelfEffectScale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SelfEffectScale);
      }
      if (SeflEffectNT != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SeflEffectNT);
      }
      if (EffectTriggerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EffectTriggerTime);
      }
      if (selfEffectOffset_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfEffectOffset);
      }
      if (BaseGround != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BaseGround);
      }
      if (SelfSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SelfSound);
      }
      if (SoundTriggerTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SoundTriggerTime);
      }
      if (WeaponType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WeaponType);
      }
      if (WeaponTypeInt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponTypeInt);
      }
      if (HitedEffectDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitedEffectDuration);
      }
      if (SelfEffectDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfEffectDuration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            EnableSkillBuffer = input.ReadInt32();
            break;
          }
          case 32: {
            AlignmentTarget = input.ReadInt32();
            break;
          }
          case 40: {
            EventOnly = input.ReadInt32();
            break;
          }
          case 48: {
            IsCapture = input.ReadInt32();
            break;
          }
          case 56: {
            KeepLocal = input.ReadInt32();
            break;
          }
          case 64: {
            PathInterpolation = input.ReadInt32();
            break;
          }
          case 72: {
            RotateSpeed = input.ReadInt32();
            break;
          }
          case 80: {
            AttachUnitRotate = input.ReadInt32();
            break;
          }
          case 88: {
            AttachUnitKeepLocal = input.ReadInt32();
            break;
          }
          case 96: {
            AttachUnitSpeedY = input.ReadInt32();
            break;
          }
          case 104: {
            AttachUnitSpeedCenter = input.ReadInt32();
            break;
          }
          case 112: {
            MaxCountOuteDate = input.ReadInt32();
            break;
          }
          case 120: {
            CoolDownTime = input.ReadUInt32();
            break;
          }
          case 128: {
            OwnerActionChange = input.ReadInt32();
            break;
          }
          case 136: {
            race_ = (global::ActData.RaceType) input.ReadEnum();
            break;
          }
          case 144: {
            RaceInt = input.ReadInt32();
            break;
          }
          case 152: {
            Delay = input.ReadInt32();
            break;
          }
          case 160: {
            TriggerTime = input.ReadInt32();
            break;
          }
          case 168: {
            Duration = input.ReadInt32();
            break;
          }
          case 178: {
            if (movingSpeed_ == null) {
              movingSpeed_ = new global::ActData.Vector3();
            }
            input.ReadMessage(movingSpeed_);
            break;
          }
          case 186: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 192: {
            HitCount = input.ReadInt32();
            break;
          }
          case 200: {
            PassNum = input.ReadInt32();
            break;
          }
          case 208: {
            MaxHitCount = input.ReadInt32();
            break;
          }
          case 218: {
            if (frameSize_ == null) {
              frameSize_ = new global::ActData.Vector3();
            }
            input.ReadMessage(frameSize_);
            break;
          }
          case 226: {
            if (frameFinalFactor_ == null) {
              frameFinalFactor_ = new global::ActData.Vector3();
            }
            input.ReadMessage(frameFinalFactor_);
            break;
          }
          case 232: {
            framType_ = (global::ActData.HitDefnitionFramType) input.ReadEnum();
            break;
          }
          case 240: {
            FrameTypeInt = input.ReadUInt32();
            break;
          }
          case 250: {
            if (attackType_ == null) {
              attackType_ = new global::ActData.AttackFrame();
            }
            input.ReadMessage(attackType_);
            break;
          }
          case 258: {
            if (offset_ == null) {
              offset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 264: {
            HeightStatusHitMask = input.ReadInt32();
            break;
          }
          case 272: {
            HeightStatusHitMaskInt = input.ReadInt32();
            break;
          }
          case 280: {
            IsRemoteAttacks = input.ReadInt32();
            break;
          }
          case 288: {
            AttackLevel = input.ReadInt32();
            break;
          }
          case 296: {
            FllowReleaser = input.ReadInt32();
            break;
          }
          case 304: {
            SkillAffectAttackLevel = input.ReadInt32();
            break;
          }
          case 312: {
            AttackerStraightTime = input.ReadInt32();
            break;
          }
          case 320: {
            TargetStayAir = input.ReadInt32();
            break;
          }
          case 330: {
            if (attackerLash_ == null) {
              attackerLash_ = new global::ActData.Vector3();
            }
            input.ReadMessage(attackerLash_);
            break;
          }
          case 336: {
            AttackerTime = input.ReadInt32();
            break;
          }
          case 344: {
            AttackeeStraightTime = input.ReadInt32();
            break;
          }
          case 352: {
            hitResult_ = (global::ActData.HitResultType) input.ReadEnum();
            break;
          }
          case 362: {
            if (groundHit_ == null) {
              groundHit_ = new global::ActData.AttackDef.Types.HitResultData();
            }
            input.ReadMessage(groundHit_);
            break;
          }
          case 370: {
            if (lowAirHit_ == null) {
              lowAirHit_ = new global::ActData.AttackDef.Types.HitResultData();
            }
            input.ReadMessage(lowAirHit_);
            break;
          }
          case 378: {
            if (highAirHit_ == null) {
              highAirHit_ = new global::ActData.AttackDef.Types.HitResultData();
            }
            input.ReadMessage(highAirHit_);
            break;
          }
          case 386: {
            if (attackeeLash_ == null) {
              attackeeLash_ = new global::ActData.Vector3();
            }
            input.ReadMessage(attackeeLash_);
            break;
          }
          case 392: {
            AttackeeTime = input.ReadInt32();
            break;
          }
          case 402: {
            BuffID = input.ReadString();
            break;
          }
          case 408: {
            damageType_ = (global::ActData.DamageType) input.ReadEnum();
            break;
          }
          case 416: {
            Damage = input.ReadInt32();
            break;
          }
          case 424: {
            InitAbility = input.ReadInt32();
            break;
          }
          case 432: {
            HitAbility = input.ReadInt32();
            break;
          }
          case 440: {
            HoldOffsetOpen = input.ReadInt32();
            break;
          }
          case 450: {
            if (holdOffset_ == null) {
              holdOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(holdOffset_);
            break;
          }
          case 458: {
            HitedEffect = input.ReadString();
            break;
          }
          case 464: {
            HitedEffectScale = input.ReadUInt32();
            break;
          }
          case 474: {
            Script = input.ReadString();
            break;
          }
          case 482: {
            if (hitedEffectOffset_ == null) {
              hitedEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(hitedEffectOffset_);
            break;
          }
          case 490: {
            if (groundHitedEffectOffset_ == null) {
              groundHitedEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(groundHitedEffectOffset_);
            break;
          }
          case 498: {
            if (lowAirHitedEffectOffset_ == null) {
              lowAirHitedEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(lowAirHitedEffectOffset_);
            break;
          }
          case 506: {
            if (highAirHitedEffectOffset_ == null) {
              highAirHitedEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(highAirHitedEffectOffset_);
            break;
          }
          case 514: {
            HitedSound = input.ReadString();
            break;
          }
          case 520: {
            HitedSoundIndex = input.ReadInt32();
            break;
          }
          case 530: {
            SelfEffect = input.ReadString();
            break;
          }
          case 536: {
            SelfEffectScale = input.ReadUInt32();
            break;
          }
          case 544: {
            SeflEffectNT = input.ReadInt32();
            break;
          }
          case 552: {
            EffectTriggerTime = input.ReadInt32();
            break;
          }
          case 562: {
            if (selfEffectOffset_ == null) {
              selfEffectOffset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(selfEffectOffset_);
            break;
          }
          case 568: {
            BaseGround = input.ReadInt32();
            break;
          }
          case 578: {
            SelfSound = input.ReadString();
            break;
          }
          case 584: {
            SoundTriggerTime = input.ReadInt32();
            break;
          }
          case 592: {
            weaponType_ = (global::ActData.WeaponType) input.ReadEnum();
            break;
          }
          case 600: {
            WeaponTypeInt = input.ReadInt32();
            break;
          }
          case 608: {
            HitedEffectDuration = input.ReadInt32();
            break;
          }
          case 616: {
            SelfEffectDuration = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttackDef message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class HitResultData : pb::IMessage {
        private static readonly pb::MessageParser<HitResultData> _parser = new pb::MessageParser<HitResultData>(() => new HitResultData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HitResultData> Parser { get { return _parser; } }

        /// <summary>Field number for the "enabled" field.</summary>
        public const int EnabledFieldNumber = 1;
        private bool enabled_;
        /// <summary>
        ///是否启用,如果启用，改受击者对应的状态将采用对应的冲击速度/冲击时间/硬直时间，否则将采用默认的设置。
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Enabled {
          get { return enabled_; }
          set {
            enabled_ = value;
          }
        }

        /// <summary>Field number for the "attackeeLash" field.</summary>
        public const int AttackeeLashFieldNumber = 2;
        private global::ActData.Vector3 attackeeLash_;
        /// <summary>
        ///受击者冲击速度
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ActData.Vector3 AttackeeLash {
          get { return attackeeLash_; }
          set {
            attackeeLash_ = value;
          }
        }

        /// <summary>Field number for the "attackeeTime" field.</summary>
        public const int AttackeeTimeFieldNumber = 3;
        private int attackeeTime_;
        /// <summary>
        ///受击者冲击时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttackeeTime {
          get { return attackeeTime_; }
          set {
            attackeeTime_ = value;
          }
        }

        /// <summary>Field number for the "attackeeStraightTime" field.</summary>
        public const int AttackeeStraightTimeFieldNumber = 4;
        private int attackeeStraightTime_;
        /// <summary>
        ///受击者的硬直时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AttackeeStraightTime {
          get { return attackeeStraightTime_; }
          set {
            attackeeStraightTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Enabled != false) {
            output.WriteRawTag(8);
            output.WriteBool(Enabled);
          }
          if (attackeeLash_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(AttackeeLash);
          }
          if (AttackeeTime != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(AttackeeTime);
          }
          if (AttackeeStraightTime != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(AttackeeStraightTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Enabled != false) {
            size += 1 + 1;
          }
          if (attackeeLash_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackeeLash);
          }
          if (AttackeeTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackeeTime);
          }
          if (AttackeeStraightTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackeeStraightTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Enabled = input.ReadBool();
                break;
              }
              case 18: {
                if (attackeeLash_ == null) {
                  attackeeLash_ = new global::ActData.Vector3();
                }
                input.ReadMessage(attackeeLash_);
                break;
              }
              case 24: {
                AttackeeTime = input.ReadInt32();
                break;
              }
              case 32: {
                AttackeeStraightTime = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class PathNode : pb::IMessage {
        private static readonly pb::MessageParser<PathNode> _parser = new pb::MessageParser<PathNode>(() => new PathNode());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PathNode> Parser { get { return _parser; } }

        /// <summary>Field number for the "ratio" field.</summary>
        public const int RatioFieldNumber = 1;
        private int ratio_;
        /// <summary>
        ///百分比
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Ratio {
          get { return ratio_; }
          set {
            ratio_ = value;
          }
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 2;
        private int x_;
        /// <summary>
        ///位置X
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 3;
        private int y_;
        /// <summary>
        ///位置Y
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "z" field.</summary>
        public const int ZFieldNumber = 4;
        private int z_;
        /// <summary>
        ///位置Z
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Z {
          get { return z_; }
          set {
            z_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Ratio != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Ratio);
          }
          if (X != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Y);
          }
          if (Z != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Z);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Ratio != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
          }
          if (Z != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Ratio = input.ReadInt32();
                break;
              }
              case 16: {
                X = input.ReadInt32();
                break;
              }
              case 24: {
                Y = input.ReadInt32();
                break;
              }
              case 32: {
                Z = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///============================================AttackFrame=======================================================
  /// </summary>
  public sealed class AttackFrame : pb::IMessage {
    private static readonly pb::MessageParser<AttackFrame> _parser = new pb::MessageParser<AttackFrame>(() => new AttackFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackFrame> Parser { get { return _parser; } }

    /// <summary>Field number for the "frameCuboid" field.</summary>
    public const int FrameCuboidFieldNumber = 1;
    private global::ActData.FrameCuboid frameCuboid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.FrameCuboid FrameCuboid {
      get { return frameCuboid_; }
      set {
        frameCuboid_ = value;
      }
    }

    /// <summary>Field number for the "frameCylinder" field.</summary>
    public const int FrameCylinderFieldNumber = 2;
    private global::ActData.FrameCylinder frameCylinder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.FrameCylinder FrameCylinder {
      get { return frameCylinder_; }
      set {
        frameCylinder_ = value;
      }
    }

    /// <summary>Field number for the "frameRing" field.</summary>
    public const int FrameRingFieldNumber = 3;
    private global::ActData.FrameRing frameRing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.FrameRing FrameRing {
      get { return frameRing_; }
      set {
        frameRing_ = value;
      }
    }

    /// <summary>Field number for the "frameSomato" field.</summary>
    public const int FrameSomatoFieldNumber = 4;
    private global::ActData.FrameSomato frameSomato_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.FrameSomato FrameSomato {
      get { return frameSomato_; }
      set {
        frameSomato_ = value;
      }
    }

    /// <summary>Field number for the "frameFan" field.</summary>
    public const int FrameFanFieldNumber = 5;
    private global::ActData.FrameFan frameFan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.FrameFan FrameFan {
      get { return frameFan_; }
      set {
        frameFan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frameCuboid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrameCuboid);
      }
      if (frameCylinder_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrameCylinder);
      }
      if (frameRing_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FrameRing);
      }
      if (frameSomato_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FrameSomato);
      }
      if (frameFan_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FrameFan);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frameCuboid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameCuboid);
      }
      if (frameCylinder_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameCylinder);
      }
      if (frameRing_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameRing);
      }
      if (frameSomato_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameSomato);
      }
      if (frameFan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameFan);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (frameCuboid_ == null) {
              frameCuboid_ = new global::ActData.FrameCuboid();
            }
            input.ReadMessage(frameCuboid_);
            break;
          }
          case 18: {
            if (frameCylinder_ == null) {
              frameCylinder_ = new global::ActData.FrameCylinder();
            }
            input.ReadMessage(frameCylinder_);
            break;
          }
          case 26: {
            if (frameRing_ == null) {
              frameRing_ = new global::ActData.FrameRing();
            }
            input.ReadMessage(frameRing_);
            break;
          }
          case 34: {
            if (frameSomato_ == null) {
              frameSomato_ = new global::ActData.FrameSomato();
            }
            input.ReadMessage(frameSomato_);
            break;
          }
          case 42: {
            if (frameFan_ == null) {
              frameFan_ = new global::ActData.FrameFan();
            }
            input.ReadMessage(frameFan_);
            break;
          }
        }
      }
    }

  }

  public sealed class FrameCuboid : pb::IMessage {
    private static readonly pb::MessageParser<FrameCuboid> _parser = new pb::MessageParser<FrameCuboid>(() => new FrameCuboid());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameCuboid> Parser { get { return _parser; } }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private float width_;
    /// <summary>
    ///宽度X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "widthFactor" field.</summary>
    public const int WidthFactorFieldNumber = 2;
    private float widthFactor_;
    /// <summary>
    ///宽度X缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WidthFactor {
      get { return widthFactor_; }
      set {
        widthFactor_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private float height_;
    /// <summary>
    ///高度Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "heightFactor" field.</summary>
    public const int HeightFactorFieldNumber = 4;
    private float heightFactor_;
    /// <summary>
    ///高度Y缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightFactor {
      get { return heightFactor_; }
      set {
        heightFactor_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 5;
    private float length_;
    /// <summary>
    ///长度Z
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "lengthFactor" field.</summary>
    public const int LengthFactorFieldNumber = 6;
    private float lengthFactor_;
    /// <summary>
    ///长度Z缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LengthFactor {
      get { return lengthFactor_; }
      set {
        lengthFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Width);
      }
      if (WidthFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(WidthFactor);
      }
      if (Height != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (HeightFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HeightFactor);
      }
      if (Length != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Length);
      }
      if (LengthFactor != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(LengthFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (WidthFactor != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (HeightFactor != 0F) {
        size += 1 + 4;
      }
      if (Length != 0F) {
        size += 1 + 4;
      }
      if (LengthFactor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Width = input.ReadFloat();
            break;
          }
          case 21: {
            WidthFactor = input.ReadFloat();
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 37: {
            HeightFactor = input.ReadFloat();
            break;
          }
          case 45: {
            Length = input.ReadFloat();
            break;
          }
          case 53: {
            LengthFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class FrameCylinder : pb::IMessage {
    private static readonly pb::MessageParser<FrameCylinder> _parser = new pb::MessageParser<FrameCylinder>(() => new FrameCylinder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameCylinder> Parser { get { return _parser; } }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private float radius_;
    /// <summary>
    ///半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "radiusFactor" field.</summary>
    public const int RadiusFactorFieldNumber = 2;
    private float radiusFactor_;
    /// <summary>
    ///半径缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiusFactor {
      get { return radiusFactor_; }
      set {
        radiusFactor_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private float height_;
    /// <summary>
    ///高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "heightFactor" field.</summary>
    public const int HeightFactorFieldNumber = 4;
    private float heightFactor_;
    /// <summary>
    ///高度缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightFactor {
      get { return heightFactor_; }
      set {
        heightFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Radius);
      }
      if (RadiusFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RadiusFactor);
      }
      if (Height != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (HeightFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HeightFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (RadiusFactor != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (HeightFactor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Radius = input.ReadFloat();
            break;
          }
          case 21: {
            RadiusFactor = input.ReadFloat();
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 37: {
            HeightFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class FrameRing : pb::IMessage {
    private static readonly pb::MessageParser<FrameRing> _parser = new pb::MessageParser<FrameRing>(() => new FrameRing());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameRing> Parser { get { return _parser; } }

    /// <summary>Field number for the "innerRadius" field.</summary>
    public const int InnerRadiusFieldNumber = 1;
    private float innerRadius_;
    /// <summary>
    ///内半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InnerRadius {
      get { return innerRadius_; }
      set {
        innerRadius_ = value;
      }
    }

    /// <summary>Field number for the "innerRadiusFactor" field.</summary>
    public const int InnerRadiusFactorFieldNumber = 2;
    private float innerRadiusFactor_;
    /// <summary>
    ///内半径缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InnerRadiusFactor {
      get { return innerRadiusFactor_; }
      set {
        innerRadiusFactor_ = value;
      }
    }

    /// <summary>Field number for the "outerRadius" field.</summary>
    public const int OuterRadiusFieldNumber = 3;
    private float outerRadius_;
    /// <summary>
    ///外半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OuterRadius {
      get { return outerRadius_; }
      set {
        outerRadius_ = value;
      }
    }

    /// <summary>Field number for the "outerRadiusFactor" field.</summary>
    public const int OuterRadiusFactorFieldNumber = 4;
    private float outerRadiusFactor_;
    /// <summary>
    ///外半径缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OuterRadiusFactor {
      get { return outerRadiusFactor_; }
      set {
        outerRadiusFactor_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private float height_;
    /// <summary>
    ///高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "heightFactor" field.</summary>
    public const int HeightFactorFieldNumber = 6;
    private float heightFactor_;
    /// <summary>
    ///高度Y缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightFactor {
      get { return heightFactor_; }
      set {
        heightFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InnerRadius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(InnerRadius);
      }
      if (InnerRadiusFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(InnerRadiusFactor);
      }
      if (OuterRadius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(OuterRadius);
      }
      if (OuterRadiusFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OuterRadiusFactor);
      }
      if (Height != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Height);
      }
      if (HeightFactor != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(HeightFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InnerRadius != 0F) {
        size += 1 + 4;
      }
      if (InnerRadiusFactor != 0F) {
        size += 1 + 4;
      }
      if (OuterRadius != 0F) {
        size += 1 + 4;
      }
      if (OuterRadiusFactor != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (HeightFactor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            InnerRadius = input.ReadFloat();
            break;
          }
          case 21: {
            InnerRadiusFactor = input.ReadFloat();
            break;
          }
          case 29: {
            OuterRadius = input.ReadFloat();
            break;
          }
          case 37: {
            OuterRadiusFactor = input.ReadFloat();
            break;
          }
          case 45: {
            Height = input.ReadFloat();
            break;
          }
          case 53: {
            HeightFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class FrameSomato : pb::IMessage {
    private static readonly pb::MessageParser<FrameSomato> _parser = new pb::MessageParser<FrameSomato>(() => new FrameSomato());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameSomato> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class FrameFan : pb::IMessage {
    private static readonly pb::MessageParser<FrameFan> _parser = new pb::MessageParser<FrameFan>(() => new FrameFan());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameFan> Parser { get { return _parser; } }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private float radius_;
    /// <summary>
    ///半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "radiusFactor" field.</summary>
    public const int RadiusFactorFieldNumber = 2;
    private float radiusFactor_;
    /// <summary>
    ///半径缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiusFactor {
      get { return radiusFactor_; }
      set {
        radiusFactor_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private float height_;
    /// <summary>
    ///高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "heightFactor" field.</summary>
    public const int HeightFactorFieldNumber = 4;
    private float heightFactor_;
    /// <summary>
    ///高度缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightFactor {
      get { return heightFactor_; }
      set {
        heightFactor_ = value;
      }
    }

    /// <summary>Field number for the "startAngle" field.</summary>
    public const int StartAngleFieldNumber = 5;
    private float startAngle_;
    /// <summary>
    ///起始角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartAngle {
      get { return startAngle_; }
      set {
        startAngle_ = value;
      }
    }

    /// <summary>Field number for the "startAngleFactor" field.</summary>
    public const int StartAngleFactorFieldNumber = 6;
    private float startAngleFactor_;
    /// <summary>
    ///起始角度缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartAngleFactor {
      get { return startAngleFactor_; }
      set {
        startAngleFactor_ = value;
      }
    }

    /// <summary>Field number for the "endAngle" field.</summary>
    public const int EndAngleFieldNumber = 7;
    private float endAngle_;
    /// <summary>
    ///终止角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndAngle {
      get { return endAngle_; }
      set {
        endAngle_ = value;
      }
    }

    /// <summary>Field number for the "endAngleFactor" field.</summary>
    public const int EndAngleFactorFieldNumber = 8;
    private float endAngleFactor_;
    /// <summary>
    ///终止角度缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndAngleFactor {
      get { return endAngleFactor_; }
      set {
        endAngleFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Radius);
      }
      if (RadiusFactor != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RadiusFactor);
      }
      if (Height != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Height);
      }
      if (HeightFactor != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HeightFactor);
      }
      if (StartAngle != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StartAngle);
      }
      if (StartAngleFactor != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StartAngleFactor);
      }
      if (EndAngle != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EndAngle);
      }
      if (EndAngleFactor != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(EndAngleFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (RadiusFactor != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (HeightFactor != 0F) {
        size += 1 + 4;
      }
      if (StartAngle != 0F) {
        size += 1 + 4;
      }
      if (StartAngleFactor != 0F) {
        size += 1 + 4;
      }
      if (EndAngle != 0F) {
        size += 1 + 4;
      }
      if (EndAngleFactor != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Radius = input.ReadFloat();
            break;
          }
          case 21: {
            RadiusFactor = input.ReadFloat();
            break;
          }
          case 29: {
            Height = input.ReadFloat();
            break;
          }
          case 37: {
            HeightFactor = input.ReadFloat();
            break;
          }
          case 45: {
            StartAngle = input.ReadFloat();
            break;
          }
          case 53: {
            StartAngleFactor = input.ReadFloat();
            break;
          }
          case 61: {
            EndAngle = input.ReadFloat();
            break;
          }
          case 69: {
            EndAngleFactor = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class CameraSlot : pb::IMessage {
    private static readonly pb::MessageParser<CameraSlot> _parser = new pb::MessageParser<CameraSlot>(() => new CameraSlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraSlot> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名称,槽的名字，如‘向前移动1个单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delayTime" field.</summary>
    public const int DelayTimeFieldNumber = 2;
    private int delayTime_;
    /// <summary>
    ///延迟时间,起效延迟时间，单位为毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    /// <summary>Field number for the "FOV" field.</summary>
    public const int FOVFieldNumber = 3;
    private int fOV_;
    /// <summary>
    ///视角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FOV {
      get { return fOV_; }
      set {
        fOV_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    /// <summary>
    ///控制时间,摄像机控制的起效时间，经过这些事件后达到对应的数据项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 5;
    private global::ActData.Vector3 offset_;
    /// <summary>
    ///相对位移,摄像机的相对位移值，单位为厘米
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 6;
    private global::ActData.Vector3 rotate_;
    /// <summary>
    ///相对旋转,摄像机的相对位移值，单位为角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "adjustMove" field.</summary>
    public const int AdjustMoveFieldNumber = 7;
    private bool adjustMove_;
    /// <summary>
    ///调整位移,摄像机位移，根据角色的朝向做调整。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdjustMove {
      get { return adjustMove_; }
      set {
        adjustMove_ = value;
      }
    }

    /// <summary>Field number for the "adjustRotate" field.</summary>
    public const int AdjustRotateFieldNumber = 8;
    private bool adjustRotate_;
    /// <summary>
    ///调整旋转,摄像机旋转，根据角色的朝向做调整。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdjustRotate {
      get { return adjustRotate_; }
      set {
        adjustRotate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (DelayTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DelayTime);
      }
      if (FOV != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FOV);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (offset_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Offset);
      }
      if (rotate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rotate);
      }
      if (AdjustMove != false) {
        output.WriteRawTag(56);
        output.WriteBool(AdjustMove);
      }
      if (AdjustRotate != false) {
        output.WriteRawTag(64);
        output.WriteBool(AdjustRotate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DelayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayTime);
      }
      if (FOV != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FOV);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (rotate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (AdjustMove != false) {
        size += 1 + 1;
      }
      if (AdjustRotate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            DelayTime = input.ReadInt32();
            break;
          }
          case 24: {
            FOV = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 42: {
            if (offset_ == null) {
              offset_ = new global::ActData.Vector3();
            }
            input.ReadMessage(offset_);
            break;
          }
          case 50: {
            if (rotate_ == null) {
              rotate_ = new global::ActData.Vector3();
            }
            input.ReadMessage(rotate_);
            break;
          }
          case 56: {
            AdjustMove = input.ReadBool();
            break;
          }
          case 64: {
            AdjustRotate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CameraGroup : pb::IMessage {
    private static readonly pb::MessageParser<CameraGroup> _parser = new pb::MessageParser<CameraGroup>(() => new CameraGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraGroup> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///摄像机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attenuation" field.</summary>
    public const int AttenuationFieldNumber = 3;
    private int attenuation_;
    /// <summary>
    ///衰减距离,控制摄像机的衰减距离，只对一级摄像机起效！！！默认值为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attenuation {
      get { return attenuation_; }
      set {
        attenuation_ = value;
      }
    }

    /// <summary>Field number for the "firstLevel" field.</summary>
    public const int FirstLevelFieldNumber = 4;
    private bool firstLevel_;
    /// <summary>
    ///是否一级摄像机,设置此参数作用于摄像机层次的控制，默认为二级摄像机控制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstLevel {
      get { return firstLevel_; }
      set {
        firstLevel_ = value;
      }
    }

    /// <summary>Field number for the "resetParam" field.</summary>
    public const int ResetParamFieldNumber = 5;
    private bool resetParam_;
    /// <summary>
    ///是否重置摄像机,设置此参数作用于摄像机控制开始状态，默认为每次重置。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResetParam {
      get { return resetParam_; }
      set {
        resetParam_ = value;
      }
    }

    /// <summary>Field number for the "cameraSlots" field.</summary>
    public const int CameraSlotsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ActData.CameraSlot> _repeated_cameraSlots_codec
        = pb::FieldCodec.ForMessage(50, global::ActData.CameraSlot.Parser);
    private readonly pbc::RepeatedField<global::ActData.CameraSlot> cameraSlots_ = new pbc::RepeatedField<global::ActData.CameraSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.CameraSlot> CameraSlots {
      get { return cameraSlots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Attenuation != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Attenuation);
      }
      if (FirstLevel != false) {
        output.WriteRawTag(32);
        output.WriteBool(FirstLevel);
      }
      if (ResetParam != false) {
        output.WriteRawTag(40);
        output.WriteBool(ResetParam);
      }
      cameraSlots_.WriteTo(output, _repeated_cameraSlots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Attenuation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attenuation);
      }
      if (FirstLevel != false) {
        size += 1 + 1;
      }
      if (ResetParam != false) {
        size += 1 + 1;
      }
      size += cameraSlots_.CalculateSize(_repeated_cameraSlots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Attenuation = input.ReadInt32();
            break;
          }
          case 32: {
            FirstLevel = input.ReadBool();
            break;
          }
          case 40: {
            ResetParam = input.ReadBool();
            break;
          }
          case 50: {
            cameraSlots_.AddEntriesFrom(input, _repeated_cameraSlots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class UnitActionInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitActionInfo> _parser = new pb::MessageParser<UnitActionInfo>(() => new UnitActionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitActionInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "unitVaribleList" field.</summary>
    public const int UnitVaribleListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActData.UnitActionInfo.Types.UnitVarible> _repeated_unitVaribleList_codec
        = pb::FieldCodec.ForMessage(18, global::ActData.UnitActionInfo.Types.UnitVarible.Parser);
    private readonly pbc::RepeatedField<global::ActData.UnitActionInfo.Types.UnitVarible> unitVaribleList_ = new pbc::RepeatedField<global::ActData.UnitActionInfo.Types.UnitVarible>();
    /// <summary>
    ///变量列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.UnitActionInfo.Types.UnitVarible> UnitVaribleList {
      get { return unitVaribleList_; }
    }

    /// <summary>Field number for the "actionGroups" field.</summary>
    public const int ActionGroupsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ActData.ActionGroup> _repeated_actionGroups_codec
        = pb::FieldCodec.ForMessage(26, global::ActData.ActionGroup.Parser);
    private readonly pbc::RepeatedField<global::ActData.ActionGroup> actionGroups_ = new pbc::RepeatedField<global::ActData.ActionGroup>();
    /// <summary>
    ///动作组列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.ActionGroup> ActionGroups {
      get { return actionGroups_; }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 4;
    private string desc_ = "";
    /// <summary>
    ///说明
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private global::ActData.Vector3 scale_;
    /// <summary>
    ///缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ActData.Vector3 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      unitVaribleList_.WriteTo(output, _repeated_unitVaribleList_codec);
      actionGroups_.WriteTo(output, _repeated_actionGroups_codec);
      if (Desc.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc);
      }
      if (scale_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += unitVaribleList_.CalculateSize(_repeated_unitVaribleList_codec);
      size += actionGroups_.CalculateSize(_repeated_actionGroups_codec);
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            unitVaribleList_.AddEntriesFrom(input, _repeated_unitVaribleList_codec);
            break;
          }
          case 26: {
            actionGroups_.AddEntriesFrom(input, _repeated_actionGroups_codec);
            break;
          }
          case 34: {
            Desc = input.ReadString();
            break;
          }
          case 42: {
            if (scale_ == null) {
              scale_ = new global::ActData.Vector3();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnitActionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      public sealed class UnitVarible : pb::IMessage {
        private static readonly pb::MessageParser<UnitVarible> _parser = new pb::MessageParser<UnitVarible>(() => new UnitVarible());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnitVarible> Parser { get { return _parser; } }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private int index_;
        /// <summary>
        ///[DefaultValue(0), DisplayName("索引"), XmlAttribute("Index"), Category("索引")]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private int value_;
        /// <summary>
        ///[DefaultValue(0), DisplayName("当前值"), XmlAttribute("Value"), Category("值")]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 3;
        private int max_;
        /// <summary>
        ///[DefaultValue(0), DisplayName("最大值"), XmlAttribute("Max"), Category("值")]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        /// <summary>Field number for the "autoIncTime" field.</summary>
        public const int AutoIncTimeFieldNumber = 4;
        private int autoIncTime_;
        /// <summary>
        ///[XmlAttribute("AutoIncTime"), DefaultValue(0), DisplayName("自增时间"), Category("变化"), Description("【测试之用】自定义变量的自增时间，单位为毫秒")]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AutoIncTime {
          get { return autoIncTime_; }
          set {
            autoIncTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Index);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Value);
          }
          if (Max != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Max);
          }
          if (AutoIncTime != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(AutoIncTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          if (Max != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
          }
          if (AutoIncTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoIncTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadInt32();
                break;
              }
              case 16: {
                Value = input.ReadInt32();
                break;
              }
              case 24: {
                Max = input.ReadInt32();
                break;
              }
              case 32: {
                AutoIncTime = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class ActionData : pb::IMessage {
    private static readonly pb::MessageParser<ActionData> _parser = new pb::MessageParser<ActionData>(() => new ActionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionData> Parser { get { return _parser; } }

    /// <summary>Field number for the "objectTypes" field.</summary>
    public const int ObjectTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ActData.UnitActionInfo> _repeated_objectTypes_codec
        = pb::FieldCodec.ForMessage(10, global::ActData.UnitActionInfo.Parser);
    private readonly pbc::RepeatedField<global::ActData.UnitActionInfo> objectTypes_ = new pbc::RepeatedField<global::ActData.UnitActionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.UnitActionInfo> ObjectTypes {
      get { return objectTypes_; }
    }

    /// <summary>Field number for the "cameraGroups" field.</summary>
    public const int CameraGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ActData.CameraGroup> _repeated_cameraGroups_codec
        = pb::FieldCodec.ForMessage(18, global::ActData.CameraGroup.Parser);
    private readonly pbc::RepeatedField<global::ActData.CameraGroup> cameraGroups_ = new pbc::RepeatedField<global::ActData.CameraGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ActData.CameraGroup> CameraGroups {
      get { return cameraGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectTypes_.WriteTo(output, _repeated_objectTypes_codec);
      cameraGroups_.WriteTo(output, _repeated_cameraGroups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectTypes_.CalculateSize(_repeated_objectTypes_codec);
      size += cameraGroups_.CalculateSize(_repeated_cameraGroups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            objectTypes_.AddEntriesFrom(input, _repeated_objectTypes_codec);
            break;
          }
          case 18: {
            cameraGroups_.AddEntriesFrom(input, _repeated_cameraGroups_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
