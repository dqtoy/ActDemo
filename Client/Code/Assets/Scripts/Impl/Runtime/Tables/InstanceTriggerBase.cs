//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InstanceTriggerBase : JW_Table.Binary, JW_Table.IKey
{
	public partial class MonsterInfoDef : JW_Table.Binary
	{
		private System.Collections.Generic.List<int> m_data = new System.Collections.Generic.List<int>();

		public System.Collections.Generic.List<int> data
		{
			get { return m_data; }
		}

		public override void Read(JW_Table.Reader reader)
		{
			m_data = reader.ReadRepeatedInt32(m_data);
		}
	}

	public partial class MultiMonsterDef : JW_Table.Binary
	{
		private System.Collections.Generic.List<MonsterInfoDef> m_data = new System.Collections.Generic.List<MonsterInfoDef>();

		public System.Collections.Generic.List<MonsterInfoDef> data
		{
			get { return m_data; }
		}

		public override void Read(JW_Table.Reader reader)
		{
			m_data = reader.ReadRepeatedItem(m_data);
		}
	}

	private int m_ID;
	private MultiMonsterDef m_MonsterInfo;

	public int ID
	{
		get { return m_ID; }
		set { m_ID = value; }
	}

	public MultiMonsterDef MonsterInfo
	{
		get { return m_MonsterInfo; }
		set { m_MonsterInfo = value; }
	}

	public long Key()
	{
		return m_ID;
	}

	public override void Read(JW_Table.Reader reader)
	{
		m_ID = reader.ReadInt32();
		m_MonsterInfo = reader.ReadItem<MultiMonsterDef>();
	}
}

//InstanceTriggerBase.xlsx
public sealed class InstanceTriggerBaseManager : JW_Table.TableManager<InstanceTriggerBase>
{
	public const uint VERSION = 515011117;

	private InstanceTriggerBaseManager()
	{
	}

	private static readonly InstanceTriggerBaseManager ms_instance = new InstanceTriggerBaseManager();

	public static InstanceTriggerBaseManager instance
	{
		get { return ms_instance; }
	}

	public string source
	{
		get { return "InstanceTriggerBase.tbl"; }
	}

	public bool Load(string path)
	{
		return Load(path, source, VERSION);
	}

	public bool Load(byte[] buffer)
	{
		return Load(buffer, VERSION, source);
	}

	public InstanceTriggerBase Find(int key)
	{
		return FindInternal(key);
	}
}
