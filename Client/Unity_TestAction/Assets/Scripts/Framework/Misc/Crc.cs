using System;
using System.Text;

namespace AosBaseFramework
{
    public sealed class Crc
    {
        private const uint CrcSeed = 4294967295u;
        private static readonly uint[] CrcTable = new uint[]
        {
        0u,
        1996959894u,
        3993919788u,
        2567524794u,
        124634137u,
        1886057615u,
        3915621685u,
        2657392035u,
        249268274u,
        2044508324u,
        3772115230u,
        2547177864u,
        162941995u,
        2125561021u,
        3887607047u,
        2428444049u,
        498536548u,
        1789927666u,
        4089016648u,
        2227061214u,
        450548861u,
        1843258603u,
        4107580753u,
        2211677639u,
        325883990u,
        1684777152u,
        4251122042u,
        2321926636u,
        335633487u,
        1661365465u,
        4195302755u,
        2366115317u,
        997073096u,
        1281953886u,
        3579855332u,
        2724688242u,
        1006888145u,
        1258607687u,
        3524101629u,
        2768942443u,
        901097722u,
        1119000684u,
        3686517206u,
        2898065728u,
        853044451u,
        1172266101u,
        3705015759u,
        2882616665u,
        651767980u,
        1373503546u,
        3369554304u,
        3218104598u,
        565507253u,
        1454621731u,
        3485111705u,
        3099436303u,
        671266974u,
        1594198024u,
        3322730930u,
        2970347812u,
        795835527u,
        1483230225u,
        3244367275u,
        3060149565u,
        1994146192u,
        31158534u,
        2563907772u,
        4023717930u,
        1907459465u,
        112637215u,
        2680153253u,
        3904427059u,
        2013776290u,
        251722036u,
        2517215374u,
        3775830040u,
        2137656763u,
        141376813u,
        2439277719u,
        3865271297u,
        1802195444u,
        476864866u,
        2238001368u,
        4066508878u,
        1812370925u,
        453092731u,
        2181625025u,
        4111451223u,
        1706088902u,
        314042704u,
        2344532202u,
        4240017532u,
        1658658271u,
        366619977u,
        2362670323u,
        4224994405u,
        1303535960u,
        984961486u,
        2747007092u,
        3569037538u,
        1256170817u,
        1037604311u,
        2765210733u,
        3554079995u,
        1131014506u,
        879679996u,
        2909243462u,
        3663771856u,
        1141124467u,
        855842277u,
        2852801631u,
        3708648649u,
        1342533948u,
        654459306u,
        3188396048u,
        3373015174u,
        1466479909u,
        544179635u,
        3110523913u,
        3462522015u,
        1591671054u,
        702138776u,
        2966460450u,
        3352799412u,
        1504918807u,
        783551873u,
        3082640443u,
        3233442989u,
        3988292384u,
        2596254646u,
        62317068u,
        1957810842u,
        3939845945u,
        2647816111u,
        81470997u,
        1943803523u,
        3814918930u,
        2489596804u,
        225274430u,
        2053790376u,
        3826175755u,
        2466906013u,
        167816743u,
        2097651377u,
        4027552580u,
        2265490386u,
        503444072u,
        1762050814u,
        4150417245u,
        2154129355u,
        426522225u,
        1852507879u,
        4275313526u,
        2312317920u,
        282753626u,
        1742555852u,
        4189708143u,
        2394877945u,
        397917763u,
        1622183637u,
        3604390888u,
        2714866558u,
        953729732u,
        1340076626u,
        3518719985u,
        2797360999u,
        1068828381u,
        1219638859u,
        3624741850u,
        2936675148u,
        906185462u,
        1090812512u,
        3747672003u,
        2825379669u,
        829329135u,
        1181335161u,
        3412177804u,
        3160834842u,
        628085408u,
        1382605366u,
        3423369109u,
        3138078467u,
        570562233u,
        1426400815u,
        3317316542u,
        2998733608u,
        733239954u,
        1555261956u,
        3268935591u,
        3050360625u,
        752459403u,
        1541320221u,
        2607071920u,
        3965973030u,
        1969922972u,
        40735498u,
        2617837225u,
        3943577151u,
        1913087877u,
        83908371u,
        2512341634u,
        3803740692u,
        2075208622u,
        213261112u,
        2463272603u,
        3855990285u,
        2094854071u,
        198958881u,
        2262029012u,
        4057260610u,
        1759359992u,
        534414190u,
        2176718541u,
        4139329115u,
        1873836001u,
        414664567u,
        2282248934u,
        4279200368u,
        1711684554u,
        285281116u,
        2405801727u,
        4167216745u,
        1634467795u,
        376229701u,
        2685067896u,
        3608007406u,
        1308918612u,
        956543938u,
        2808555105u,
        3495958263u,
        1231636301u,
        1047427035u,
        2932959818u,
        3654703836u,
        1088359270u,
        936918000u,
        2847714899u,
        3736837829u,
        1202900863u,
        817233897u,
        3183342108u,
        3401237130u,
        1404277552u,
        615818150u,
        3134207493u,
        3453421203u,
        1423857449u,
        601450431u,
        3009837614u,
        3294710456u,
        1567103746u,
        711928724u,
        3020668471u,
        3272380065u,
        1510334235u,
        755167117u
        };
        private static readonly ulong[] s_CRC64Table = new ulong[]
        {
        0uL,
        4823603603198064275uL,
        9647207206396128550uL,
        14344283933443513269uL,
        5274672035359026399uL,
        847670339082705484uL,
        14759040976900489721uL,
        10241823793177474922uL,
        10549344070718052798uL,
        15030250704074698541uL,
        1695340678165410968uL,
        6158653484774949387uL,
        15804726273676621153uL,
        11071337880091427826uL,
        6824194888265062471uL,
        2036903512645398228uL,
        7367177604490692079uL,
        2651944067726553980uL,
        16419204125234161865uL,
        11613757334439845466uL,
        3390681356330821936uL,
        7926053118503640995uL,
        12317306969549898774uL,
        16726154088988619397uL,
        17607865585094646865uL,
        13162708473643690690uL,
        8194994013375312247uL,
        3695931686473304036uL,
        13648389776530124942uL,
        18417527692557321757uL,
        4073807025290796456uL,
        8825348881154370363uL,
        14734355208981384158uL,
        10271039580541631821uL,
        5303888135453107960uL,
        822984195088142443uL,
        9604374506261047041uL,
        14391664176758772114uL,
        47380625301539367uL,
        4780770595170139316uL,
        6781362712661643872uL,
        2084283301222999283uL,
        15852106237007281990uL,
        11028505464239851989uL,
        1670654249350217407uL,
        6187869865390245932uL,
        10578560694269006745uL,
        15005564104267687178uL,
        12269926345859042865uL,
        16768987096479742114uL,
        3433514057002836759uL,
        7878672873577829764uL,
        16389988026750624494uL,
        11638443477897467005uL,
        7391863372946608072uL,
        2622728278751721819uL,
        4044590402276644751uL,
        8850035479350698268uL,
        13673076206955870889uL,
        18388311311405091898uL,
        8147614050581592912uL,
        3738764100714335683uL,
        17650697762308740726uL,
        13115328684529279205uL,
        15709965168302367023uL,
        11021966344253216700uL,
        6909860770376862729uL,
        2095335087373712026uL,
        10607776270906215920uL,
        15115916238825782115uL,
        1645968390176284886uL,
        6063892853452478021uL,
        5216239979862816913uL,
        762004938812542466uL,
        14808413130408695223uL,
        10336584279807992612uL,
        94761250603078734uL,
        4872975272980325085uL,
        9561541190340278632uL,
        14285852213486374907uL,
        13562725425323287744uL,
        18359094313119879763uL,
        4168566602445998566uL,
        8874722219015798645uL,
        17657238303940757535uL,
        13257468400305012364uL,
        8136561383943382329uL,
        3610266854770152362uL,
        3341308498700434814uL,
        7831293060043656173uL,
        12375739730780491864uL,
        16811819059476047563uL,
        7452841817450123681uL,
        2710377314828461874uL,
        16324444680414493831uL,
        11564384134825822740uL,
        1621282580641819377uL,
        6093108618008534114uL,
        10636992411005044695uL,
        15091230119249932612uL,
        6867028114005673518uL,
        2142715359940571325uL,
        15757345747155659528uL,
        10979133309658045851uL,
        9518708972583580495uL,
        14333231979791697372uL,
        142141253402664553uL,
        4830142882085382394uL,
        14783726745893216144uL,
        10365800689136969987uL,
        5245456557503443638uL,
        737318311902463013uL,
        8089180804553289502uL,
        3653099890976004493uL,
        17700070958701396536uL,
        13210088128275084459uL,
        4139350461810230209uL,
        8899408340202190162uL,
        13587411233247080167uL,
        18329878549100632180uL,
        16295228101163185824uL,
        11589070762272702515uL,
        7477528201428671366uL,
        2681160907110034709uL,
        12328359726370364031uL,
        16854651450907929836uL,
        3384140715920324441uL,
        7783913295349006794uL,
        17796789492404876493uL,
        12973186262895182430uL,
        8294265019745835499uL,
        3597188614796881784uL,
        13819721540753725458uL,
        18246723593521770113uL,
        4190670174747424052uL,
        8707887697765516199uL,
        7249714899603402099uL,
        2768808468102880224uL,
        16248400991498780757uL,
        11785088403942012614uL,
        3291936780352569772uL,
        8025325358597240639uL,
        12127785706904956042uL,
        16915077318774037017uL,
        10432479959725633826uL,
        15147713122803500977uL,
        1524009877625084932uL,
        6329456346323069591uL,
        15705454305770282493uL,
        11170082187107838830uL,
        6635271944638132443uL,
        2226424485906433608uL,
        189522501206157468uL,
        4634679410803088911uL,
        9745950545960650170uL,
        14245012653811987241uL,
        5445476407655580739uL,
        676338306971005648uL,
        14876502445374089573uL,
        10124960353263198198uL,
        4215391513593610003uL,
        8678706776937023872uL,
        13790540925671641653uL,
        18271444552530207910uL,
        8337133204891997132uL,
        3549843186494580063uL,
        17749444438031597290uL,
        13016054137459951737uL,
        12170653315997410989uL,
        16867732534171963454uL,
        3244592164593781643uL,
        8068192726900473112uL,
        16273122767886764658uL,
        11755906975779290337uL,
        7220533709540304724uL,
        2793530071884239303uL,
        6682616997400869628uL,
        2183556611878603887uL,
        15662586120087312346uL,
        11217427617020813641uL,
        1553190491096487459uL,
        6304735387851432112uL,
        10407758620342516485uL,
        15176894045242543510uL,
        14905683634900247362uL,
        10100238751092381137uL,
        5420754629656923748uL,
        705519735670536439uL,
        9793295161182637981uL,
        14202145287119436046uL,
        146654890503152315uL,
        4682024195942093864uL,
        3242565161283638754uL,
        7930564333232481137uL,
        12186217236017068228uL,
        17000743249723264599uL,
        7335380351123765565uL,
        2827240748300537774uL,
        16153640314560107547uL,
        11735716164790313608uL,
        13734056228011347036uL,
        18188291445129067215uL,
        4285430719881142650uL,
        8757259798139230185uL,
        17846161249714921603uL,
        13067947420601767440uL,
        8235833358291897765uL,
        3511522545606540086uL,
        5387043107155988493uL,
        590673871457609374uL,
        14925875833148783915uL,
        10219719885873843128uL,
        284282506805329106uL,
        4684052045342640705uL,
        9660285764170764788uL,
        14186579979835500391uL,
        15610694155489642931uL,
        11120709418076880672uL,
        6720936860919424149uL,
        2284857304564388358uL,
        10490913115006887276uL,
        15233377424362361855uL,
        1474636623804926026uL,
        6234696958930763481uL,
        16178361609106579004uL,
        11706535215248140463uL,
        7306199781952008986uL,
        2851961734412043657uL,
        12229085463316509411uL,
        16953397843693241456uL,
        3195220067441434565uL,
        7973432182840617302uL,
        8278700923620460418uL,
        3464177731752866065uL,
        17798816680404380324uL,
        13110814815472245815uL,
        4310152537884486493uL,
        8728078392784608718uL,
        13704874997943502459uL,
        18213013024491712744uL,
        9707630858549910483uL,
        14143712128616820032uL,
        241414281116563189uL,
        4731397450835853414uL,
        14955056402857342732uL,
        10194998898151653791uL,
        5362321814220069418uL,
        619854820462849209uL,
        1503817855483314797uL,
        6209975379031176446uL,
        10466191297540353867uL,
        15262558828106308056uL,
        6768281431840648882uL,
        2241989909157107745uL,
        15567826590698013588uL,
        11168054230320002311uL
        };
        internal static uint Crc32(uint oldCrc, byte value)
        {
            return Crc.CrcTable[(int)((UIntPtr)((oldCrc ^ (uint)value) & 255u))] ^ oldCrc >> 8;
        }
        public static uint Crc32(int value)
        {
            uint num = 0u;
            num ^= 4294967295u;
            num = (Crc.CrcTable[(int)checked((IntPtr)(unchecked((ulong)num ^ (ulong)((long)value)) & 255uL))] ^ num >> 8);
            return num ^ 4294967295u;
        }
        public static uint Crc32(byte[] buffer)
        {
            if (buffer == null)
            {
                throw new ArgumentNullException("buffer");
            }
            return Crc.Crc32(buffer, 0, buffer.Length);
        }
        public static uint Crc32(byte[] buffer, int offset, int count)
        {
            if (buffer == null)
            {
                throw new ArgumentNullException("buffer");
            }
            if (count < 0)
            {
                throw new ArgumentOutOfRangeException("count", "Count cannot be less than zero");
            }
            uint num = 0u;
            if (offset < 0 || offset + count > buffer.Length)
            {
                throw new ArgumentOutOfRangeException("offset");
            }
            num ^= 4294967295u;
            while (--count >= 0)
            {
                num = (Crc.CrcTable[(int)((UIntPtr)((num ^ (uint)buffer[offset++]) & 255u))] ^ num >> 8);
            }
            return num ^ 4294967295u;
        }
        public static uint Crc32(string str, string encoding)
        {
            byte[] bytes = Encoding.GetEncoding(encoding).GetBytes(str);
            return Crc.Crc32(bytes);
        }
        public static uint Crc32(string str)
        {
            return Crc.Crc32(str, "utf-8");
        }
        public static ulong Crc64(byte[] data)
        {
            ulong num = 18446744073709551615uL;
            for (int i = 0; i < data.Length; i++)
            {
                uint num2 = ((uint)(num >> 56) ^ (uint)data[i]) & 255u;
                num = (Crc.s_CRC64Table[(int)((UIntPtr)num2)] ^ num << 8);
            }
            return num ^ 18446744073709551615uL;
        }
        public static ulong Crc64(string str)
        {
            return Crc.Crc64(Encoding.UTF8.GetBytes(str));
        }
    }
}
